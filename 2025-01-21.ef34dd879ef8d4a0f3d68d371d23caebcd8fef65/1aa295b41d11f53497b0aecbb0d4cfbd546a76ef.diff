

diff --git a/intl/locale/windows/OSPreferences_win.cpp b/intl/locale/windows/OSPreferences_win.cpp
index d790be72022b2..e1093f3a3af26 100644
--- a/intl/locale/windows/OSPreferences_win.cpp
+++ b/intl/locale/windows/OSPreferences_win.cpp
@@ -7,6 +7,7 @@
 #include "OSPreferences.h"
 #include "mozilla/intl/Locale.h"
 #include "mozilla/intl/LocaleService.h"
+#include "mozilla/WindowsVersion.h"
 #include "nsReadableUtils.h"
 
 #include <windows.h>
@@ -30,42 +31,44 @@ bool OSPreferences::ReadSystemLocales(nsTArray<nsCString>& aLocaleList) {
   MOZ_ASSERT(aLocaleList.IsEmpty());
 
 #ifndef __MINGW32__
-  // Try to get language list from GlobalizationPreferences; if this fails,
-  // we'll fall back to GetUserPreferredUILanguages.
-  // Per MSDN, these APIs are not available prior to Win8.
-  ComPtr<IGlobalizationPreferencesStatics> globalizationPrefs;
-  ComPtr<IVectorView<HSTRING>> languages;
-  uint32_t count;
-  if (SUCCEEDED(RoGetActivationFactory(
-          HStringReference(
-              RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences)
-              .Get(),
-          IID_PPV_ARGS(&globalizationPrefs))) &&
-      SUCCEEDED(globalizationPrefs->get_Languages(&languages)) &&
-      SUCCEEDED(languages->get_Size(&count))) {
-    for (uint32_t i = 0; i < count; ++i) {
-      HString lang;
-      if (SUCCEEDED(languages->GetAt(i, lang.GetAddressOf()))) {
-        unsigned int length;
-        const wchar_t* text = lang.GetRawBuffer(&length);
-        NS_LossyConvertUTF16toASCII loc(text, length);
-        if (CanonicalizeLanguageTag(loc)) {
-          if (!loc.Contains('-')) {
-            // DirectWrite font-name code doesn't like to be given a bare
-            // language code with no region subtag, but the
-            // GlobalizationPreferences API may give us one (e.g. "ja").
-            // So if there's no hyphen in the string at this point, we use
-            // AddLikelySubtags to get a suitable region code to
-            // go with it.
-            Locale locale;
-            auto result = LocaleParser::TryParse(loc, locale);
-            if (result.isOk() && locale.AddLikelySubtags().isOk() &&
-                locale.Region().Present()) {
-              loc.Append('-');
-              loc.Append(locale.Region().Span());
+  if (IsWin8OrLater()) {
+    // Try to get language list from GlobalizationPreferences; if this fails,
+    // we'll fall back to GetUserPreferredUILanguages.
+    // Per MSDN, these APIs are not available prior to Win8.
+    ComPtr<IGlobalizationPreferencesStatics> globalizationPrefs;
+    ComPtr<IVectorView<HSTRING>> languages;
+    uint32_t count;
+    if (SUCCEEDED(RoGetActivationFactory(
+            HStringReference(
+                RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences)
+                .Get(),
+            IID_PPV_ARGS(&globalizationPrefs))) &&
+        SUCCEEDED(globalizationPrefs->get_Languages(&languages)) &&
+        SUCCEEDED(languages->get_Size(&count))) {
+      for (uint32_t i = 0; i < count; ++i) {
+        HString lang;
+        if (SUCCEEDED(languages->GetAt(i, lang.GetAddressOf()))) {
+          unsigned int length;
+          const wchar_t* text = lang.GetRawBuffer(&length);
+          NS_LossyConvertUTF16toASCII loc(text, length);
+          if (CanonicalizeLanguageTag(loc)) {
+            if (!loc.Contains('-')) {
+              // DirectWrite font-name code doesn't like to be given a bare
+              // language code with no region subtag, but the
+              // GlobalizationPreferences API may give us one (e.g. "ja").
+              // So if there's no hyphen in the string at this point, we use
+              // AddLikelySubtags to get a suitable region code to
+              // go with it.
+              Locale locale;
+              auto result = LocaleParser::TryParse(loc, locale);
+              if (result.isOk() && locale.AddLikelySubtags().isOk() &&
+                  locale.Region().Present()) {
+                loc.Append('-');
+                loc.Append(locale.Region().Span());
+              }
             }
+            aLocaleList.AppendElement(loc);
           }
-          aLocaleList.AppendElement(loc);
         }
       }
     }
