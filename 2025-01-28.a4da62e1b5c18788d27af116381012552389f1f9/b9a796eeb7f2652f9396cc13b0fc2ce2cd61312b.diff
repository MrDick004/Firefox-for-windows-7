diff --git a/gfx/gl/GLBlitHelperD3D.cpp b/gfx/gl/GLBlitHelperD3D.cpp
index 1d7e85a0a927..effc682ea27f 100644
--- a/gfx/gl/GLBlitHelperD3D.cpp
+++ b/gfx/gl/GLBlitHelperD3D.cpp
@@ -242,7 +242,7 @@ bool GLBlitHelper::BlitDescriptor(const layers::SurfaceDescriptorD3D10& desc,
     auto* textureMap = layers::GpuProcessD3D11TextureMap::Get();
     if (textureMap) {
       Maybe<HANDLE> handle =
-          textureMap->GetSharedHandle(gpuProcessTextureId.ref());
+          textureMap->GetSharedHandleOfCopiedTexture(gpuProcessTextureId.ref());
       if (handle.isSome()) {
         tex = OpenSharedTexture(d3d, (WindowsHandle)handle.ref());
       }
diff --git a/gfx/layers/d3d11/GpuProcessD3D11TextureMap.cpp b/gfx/layers/d3d11/GpuProcessD3D11TextureMap.cpp
index d26632859d04..36651b327999 100644
--- a/gfx/layers/d3d11/GpuProcessD3D11TextureMap.cpp
+++ b/gfx/layers/d3d11/GpuProcessD3D11TextureMap.cpp
@@ -47,16 +47,14 @@ GpuProcessD3D11TextureMap::~GpuProcessD3D11TextureMap() {}
 void GpuProcessD3D11TextureMap::Register(
     GpuProcessTextureId aTextureId, ID3D11Texture2D* aTexture,
     uint32_t aArrayIndex, const gfx::IntSize& aSize,
-    RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-    RefPtr<gfx::FileHandleWrapper> aSharedHandle) {
+    RefPtr<ZeroCopyUsageInfo> aUsageInfo) {
   MonitorAutoLock lock(mMonitor);
-  Register(lock, aTextureId, aTexture, aArrayIndex, aSize, aUsageInfo, nullptr);
+  Register(lock, aTextureId, aTexture, aArrayIndex, aSize, aUsageInfo);
 }
 void GpuProcessD3D11TextureMap::Register(
     const MonitorAutoLock& aProofOfLock, GpuProcessTextureId aTextureId,
     ID3D11Texture2D* aTexture, uint32_t aArrayIndex, const gfx::IntSize& aSize,
-    RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-    RefPtr<gfx::FileHandleWrapper> aSharedHandle) {
+    RefPtr<ZeroCopyUsageInfo> aUsageInfo) {
   MOZ_RELEASE_ASSERT(aTexture);
 
   auto it = mD3D11TexturesById.find(aTextureId);
@@ -65,8 +63,7 @@ void GpuProcessD3D11TextureMap::Register(
     return;
   }
   mD3D11TexturesById.emplace(
-      aTextureId,
-      TextureHolder(aTexture, aArrayIndex, aSize, aUsageInfo, aSharedHandle));
+      aTextureId, TextureHolder(aTexture, aArrayIndex, aSize, aUsageInfo));
 }
 
 void GpuProcessD3D11TextureMap::Unregister(GpuProcessTextureId aTextureId) {
@@ -91,7 +88,7 @@ RefPtr<ID3D11Texture2D> GpuProcessD3D11TextureMap::GetTexture(
   return it->second.mTexture;
 }
 
-Maybe<HANDLE> GpuProcessD3D11TextureMap::GetSharedHandle(
+Maybe<HANDLE> GpuProcessD3D11TextureMap::GetSharedHandleOfCopiedTexture(
     GpuProcessTextureId aTextureId) {
   TextureHolder holder;
   {
@@ -102,10 +99,6 @@ Maybe<HANDLE> GpuProcessD3D11TextureMap::GetSharedHandle(
       return Nothing();
     }
 
-    if (it->second.mSharedHandle) {
-      return Some(it->second.mSharedHandle->GetHandle());
-    }
-
     if (it->second.mCopiedTextureSharedHandle) {
       return Some(it->second.mCopiedTextureSharedHandle->GetHandle());
     }
@@ -293,7 +286,7 @@ void GpuProcessD3D11TextureMap::HandleInTextureUpdateThread() {
     if (texture) {
       auto size = textureHolder->mWrappedTextureHost->GetSize();
       Register(lock, textureHolder->mTextureId, texture, /* aArrayIndex */ 0,
-               size, /* aUsageInfo */ nullptr, /* aSharedHandle */ nullptr);
+               size, /* aUsageInfo */ nullptr);
     }
     mWaitingTextures.erase(textureHolder->mTextureId);
     MOZ_ASSERT(mWaitingTextures.size() == mWaitingTextureQueue.size());
@@ -392,13 +385,11 @@ RefPtr<ID3D11Texture2D> GpuProcessD3D11TextureMap::UpdateTextureData(
 
 GpuProcessD3D11TextureMap::TextureHolder::TextureHolder(
     ID3D11Texture2D* aTexture, uint32_t aArrayIndex, const gfx::IntSize& aSize,
-    RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-    RefPtr<gfx::FileHandleWrapper> aSharedHandle)
+    RefPtr<ZeroCopyUsageInfo> aUsageInfo)
     : mTexture(aTexture),
       mArrayIndex(aArrayIndex),
       mSize(aSize),
-      mZeroCopyUsageInfo(aUsageInfo),
-      mSharedHandle(aSharedHandle) {}
+      mZeroCopyUsageInfo(aUsageInfo) {}
 
 GpuProcessD3D11TextureMap::UpdatingTextureHolder::UpdatingTextureHolder(
     const GpuProcessTextureId aTextureId, TextureHost* aTextureHost,
diff --git a/gfx/layers/d3d11/GpuProcessD3D11TextureMap.h b/gfx/layers/d3d11/GpuProcessD3D11TextureMap.h
index 3257d7d9eb51..6c348aa4d29d 100644
--- a/gfx/layers/d3d11/GpuProcessD3D11TextureMap.h
+++ b/gfx/layers/d3d11/GpuProcessD3D11TextureMap.h
@@ -42,17 +42,15 @@ class GpuProcessD3D11TextureMap {
 
   void Register(GpuProcessTextureId aTextureId, ID3D11Texture2D* aTexture,
                 uint32_t aArrayIndex, const gfx::IntSize& aSize,
-                RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-                RefPtr<gfx::FileHandleWrapper> aSharedHandle = nullptr);
+                RefPtr<ZeroCopyUsageInfo> aUsageInfo);
   void Register(const MonitorAutoLock& aProofOfLock,
                 GpuProcessTextureId aTextureId, ID3D11Texture2D* aTexture,
                 uint32_t aArrayIndex, const gfx::IntSize& aSize,
-                RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-                RefPtr<gfx::FileHandleWrapper> aSharedHandle);
+                RefPtr<ZeroCopyUsageInfo> aUsageInfo);
   void Unregister(GpuProcessTextureId aTextureId);
 
   RefPtr<ID3D11Texture2D> GetTexture(GpuProcessTextureId aTextureId);
-  Maybe<HANDLE> GetSharedHandle(GpuProcessTextureId aTextureId);
+  Maybe<HANDLE> GetSharedHandleOfCopiedTexture(GpuProcessTextureId aTextureId);
 
   size_t GetWaitingTextureCount() const;
 
@@ -69,15 +67,13 @@ class GpuProcessD3D11TextureMap {
   struct TextureHolder {
     TextureHolder(ID3D11Texture2D* aTexture, uint32_t aArrayIndex,
                   const gfx::IntSize& aSize,
-                  RefPtr<ZeroCopyUsageInfo> aUsageInfo,
-                  RefPtr<gfx::FileHandleWrapper> aSharedHandle);
+                  RefPtr<ZeroCopyUsageInfo> aUsageInfo);
     TextureHolder() = default;
 
     RefPtr<ID3D11Texture2D> mTexture;
     uint32_t mArrayIndex = 0;
     gfx::IntSize mSize;
     RefPtr<ZeroCopyUsageInfo> mZeroCopyUsageInfo;
-    RefPtr<gfx::FileHandleWrapper> mSharedHandle;
     RefPtr<ID3D11Texture2D> mCopiedTexture;
     RefPtr<gfx::FileHandleWrapper> mCopiedTextureSharedHandle;
   };
diff --git a/gfx/layers/d3d11/TextureD3D11.cpp b/gfx/layers/d3d11/TextureD3D11.cpp
index 18904c587dd1..f5c5d5208fbb 100644
--- a/gfx/layers/d3d11/TextureD3D11.cpp
+++ b/gfx/layers/d3d11/TextureD3D11.cpp
@@ -632,24 +632,8 @@ D3D11TextureData* D3D11TextureData::Create(IntSize aSize, SurfaceFormat aFormat,
   RefPtr<gfx::FileHandleWrapper> handle =
       new gfx::FileHandleWrapper(UniqueFileHandle(sharedHandle));
 
-  D3D11TextureData* data = new D3D11TextureData(texture11, 0, std::move(handle),
-                                                aSize, aFormat, aFlags);
-
-  texture11->GetDevice(getter_AddRefs(device));
-  if (XRE_IsGPUProcess() &&
-      device == gfx::DeviceManagerDx::Get()->GetCompositorDevice()) {
-    const auto textureId = GpuProcessD3D11TextureMap::GetNextTextureId();
-    data->SetGpuProcessTextureId(textureId);
-    // Register ID3D11Texture2D to GpuProcessD3D11TextureMap
-    auto* textureMap = GpuProcessD3D11TextureMap::Get();
-    if (textureMap) {
-      textureMap->Register(textureId, texture11, 0, aSize, nullptr, handle);
-    } else {
-      gfxCriticalNoteOnce << "GpuProcessD3D11TextureMap does not exist";
-    }
-  }
-
-  return data;
+  return new D3D11TextureData(texture11, 0, std::move(handle), aSize, aFormat,
+                              aFlags);
 }
 
 void D3D11TextureData::Deallocate(LayersIPCChannel* aAllocator) {
diff --git a/gfx/webrender_bindings/RenderD3D11TextureHost.cpp b/gfx/webrender_bindings/RenderD3D11TextureHost.cpp
index eeb0f57d2c8f..c5218943fa45 100644
--- a/gfx/webrender_bindings/RenderD3D11TextureHost.cpp
+++ b/gfx/webrender_bindings/RenderD3D11TextureHost.cpp
@@ -51,7 +51,8 @@ RenderDXGITextureHost::RenderDXGITextureHost(
               mFormat != gfx::SurfaceFormat::P010 &&
               mFormat != gfx::SurfaceFormat::P016) ||
              (mSize.width % 2 == 0 && mSize.height % 2 == 0));
-  MOZ_ASSERT(!(!aHandle && aGpuProcessTextureId.isNothing()));
+  MOZ_ASSERT((aHandle && aGpuProcessTextureId.isNothing()) ||
+             (!aHandle && aGpuProcessTextureId.isSome()));
 }
 
 RenderDXGITextureHost::~RenderDXGITextureHost() {
