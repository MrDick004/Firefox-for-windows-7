

diff --git a/ipc/chromium/src/base/shared_memory_win.cc b/ipc/chromium/src/base/shared_memory_win.cc
index 8269912156a5f..a22a68c7e2348 100644
--- a/ipc/chromium/src/base/shared_memory_win.cc
+++ b/ipc/chromium/src/base/shared_memory_win.cc
@@ -11,6 +11,7 @@
 #include "base/string_util.h"
 #include "mozilla/ipc/ProtocolUtils.h"
 #include "mozilla/RandomNum.h"
+#include "mozilla/WindowsVersion.h"
 #include "nsDebug.h"
 #include "nsString.h"
 #ifdef MOZ_MEMORY
@@ -160,6 +161,7 @@ bool SharedMemory::CreateInternal(size_t size, bool freezeable) {
   SECURITY_ATTRIBUTES sa, *psa = nullptr;
   SECURITY_DESCRIPTOR sd;
   ACL dacl;
+  nsAutoStringN<sizeof("MozSharedMem_") + 16 * 4> name;
 
   if (freezeable) {
     psa = &sa;
@@ -173,10 +175,24 @@ bool SharedMemory::CreateInternal(size_t size, bool freezeable) {
         NS_WARN_IF(!SetSecurityDescriptorDacl(&sd, TRUE, &dacl, FALSE))) {
       return false;
     }
+
+    // Older versions of Windows will silently ignore the security
+    // attributes unless the object has a name.
+    if (!mozilla::IsWin8Point1OrLater()) {
+      name.AssignLiteral("MozSharedMem_");
+      for (size_t i = 0; i < 4; ++i) {
+        mozilla::Maybe<uint64_t> randomNum = mozilla::RandomUint64();
+        if (NS_WARN_IF(randomNum.isNothing())) {
+          return false;
+        }
+        name.AppendPrintf("%016llx", *randomNum);
+      }
+    }
   }
 
-  mapped_file_.reset(MozCreateFileMappingW(psa, PAGE_READWRITE, 0,
-                                           static_cast<DWORD>(size), nullptr));
+  mapped_file_.reset(
+      MozCreateFileMappingW(psa, PAGE_READWRITE, 0, static_cast<DWORD>(size),
+                            name.IsEmpty() ? nullptr : name.get()));
   if (!mapped_file_) return false;
 
   max_size_ = size;
diff --git a/ipc/mscom/ProcessRuntime.cpp b/ipc/mscom/ProcessRuntime.cpp
index ae4e32247c80f..389dcf239043b 100644
--- a/ipc/mscom/ProcessRuntime.cpp
+++ b/ipc/mscom/ProcessRuntime.cpp
@@ -15,6 +15,7 @@
 #include "mozilla/Unused.h"
 #include "mozilla/Vector.h"
 #include "mozilla/WindowsProcessMitigations.h"
+#include "mozilla/WindowsVersion.h"
 
 #if defined(MOZILLA_INTERNAL_API)
 #  include "mozilla/mscom/EnsureMTA.h"
@@ -377,8 +378,10 @@ ProcessRuntime::InitializeSecurity(const ProcessCategory aProcessCategory) {
     return HRESULT_FROM_WIN32(::GetLastError());
   }
 
+  const bool appContainersSupported = IsWin8OrLater();
   const bool allowAllNonRestrictedAppContainers =
-      aProcessCategory == ProcessCategory::GeckoBrowserParent;
+      aProcessCategory == ProcessCategory::GeckoBrowserParent &&
+      appContainersSupported;
 
   BYTE appContainersSid[SECURITY_MAX_SID_SIZE];
   DWORD appContainersSidSize = sizeof(appContainersSid);
@@ -390,15 +393,17 @@ ProcessRuntime::InitializeSecurity(const ProcessCategory aProcessCategory) {
   }
 
   UniquePtr<BYTE[]> tokenAppContainerInfBuf;
-  len = 0;
-  ::GetTokenInformation(token, TokenAppContainerSid, nullptr, len, &len);
-  if (len) {
-    tokenAppContainerInfBuf = MakeUnique<BYTE[]>(len);
-    ok = ::GetTokenInformation(token, TokenAppContainerSid,
-                               tokenAppContainerInfBuf.get(), len, &len);
-    if (!ok) {
-      // Don't fail if we get an error retrieving an app container SID.
-      tokenAppContainerInfBuf = nullptr;
+  if (appContainersSupported) {
+    len = 0;
+    ::GetTokenInformation(token, TokenAppContainerSid, nullptr, len, &len);
+    if (len) {
+      tokenAppContainerInfBuf = MakeUnique<BYTE[]>(len);
+      ok = ::GetTokenInformation(token, TokenAppContainerSid,
+                                 tokenAppContainerInfBuf.get(), len, &len);
+      if (!ok) {
+        // Don't fail if we get an error retrieving an app container SID.
+        tokenAppContainerInfBuf = nullptr;
+      }
     }
   }
 
diff --git a/ipc/mscom/Utils.cpp b/ipc/mscom/Utils.cpp
index d93e012587e94..366fe38a75561 100644
--- a/ipc/mscom/Utils.cpp
+++ b/ipc/mscom/Utils.cpp
@@ -14,8 +14,10 @@
 #include "mozilla/DebugOnly.h"
 #include "mozilla/mscom/Utils.h"
 #include "mozilla/RefPtr.h"
+#include "mozilla/WindowsVersion.h"
 
 #include <objidl.h>
+#include <shlwapi.h>
 #include <winnt.h>
 
 #include <utility>
@@ -188,21 +190,61 @@ long CreateStream(const uint8_t* aInitBuf, const uint32_t aInitBufSize,
   HRESULT hr;
   RefPtr<IStream> stream;
 
-  // If aInitBuf is null then initSize must be 0.
-  UINT initSize = aInitBuf ? aInitBufSize : 0;
-  stream = already_AddRefed<IStream>(::SHCreateMemStream(aInitBuf, initSize));
-  if (!stream) {
-    return E_OUTOFMEMORY;
-  }
+  if (IsWin8OrLater()) {
+    // SHCreateMemStream is not safe for us to use until Windows 8. On older
+    // versions of Windows it is not thread-safe and it creates IStreams that do
+    // not support the full IStream API.
+
+    // If aInitBuf is null then initSize must be 0.
+    UINT initSize = aInitBuf ? aInitBufSize : 0;
+    stream = already_AddRefed<IStream>(::SHCreateMemStream(aInitBuf, initSize));
+    if (!stream) {
+      return E_OUTOFMEMORY;
+    }
 
-  if (!aInitBuf) {
-    // Now we'll set the required size
-    ULARGE_INTEGER newSize;
-    newSize.QuadPart = aInitBufSize;
-    hr = stream->SetSize(newSize);
+    if (!aInitBuf) {
+      // Now we'll set the required size
+      ULARGE_INTEGER newSize;
+      newSize.QuadPart = aInitBufSize;
+      hr = stream->SetSize(newSize);
+      if (FAILED(hr)) {
+        return hr;
+      }
+    }
+  } else {
+    HGLOBAL hglobal = ::GlobalAlloc(GMEM_MOVEABLE, aInitBufSize);
+    if (!hglobal) {
+      return HRESULT_FROM_WIN32(::GetLastError());
+    }
+
+    // stream takes ownership of hglobal if this call is successful
+    hr = ::CreateStreamOnHGlobal(hglobal, TRUE, getter_AddRefs(stream));
     if (FAILED(hr)) {
+      ::GlobalFree(hglobal);
       return hr;
     }
+
+    // The default stream size is derived from ::GlobalSize(hglobal), which due
+    // to rounding may be larger than aInitBufSize. We forcibly set the correct
+    // stream size here.
+    ULARGE_INTEGER streamSize;
+    streamSize.QuadPart = aInitBufSize;
+    hr = stream->SetSize(streamSize);
+    if (FAILED(hr)) {
+      return hr;
+    }
+
+    if (aInitBuf) {
+      ULONG bytesWritten;
+      hr = stream->Write(aInitBuf, aInitBufSize, &bytesWritten);
+      if (FAILED(hr)) {
+        return hr;
+      }
+
+      if (bytesWritten != aInitBufSize) {
+        return E_UNEXPECTED;
+      }
+    }
   }
 
   // Ensure that the stream is rewound
