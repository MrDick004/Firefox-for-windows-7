

diff --git a/js/src/jit/ProcessExecutableMemory.cpp b/js/src/jit/ProcessExecutableMemory.cpp
index 0c00b17c73be5..d4f50881b701a 100644
--- a/js/src/jit/ProcessExecutableMemory.cpp
+++ b/js/src/jit/ProcessExecutableMemory.cpp
@@ -195,8 +195,10 @@ static DWORD ExceptionHandler(PEXCEPTION_RECORD exceptionRecord,
   return ExceptionContinueSearch;
 }
 
+PRUNTIME_FUNCTION RuntimeFunctionCallback(DWORD64 ControlPc, PVOID Context);
+
 // Required for enabling Stackwalking on windows using external tools.
-extern "C" NTSYSAPI DWORD NTAPI RtlAddGrowableFunctionTable(
+NTSYSAPI DWORD NTAPI RtlAddGrowableFunctionTable(
     PVOID* DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount,
     DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd);
 
@@ -279,28 +281,47 @@ static bool RegisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
   r->thunk[11] = 0xe0;
 #    endif
 
-  // RtlAddGrowableFunctionTable will write into the region. We must therefore
-  // only write-protect is after this has been called.
+  BOOLEAN result = false;
 
-  // XXX NB: The profiler believes this function is only called from the main
-  // thread. If that ever becomes untrue, the profiler must be updated
-  // immediately.
-  {
+  // RtlAddGrowableFunctionTable is only available in Windows 8.1 and higher.
+  // This can be simplified if our compile target changes.
+  HMODULE ntdll_module =
+      LoadLibraryExW(L"ntdll.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
+
+  static decltype(&::RtlAddGrowableFunctionTable) addGrowableFunctionTable =
+      reinterpret_cast<decltype(&::RtlAddGrowableFunctionTable)>(
+          ::GetProcAddress(ntdll_module, "RtlAddGrowableFunctionTable"));
+
+  // AddGrowableFunctionTable will write into the region. We must therefore
+  // only write-protect is after this has been called.
+  if (addGrowableFunctionTable) {
+    // XXX NB: The profiler believes this function is only called from the main
+    // thread. If that ever becomes untrue, the profiler must be updated
+    // immediately.
     AutoSuppressStackWalking suppress;
-    DWORD result = RtlAddGrowableFunctionTable(
-        &r->dynamicTable, &r->runtimeFunction, 1, 1, (ULONG_PTR)p,
-        (ULONG_PTR)p + bytes - pageSize);
-    if (result != S_OK) {
+    result = addGrowableFunctionTable(&r->dynamicTable, &r->runtimeFunction, 1,
+                                      1, (ULONG_PTR)p,
+                                      (ULONG_PTR)p + bytes - pageSize) == S_OK;
+  } else {
+    if (!sJitExceptionHandler) {
+      // No point installing this.
       return false;
     }
+    // XXX NB: The profiler believes this function is only called from the main
+    // thread. If that ever becomes untrue, the profiler must be updated
+    // immediately.
+    AutoSuppressStackWalking suppress;
+    result =
+        RtlInstallFunctionTableCallback((DWORD64)p | 0x3, (DWORD64)p, bytes,
+                                        RuntimeFunctionCallback, NULL, NULL);
   }
 
   DWORD oldProtect;
-  if (!VirtualProtect(p, pageSize, PAGE_EXECUTE_READ, &oldProtect)) {
+  if (result && !VirtualProtect(p, pageSize, PAGE_EXECUTE_READ, &oldProtect)) {
     MOZ_CRASH();
   }
 
-  return true;
+  return result;
 }
 
 static void UnregisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
@@ -991,6 +1012,22 @@ bool js::jit::ReprotectRegion(void* start, size_t size,
   return true;
 }
 
+#if defined(XP_WIN) && defined(NEED_JIT_UNWIND_HANDLING)
+static PRUNTIME_FUNCTION RuntimeFunctionCallback(DWORD64 ControlPc,
+                                                 PVOID Context) {
+  MOZ_ASSERT(sJitExceptionHandler);
+
+  // RegisterExecutableMemory already set up the runtime function in the
+  // exception-data page preceding the allocation.
+  uint8_t* p = execMemory.base();
+  if (!p) {
+    return nullptr;
+  }
+  return (PRUNTIME_FUNCTION)(p - gc::SystemPageSize() +
+                             offsetof(ExceptionHandlerRecord, runtimeFunction));
+}
+#endif
+
 #ifdef JS_USE_APPLE_FAST_WX
 void js::jit::AutoMarkJitCodeWritableForThread::markExecutable(
     bool executable) {
diff --git a/js/src/jit/ProcessExecutableMemory.h b/js/src/jit/ProcessExecutableMemory.h
index 9073d30e0390c..1c098fb815782 100644
--- a/js/src/jit/ProcessExecutableMemory.h
+++ b/js/src/jit/ProcessExecutableMemory.h
@@ -18,9 +18,9 @@ namespace jit {
 static const size_t MaxCodeBytesPerProcess = 140 * 1024 * 1024;
 #else
 // This is the largest number which satisfies various alignment static
-// asserts that is <= INT32_MAX. If we ever want to increase this, we need to
-// ensure RtlAddGrowableFunctionTable does the right thing because
-// RUNTIME_FUNCTION::EndAddress is a (32-bit) DWORD.
+// asserts that is <= INT32_MAX. The INT32_MAX limit is required for making a
+// single call to RtlInstallFunctionTableCallback(). (This limit could be
+// relaxed in the future by making multiple calls.)
 static const size_t MaxCodeBytesPerProcess = 2044 * 1024 * 1024;
 #endif
 
