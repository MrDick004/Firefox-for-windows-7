

diff --git a/js/src/moz.build b/js/src/moz.build
index ae225a59c6117..3d025d637136a 100644
--- a/js/src/moz.build
+++ b/js/src/moz.build
@@ -500,6 +500,7 @@ if CONFIG["MOZ_INSTRUMENTS"]:
 if CONFIG["OS_ARCH"] == "WINNT":
     OS_LIBS += [
         "advapi32",
+        "winmm",
     ]
     UNIFIED_SOURCES += [
         "threading/windows/CpuCount.cpp",
diff --git a/js/src/vm/Initialization.cpp b/js/src/vm/Initialization.cpp
index 3c9f72ab1d3f2..0c8368b9f66f6 100644
--- a/js/src/vm/Initialization.cpp
+++ b/js/src/vm/Initialization.cpp
@@ -132,6 +132,8 @@ JS_PUBLIC_API const char* JS::detail::InitWithFailureDiagnostic(
   install_rust_hooks();
 #endif
 
+  PRMJ_NowInit();
+
   if (frontendOnly == FrontendOnly::No) {
     // The first invocation of `ProcessCreation` creates a temporary thread
     // and crashes if that fails, i.e. because we're out of memory. To prevent
@@ -274,6 +276,17 @@ static void ShutdownImpl(JS::detail::FrontendOnly frontendOnly) {
 
   js::wasm::ShutDown();
 
+  // The only difficult-to-address reason for the restriction that you can't
+  // call JS_Init/stuff/JS_ShutDown multiple times is the Windows PRMJ
+  // NowInit initialization code, which uses PR_CallOnce to initialize the
+  // PRMJ_Now subsystem.  (For reinitialization to be permitted, we'd need to
+  // "reset" the called-once status -- doable, but more trouble than it's
+  // worth now.)  Initializing that subsystem from JS_Init eliminates the
+  // problem, but initialization can take a comparatively long time (15ms or
+  // so), so we really don't want to do it in JS_Init, and we really do want
+  // to do it only when PRMJ_Now is eventually called.
+  PRMJ_NowShutdown();
+
 #if JS_HAS_INTL_API
   mozilla::intl::ICU4CLibrary::Cleanup();
 #  if MOZ_ICU4X
diff --git a/js/src/vm/Time.cpp b/js/src/vm/Time.cpp
index 79884a962c200..7a7910fc318c3 100644
--- a/js/src/vm/Time.cpp
+++ b/js/src/vm/Time.cpp
@@ -8,6 +8,9 @@
 
 #include "vm/Time.h"
 
+#include "mozilla/DebugOnly.h"
+#include "mozilla/MathAlgorithms.h"
+
 #ifdef SOLARIS
 #  define _REENTRANT 1
 #endif
@@ -19,8 +22,9 @@
 #ifdef XP_WIN
 #  include <windef.h>
 #  include <winbase.h>
-#  include <crtdbg.h> /* for _CrtSetReportMode */
-#  include <stdlib.h> /* for _set_invalid_parameter_handler */
+#  include <crtdbg.h>   /* for _CrtSetReportMode */
+#  include <mmsystem.h> /* for timeBegin/EndPeriod */
+#  include <stdlib.h>   /* for _set_invalid_parameter_handler */
 #endif
 
 #ifdef XP_UNIX
@@ -33,6 +37,8 @@ extern int gettimeofday(struct timeval* tv);
 
 #endif /* XP_UNIX */
 
+using mozilla::DebugOnly;
+
 #if defined(XP_UNIX)
 int64_t PRMJ_Now() {
   struct timeval tv;
@@ -62,10 +68,167 @@ static int64_t FileTimeToUnixMicroseconds(const FILETIME& ft) {
   return t / 10;
 }
 
-int64_t PRMJ_Now() {
-  FILETIME ft;
-  GetSystemTimePreciseAsFileTime(&ft);
-  return FileTimeToUnixMicroseconds(ft);
+struct CalibrationData {
+  double freq;         /* The performance counter frequency */
+  double offset;       /* The low res 'epoch' */
+  double timer_offset; /* The high res 'epoch' */
+
+  bool calibrated;
+
+  CRITICAL_SECTION data_lock;
+};
+
+static CalibrationData calibration = {0};
+
+static void NowCalibrate() {
+  MOZ_ASSERT(calibration.freq > 0);
+
+  // By wrapping a timeBegin/EndPeriod pair of calls around this loop,
+  // the loop seems to take much less time (1 ms vs 15ms) on Vista.
+  timeBeginPeriod(1);
+  FILETIME ft, ftStart;
+  GetSystemTimeAsFileTime(&ftStart);
+  do {
+    GetSystemTimeAsFileTime(&ft);
+  } while (memcmp(&ftStart, &ft, sizeof(ft)) == 0);
+  timeEndPeriod(1);
+
+  LARGE_INTEGER now;
+  QueryPerformanceCounter(&now);
+
+  calibration.offset = FileTimeToUnixMicroseconds(ft);
+  calibration.timer_offset = double(now.QuadPart);
+  calibration.calibrated = true;
+}
+
+static const unsigned DataLockSpinCount = 4096;
+
+static void(WINAPI* pGetSystemTimePreciseAsFileTime)(LPFILETIME) = nullptr;
+
+void PRMJ_NowInit() {
+  memset(&calibration, 0, sizeof(calibration));
+
+  // According to the documentation, QueryPerformanceFrequency will never
+  // return false or return a non-zero frequency on systems that run
+  // Windows XP or later. Also, the frequency is fixed so we only have to
+  // query it once.
+  LARGE_INTEGER liFreq;
+  DebugOnly<BOOL> res = QueryPerformanceFrequency(&liFreq);
+  MOZ_ASSERT(res);
+  calibration.freq = double(liFreq.QuadPart);
+  MOZ_ASSERT(calibration.freq > 0.0);
+
+  InitializeCriticalSectionAndSpinCount(&calibration.data_lock,
+                                        DataLockSpinCount);
+
+  // Windows 8 has a new API function we can use.
+  if (HMODULE h = GetModuleHandle("kernel32.dll")) {
+    pGetSystemTimePreciseAsFileTime = (void(WINAPI*)(LPFILETIME))GetProcAddress(
+        h, "GetSystemTimePreciseAsFileTime");
+  }
+}
+
+void PRMJ_NowShutdown() { DeleteCriticalSection(&calibration.data_lock); }
+
+#  define MUTEX_LOCK(m) EnterCriticalSection(m)
+#  define MUTEX_UNLOCK(m) LeaveCriticalSection(m)
+#  define MUTEX_SETSPINCOUNT(m, c) SetCriticalSectionSpinCount((m), (c))
+
+// Please see bug 363258 for why the win32 timing code is so complex.
+static int64_t PRMJ_Now() {
+  if (pGetSystemTimePreciseAsFileTime) {
+    // Windows 8 has a new API function that does all the work.
+    FILETIME ft;
+    pGetSystemTimePreciseAsFileTime(&ft);
+    return int64_t(FileTimeToUnixMicroseconds(ft));
+  }
+
+  bool calibrated = false;
+  bool needsCalibration = !calibration.calibrated;
+  double cachedOffset = 0.0;
+  while (true) {
+    if (needsCalibration) {
+      MUTEX_LOCK(&calibration.data_lock);
+
+      // Recalibrate only if no one else did before us.
+      if (calibration.offset == cachedOffset) {
+        // Since calibration can take a while, make any other
+        // threads immediately wait.
+        MUTEX_SETSPINCOUNT(&calibration.data_lock, 0);
+
+        NowCalibrate();
+
+        calibrated = true;
+
+        // Restore spin count.
+        MUTEX_SETSPINCOUNT(&calibration.data_lock, DataLockSpinCount);
+      }
+
+      MUTEX_UNLOCK(&calibration.data_lock);
+    }
+
+    // Calculate a low resolution time.
+    FILETIME ft;
+    GetSystemTimeAsFileTime(&ft);
+    double lowresTime = FileTimeToUnixMicroseconds(ft);
+
+    // Grab high resolution time.
+    LARGE_INTEGER now;
+    QueryPerformanceCounter(&now);
+    double highresTimerValue = double(now.QuadPart);
+
+    MUTEX_LOCK(&calibration.data_lock);
+    double highresTime = calibration.offset +
+                         PRMJ_USEC_PER_SEC *
+                             (highresTimerValue - calibration.timer_offset) /
+                             calibration.freq;
+    cachedOffset = calibration.offset;
+    MUTEX_UNLOCK(&calibration.data_lock);
+
+    // Assume the NT kernel ticks every 15.6 ms. Unfortunately there's no
+    // good way to determine this (NtQueryTimerResolution is an undocumented
+    // API), but 15.6 ms seems to be the max possible value. Hardcoding 15.6
+    // means we'll recalibrate if the highres and lowres timers diverge by
+    // more than 30 ms.
+    static const double KernelTickInMicroseconds = 15625.25;
+
+    // Check for clock skew.
+    double diff = lowresTime - highresTime;
+
+    // For some reason that I have not determined, the skew can be
+    // up to twice a kernel tick. This does not seem to happen by
+    // itself, but I have only seen it triggered by another program
+    // doing some kind of file I/O. The symptoms are a negative diff
+    // followed by an equally large positive diff.
+    if (mozilla::Abs(diff) <= 2 * KernelTickInMicroseconds) {
+      // No detectable clock skew.
+      return int64_t(highresTime);
+    }
+
+    if (calibrated) {
+      // If we already calibrated once this instance, and the
+      // clock is still skewed, then either the processor(s) are
+      // wildly changing clockspeed or the system is so busy that
+      // we get switched out for long periods of time. In either
+      // case, it would be infeasible to make use of high
+      // resolution results for anything, so let's resort to old
+      // behavior for this call. It's possible that in the
+      // future, the user will want the high resolution timer, so
+      // we don't disable it entirely.
+      return int64_t(lowresTime);
+    }
+
+    // It is possible that when we recalibrate, we will return a
+    // value less than what we have returned before; this is
+    // unavoidable. We cannot tell the different between a
+    // faulty QueryPerformanceCounter implementation and user
+    // changes to the operating system time. Since we must
+    // respect user changes to the operating system time, we
+    // cannot maintain the invariant that Date.now() never
+    // decreases; the old implementation has this behavior as
+    // well.
+    needsCalibration = true;
+  }
 }
 #endif
 
diff --git a/js/src/vm/Time.h b/js/src/vm/Time.h
index 9ec27f1ef5c17..cc3c8a96418da 100644
--- a/js/src/vm/Time.h
+++ b/js/src/vm/Time.h
@@ -37,6 +37,20 @@ struct PRMJTime {
 /* Return the current local time in micro-seconds */
 extern int64_t PRMJ_Now();
 
+/* Initialize the resources associated with PRMJ_Now. */
+#if defined(XP_WIN)
+extern void PRMJ_NowInit();
+#else
+inline void PRMJ_NowInit() {}
+#endif
+
+/* Release the resources associated with PRMJ_Now; don't call PRMJ_Now again */
+#ifdef XP_WIN
+extern void PRMJ_NowShutdown();
+#else
+inline void PRMJ_NowShutdown() {}
+#endif
+
 #if !JS_HAS_INTL_API
 /* Format a time value into a buffer. Same semantics as strftime() */
 extern size_t PRMJ_FormatTime(char* buf, size_t buflen, const char* fmt,
