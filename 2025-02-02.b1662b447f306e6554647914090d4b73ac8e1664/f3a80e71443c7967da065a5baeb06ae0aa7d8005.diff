diff --git a/netwerk/protocol/http/nsHttpHandler.cpp b/netwerk/protocol/http/nsHttpHandler.cpp
index adc7a0a6765f..ed0d78852a39 100644
--- a/netwerk/protocol/http/nsHttpHandler.cpp
+++ b/netwerk/protocol/http/nsHttpHandler.cpp
@@ -813,13 +813,7 @@ void nsHttpHandler::BuildUserAgent() {
 }
 
 #ifdef XP_WIN
-// Hardcode the reported Windows version to 10.0. This way, Microsoft doesn't
-// get to change Web compat-sensitive values without our veto. The compat-
-// sensitivity keeps going up as 10.0 stays as the current value for longer
-// and longer. If the system-reported version ever changes, we'll be able to
-// take our time to evaluate the Web compat impact instead of having to
-// scramble to react like happened with macOS changing from 10.x to 11.x.
-#  define OSCPU_WINDOWS "Windows NT 10.0"
+#  define OSCPU_WINDOWS "Windows NT %ld.%ld"
 #  define OSCPU_WIN64 OSCPU_WINDOWS "; Win64; x64"
 #endif
 
@@ -890,29 +884,39 @@ void nsHttpHandler::InitUserAgentComponents() {
 
   // Gather OS/CPU.
 #if defined(XP_WIN)
-
+  OSVERSIONINFO info = {sizeof(OSVERSIONINFO)};
+  if (!GetVersionEx(&info) || info.dwMajorVersion >= 10) {
+    // Cap the reported Windows version to 10.0. This way, Microsoft doesn't
+    // get to change Web compat-sensitive values without our veto. The
+    // compat-sensitivity keeps going up as 10.0 stays as the current value
+    // for longer and longer. If the system-reported version ever changes,
+    // we'll be able to take our time to evaluate the Web compat impact
+    // instead of having to scramble to react like happened with macOS
+    // changing from 10.x to 11.x.
+    info.dwMajorVersion = 10;
+    info.dwMinorVersion = 0;
+  }
+
+  const char* format;
 #  if defined _M_X64 || defined _M_AMD64
-  mOscpu.AssignLiteral(OSCPU_WIN64);
+  format = OSCPU_WIN64;
 #  elif defined(_ARM64_)
   // Report ARM64 Windows 11+ as x86_64 and Windows 10 as x86. Windows 11+
   // supports x86_64 emulation, but Windows 10 only supports x86 emulation.
-  if (IsWin11OrLater()) {
-    mOscpu.AssignLiteral(OSCPU_WIN64);
-  } else {
-    mOscpu.AssignLiteral(OSCPU_WINDOWS);
-  }
+  format = IsWin11OrLater() ? OSCPU_WIN64 : OSCPU_WINDOWS;
 #  else
   BOOL isWow64 = FALSE;
   if (!IsWow64Process(GetCurrentProcess(), &isWow64)) {
     isWow64 = FALSE;
   }
-  if (isWow64) {
-    mOscpu.AssignLiteral(OSCPU_WIN64);
-  } else {
-    mOscpu.AssignLiteral(OSCPU_WINDOWS);
-  }
+  format = isWow64 ? OSCPU_WIN64 : OSCPU_WINDOWS;
 #  endif
 
+  SmprintfPointer buf =
+      mozilla::Smprintf(format, info.dwMajorVersion, info.dwMinorVersion);
+  if (buf) {
+    mOscpu = buf.get();
+  }
 #elif defined(XP_MACOSX)
   mOscpu.AssignLiteral("Intel Mac OS X 10.15");
 #elif defined(ANDROID)
