

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
index 525d31c9c8e78..6753b4bfcb6f9 100644
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1554,6 +1554,8 @@ pref("browser.bookmarks.editDialog.maxRecentFolders", 7);
   pref("browser.taskbar.previews.max", 20);
   pref("browser.taskbar.previews.cachetime", 5);
 
+  pref("browser.taskbar.lists.legacyBackend", false);
+
   pref("browser.taskbar.lists.enabled", true);
   pref("browser.taskbar.lists.frequent.enabled", true);
   pref("browser.taskbar.lists.recent.enabled", false);
diff --git a/browser/modules/WindowsJumpLists.sys.mjs b/browser/modules/WindowsJumpLists.sys.mjs
index 13a299d1ae744..db4273b475993 100644
--- a/browser/modules/WindowsJumpLists.sys.mjs
+++ b/browser/modules/WindowsJumpLists.sys.mjs
@@ -10,6 +10,7 @@ const IDLE_TIMEOUT_SECONDS = 5 * 60;
 
 // Prefs
 const PREF_TASKBAR_BRANCH = "browser.taskbar.lists.";
+const PREF_TASKBAR_LEGACY_BACKEND = "legacyBackend";
 const PREF_TASKBAR_ENABLED = "enabled";
 const PREF_TASKBAR_ITEMCOUNT = "maxListItemCount";
 const PREF_TASKBAR_FREQUENT = "frequent.enabled";
@@ -17,6 +18,12 @@ const PREF_TASKBAR_RECENT = "recent.enabled";
 const PREF_TASKBAR_TASKS = "tasks.enabled";
 const PREF_TASKBAR_REFRESH = "refreshInSeconds";
 
+// Hash keys for pendingStatements.
+const LIST_TYPE = {
+  FREQUENT: 0,
+  RECENT: 1,
+};
+
 /**
  * Exports
  */
@@ -139,6 +146,7 @@ var Builder = class {
   constructor(builder) {
     this._builder = builder;
     this._tasks = null;
+    this._pendingStatements = {};
     this._shuttingDown = false;
     // These are ultimately controlled by prefs, so we disable
     // everything until is read from there
@@ -284,8 +292,223 @@ var Builder = class {
     }
   }
 
+  /**
+   * Legacy list building
+   *
+   * @note Async builders must add their mozIStoragePendingStatement to
+   *       _pendingStatements object, using a different LIST_TYPE entry for
+   *       each statement. Once finished they must remove it and call
+   *       commitBuild().  When there will be no more _pendingStatements,
+   *       commitBuild() will commit for real.
+   */
+
+  _hasPendingStatements() {
+    return !!Object.keys(this._pendingStatements).length;
+  }
+
+  async buildListLegacy() {
+    if (!(this._builder instanceof Ci.nsILegacyJumpListBuilder)) {
+      console.error(
+        "Expected nsILegacyJumpListBuilder. The builder is of the wrong type."
+      );
+      return;
+    }
+
+    if (
+      (this._showFrequent || this._showRecent) &&
+      this._hasPendingStatements()
+    ) {
+      // We were requested to update the list while another update was in
+      // progress, this could happen at shutdown, idle or privatebrowsing.
+      // Abort the current list building.
+      for (let listType in this._pendingStatements) {
+        this._pendingStatements[listType].cancel();
+        delete this._pendingStatements[listType];
+      }
+      this._builder.abortListBuild();
+    }
+
+    // anything to build?
+    if (!this._showFrequent && !this._showRecent && !this._showTasks) {
+      // don't leave the last list hanging on the taskbar.
+      this._deleteActiveJumpList();
+      return;
+    }
+
+    await this._startBuild();
+
+    if (this._showTasks) {
+      this._buildTasks();
+    }
+
+    // Space for frequent items takes priority over recent.
+    if (this._showFrequent) {
+      this._buildFrequent();
+    }
+
+    if (this._showRecent) {
+      this._buildRecent();
+    }
+
+    this._commitBuild();
+  }
+
+  /**
+   * Taskbar api wrappers
+   */
+
+  async _startBuild() {
+    this._builder.abortListBuild();
+    let URIsToRemove = await this._builder.initListBuild();
+    if (URIsToRemove.length) {
+      // Prior to building, delete removed items from history.
+      this._clearHistory(URIsToRemove);
+    }
+  }
+
+  _commitBuild() {
+    if (
+      (this._showFrequent || this._showRecent) &&
+      this._hasPendingStatements()
+    ) {
+      return;
+    }
+
+    this._builder.commitListBuild(succeed => {
+      if (!succeed) {
+        this._builder.abortListBuild();
+      }
+    });
+  }
+
+  _buildTasks() {
+    var items = Cc["@mozilla.org/array;1"].createInstance(Ci.nsIMutableArray);
+    this._tasks.forEach(function (task) {
+      if (
+        (this._shuttingDown && !task.close) ||
+        (!this._shuttingDown && !task.open)
+      ) {
+        return;
+      }
+      var item = this._getHandlerAppItem(
+        task.title,
+        task.description,
+        task.args,
+        task.iconIndex,
+        null
+      );
+      items.appendElement(item);
+    }, this);
+
+    if (items.length) {
+      this._builder.addListToBuild(
+        this._builder.JUMPLIST_CATEGORY_TASKS,
+        items
+      );
+    }
+  }
+
+  _buildCustom(title, items) {
+    if (items.length) {
+      this._builder.addListToBuild(
+        this._builder.JUMPLIST_CATEGORY_CUSTOMLIST,
+        items,
+        title
+      );
+    }
+  }
+
+  _buildFrequent() {
+    // Windows supports default frequent and recent lists,
+    // but those depend on internal windows visit tracking
+    // which we don't populate. So we build our own custom
+    // frequent and recent lists using our nav history data.
+
+    var items = Cc["@mozilla.org/array;1"].createInstance(Ci.nsIMutableArray);
+    // track frequent items so that we don't add them to
+    // the recent list.
+    this._frequentHashList = [];
+
+    this._pendingStatements[LIST_TYPE.FREQUENT] = this._getHistoryResults(
+      Ci.nsINavHistoryQueryOptions.SORT_BY_VISITCOUNT_DESCENDING,
+      this._maxItemCount,
+      function (aResult) {
+        if (!aResult) {
+          delete this._pendingStatements[LIST_TYPE.FREQUENT];
+          // The are no more results, build the list.
+          this._buildCustom(_getString("taskbar.frequent.label"), items);
+          this._commitBuild();
+          return;
+        }
+
+        let title = aResult.title || aResult.uri;
+        let faviconPageUri = Services.io.newURI(aResult.uri);
+        let shortcut = this._getHandlerAppItem(
+          title,
+          title,
+          aResult.uri,
+          1,
+          faviconPageUri
+        );
+        items.appendElement(shortcut);
+        this._frequentHashList.push(aResult.uri);
+      },
+      this
+    );
+  }
+
+  _buildRecent() {
+    var items = Cc["@mozilla.org/array;1"].createInstance(Ci.nsIMutableArray);
+    // Frequent items will be skipped, so we select a double amount of
+    // entries and stop fetching results at _maxItemCount.
+    var count = 0;
+
+    this._pendingStatements[LIST_TYPE.RECENT] = this._getHistoryResults(
+      Ci.nsINavHistoryQueryOptions.SORT_BY_DATE_DESCENDING,
+      this._maxItemCount * 2,
+      function (aResult) {
+        if (!aResult) {
+          // The are no more results, build the list.
+          this._buildCustom(_getString("taskbar.recent.label"), items);
+          delete this._pendingStatements[LIST_TYPE.RECENT];
+          this._commitBuild();
+          return;
+        }
+
+        if (count >= this._maxItemCount) {
+          return;
+        }
+
+        // Do not add items to recent that have already been added to frequent.
+        if (
+          this._frequentHashList &&
+          this._frequentHashList.includes(aResult.uri)
+        ) {
+          return;
+        }
+
+        let title = aResult.title || aResult.uri;
+        let faviconPageUri = Services.io.newURI(aResult.uri);
+        let shortcut = this._getHandlerAppItem(
+          title,
+          title,
+          aResult.uri,
+          1,
+          faviconPageUri
+        );
+        items.appendElement(shortcut);
+        count++;
+      },
+      this
+    );
+  }
+
   _deleteActiveJumpList() {
-    this._builder.clearJumpList();
+    if (this._builder instanceof Ci.nsIJumpListBuilder) {
+      this._builder.clearJumpList();
+    } else {
+      this._builder.deleteActiveList();
+    }
   }
 
   /**
@@ -330,12 +553,20 @@ export var WinTaskbarJumpList = {
   _pbBuilder: null,
   _builtPb: false,
   _shuttingDown: false,
+  _useLegacyBackend: true,
 
   /**
    * Startup, shutdown, and update
    */
 
   startup: async function WTBJL_startup() {
+    // We do a one-time startup read of the backend pref here because
+    // we don't want to consider any bugs that occur if the pref is flipped
+    // at runtime. We want the pref flip to only take effect on a restart.
+    this._useLegacyBackend = lazy._prefs.getBoolPref(
+      PREF_TASKBAR_LEGACY_BACKEND
+    );
+
     // exit if initting the taskbar failed for some reason.
     if (!(await this._initTaskbar())) {
       return;
@@ -368,14 +599,26 @@ export var WinTaskbarJumpList = {
       return;
     }
 
-    this._builder.buildList();
+    if (this._useLegacyBackend) {
+      // we only need to do this once, but we do it here
+      // to avoid main thread io on startup
+      if (!this._builtPb) {
+        this._pbBuilder.buildListLegacy();
+        this._builtPb = true;
+      }
 
-    // We only ever need to do this once because the private browsing window
-    // jumplist only ever shows the static task list, which never changes,
-    // so it doesn't need to be updated over time.
-    if (!this._builtPb) {
-      this._pbBuilder.buildList();
-      this._builtPb = true;
+      // do what we came here to do, update the taskbar jumplist
+      this._builder.buildListLegacy();
+    } else {
+      this._builder.buildList();
+
+      // We only ever need to do this once because the private browsing window
+      // jumplist only ever shows the static task list, which never changes,
+      // so it doesn't need to be updated over time.
+      if (!this._builtPb) {
+        this._pbBuilder.buildList();
+        this._builtPb = true;
+      }
     }
   },
 
@@ -413,17 +656,30 @@ export var WinTaskbarJumpList = {
     let builder;
     let pbBuilder;
 
-    builder = lazy._taskbarService.createJumpListBuilder(false);
-    pbBuilder = lazy._taskbarService.createJumpListBuilder(true);
-    if (!builder || !pbBuilder) {
-      return false;
-    }
-    let [builderAvailable, pbBuilderAvailable] = await Promise.all([
-      builder.isAvailable(),
-      pbBuilder.isAvailable(),
-    ]);
-    if (!builderAvailable || !pbBuilderAvailable) {
-      return false;
+    if (this._useLegacyBackend) {
+      builder = lazy._taskbarService.createLegacyJumpListBuilder(false);
+      pbBuilder = lazy._taskbarService.createLegacyJumpListBuilder(true);
+      if (
+        !builder ||
+        !builder.available ||
+        !pbBuilder ||
+        !pbBuilder.available
+      ) {
+        return false;
+      }
+    } else {
+      builder = lazy._taskbarService.createJumpListBuilder(false);
+      pbBuilder = lazy._taskbarService.createJumpListBuilder(true);
+      if (!builder || !pbBuilder) {
+        return false;
+      }
+      let [builderAvailable, pbBuilderAvailable] = await Promise.all([
+        builder.isAvailable(),
+        pbBuilder.isAvailable(),
+      ]);
+      if (!builderAvailable || !pbBuilderAvailable) {
+        return false;
+      }
     }
 
     this._builder = new Builder(builder);
diff --git a/toolkit/components/nimbus/FeatureManifest.yaml b/toolkit/components/nimbus/FeatureManifest.yaml
index 647ebb7998d51..1ddb2acc74a15 100644
--- a/toolkit/components/nimbus/FeatureManifest.yaml
+++ b/toolkit/components/nimbus/FeatureManifest.yaml
@@ -693,6 +693,18 @@ firefoxBridge:
         Should Firefox Bridge be registered within firefoxBridgeNativeMessaging
         startup idle task for use with native messaging proxy.
 
+windowsJumpList:
+  description: "Controls for the Windows Jump List integration."
+  owner: mconley@mozilla.com
+  hasExposure: false
+  variables:
+    legacyBackend:
+      type: boolean
+      setPref:
+        branch: user
+        pref: browser.taskbar.lists.legacyBackend
+      description: True if users should use the legacy Windows Jump List backend.
+
 abouthomecache:
   description: "The startup about:home cache."
   owner: omc@mozilla.com, mconley@mozilla.com
