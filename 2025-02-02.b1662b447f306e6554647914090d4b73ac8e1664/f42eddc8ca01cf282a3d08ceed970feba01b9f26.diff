diff --git a/widget/windows/nsWindow.cpp b/widget/windows/nsWindow.cpp
index b80c390abc85..09ecd2190652 100644
--- a/widget/windows/nsWindow.cpp
+++ b/widget/windows/nsWindow.cpp
@@ -953,9 +953,6 @@ nsresult nsWindow::Create(nsIWidget* aParent, const LayoutDeviceIntRect& aRect,
       // default prefs on Windows. Bug 1673092 tracks lining this up with
       // that more correctly instead of hard-coding it.
       SetNonClientMargins(LayoutDeviceIntMargin(0, 2, 2, 2));
-      // The skeleton UI already painted over the NC area, so there's no need
-      // to do that again; the effective non-client margins haven't changed.
-      mNeedsNCAreaClear = false;
 
       // Reset the WNDPROC for this window and its whole class, as we had
       // to use our own WNDPROC when creating the the skeleton UI window.
@@ -1594,13 +1591,6 @@ void nsWindow::Show(bool aState) {
     // The first time we decide to actually show the window is when we decide
     // that we've taken over the window from the skeleton UI, and we should
     // no longer treat resizes / moves specially.
-    //
-    // NOTE(emilio): mIsShowingPreXULSkeletonUI feels a bit odd, or at least
-    // misnamed. During regular startup we create the skeleton UI, then the
-    // early blank window consumes it, and at that point we set
-    // mIsShowingPreXULSkeletonUI to false, but in fact, we're still showing
-    // the skeleton UI (because the blank window is, well, blank). We should
-    // consider guarding this with !mIsEarlyBlankWindow...
     mIsShowingPreXULSkeletonUI = false;
     // Concomitantly, this is also when we change the cursor away from the
     // default "wait" cursor.
@@ -2748,8 +2738,6 @@ bool nsWindow::UpdateNonClientMargins(bool aReflowWindow) {
   }
 
   UpdateOpaqueRegionInternal();
-  // We probably shouldn't need to clear the NC-area if we're an opaque window,
-  // but we need to in order to work around bug 642851.
   mNeedsNCAreaClear = true;
 
   if (aReflowWindow) {
@@ -2762,28 +2750,35 @@ bool nsWindow::UpdateNonClientMargins(bool aReflowWindow) {
     return NS_ERROR_INVALID_ARG;
   }
 
-  if (mNonClientMargins == margins) {
-    return NS_OK;
-  }
-
   if (mHideChrome) {
     mFutureMarginsOnceChromeShows = margins;
     mFutureMarginsToUse = true;
     return NS_OK;
   }
-
   mFutureMarginsToUse = false;
 
-  // -1 margins request a reset
-  mCustomNonClient = margins != LayoutDeviceIntMargin(-1, -1, -1, -1);
-  mNonClientMargins = margins;
-
-  // Force a reflow of content based on the new client dimensions.
-  if (mCustomNonClient) {
-    UpdateNonClientMargins();
-  } else {
+  // Request for a reset
+  if (margins.top == -1 && margins.left == -1 && margins.right == -1 &&
+      margins.bottom == -1) {
+    mCustomNonClient = false;
+    mNonClientMargins = margins;
+    // Force a reflow of content based on the new client
+    // dimensions.
     mCustomNonClientMetrics = {};
     ResetLayout();
+    return NS_OK;
+  }
+
+  if (margins.top < -1 || margins.bottom < -1 || margins.left < -1 ||
+      margins.right < -1) {
+    return NS_ERROR_INVALID_ARG;
+  }
+
+  mNonClientMargins = margins;
+  mCustomNonClient = true;
+  if (!UpdateNonClientMargins()) {
+    NS_WARNING("UpdateNonClientMargins failed!");
+    return NS_OK;
   }
 
   return NS_OK;
@@ -5101,8 +5094,7 @@ bool nsWindow::ProcessMessageInternal(UINT msg, WPARAM& wParam, LPARAM& lParam,
        * do seem to always send a WM_NCPAINT message, so let's update on that.
        */
       gfxDWriteFont::UpdateSystemTextVars();
-      if (mCustomNonClient &&
-          mTransparencyMode == TransparencyMode::Transparent) {
+      if (mCustomNonClient) {
         // We rely on dwm for glass / semi-transparent window painting, so we
         // just need to make sure to clear the non-client area next time we get
         // around to doing a main-thread paint.
diff --git a/widget/windows/nsWindowGfx.cpp b/widget/windows/nsWindowGfx.cpp
index 683d5448e18f..e9e5ee63c1f5 100644
--- a/widget/windows/nsWindowGfx.cpp
+++ b/widget/windows/nsWindowGfx.cpp
@@ -157,7 +157,7 @@ bool nsWindow::OnPaint(uint32_t aNestingLevel) {
   KnowsCompositor* knowsCompositor = renderer->AsKnowsCompositor();
   WebRenderLayerManager* layerManager = renderer->AsWebRender();
 
-  const bool didResize = mBounds.Size() != mLastPaintBounds.Size();
+  const bool didResize = !mBounds.IsEqualEdges(mLastPaintBounds);
 
   if (didResize && knowsCompositor && layerManager) {
     // Do an early async composite so that we at least have something on the
