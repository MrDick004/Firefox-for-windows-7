

diff --git a/browser/components/shell/WindowsUserChoice.cpp b/browser/components/shell/WindowsUserChoice.cpp
index d533a1d8b3695..338331e0ee150 100644
--- a/browser/components/shell/WindowsUserChoice.cpp
+++ b/browser/components/shell/WindowsUserChoice.cpp
@@ -442,12 +442,22 @@ nsresult GetMsixProgId(const wchar_t* assoc, UniquePtr<wchar_t[]>& aProgId) {
   // HKEY_CLASSES_ROOT\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\Repository\Packages\[Package Full Name]\App\Capabilities\[FileAssociations | URLAssociations]\[File | URL]
   // clang-format on
 
+  static LONG (*plat_fn)(UINT32*, PWSTR);
+  if (!plat_fn) {
+    if (auto* module = ::GetModuleHandleW(L"Kernel32.dll"); module) {
+      plat_fn = reinterpret_cast<decltype(plat_fn)>(
+          ::GetProcAddress(module, "GetCurrentPackageFullName"));
+    }
+  }
+  if (!plat_fn) {
+    return NS_OK;
+  }
   UINT32 pfnLen = 0;
-  LONG rv = GetCurrentPackageFullName(&pfnLen, nullptr);
+  LONG rv = ((*plat_fn)(&pfnLen, nullptr));
   NS_ENSURE_TRUE(rv != APPMODEL_ERROR_NO_PACKAGE, NS_ERROR_FAILURE);
 
   auto pfn = mozilla::MakeUnique<wchar_t[]>(pfnLen);
-  rv = GetCurrentPackageFullName(&pfnLen, pfn.get());
+  rv = ((*plat_fn)(&pfnLen, pfn.get()));
   NS_ENSURE_TRUE(rv == ERROR_SUCCESS, NS_ERROR_FAILURE);
 
   const wchar_t* assocSuffix;
diff --git a/toolkit/mozapps/defaultagent/SetDefaultBrowser.cpp b/toolkit/mozapps/defaultagent/SetDefaultBrowser.cpp
index c94e1af6893bb..d7fa19427ed2d 100644
--- a/toolkit/mozapps/defaultagent/SetDefaultBrowser.cpp
+++ b/toolkit/mozapps/defaultagent/SetDefaultBrowser.cpp
@@ -764,9 +764,16 @@ function Set-DefaultHandlerRegistry($Association, $Path, $ProgID, $Hash, $RegRen
 nsresult SetDefaultExtensionHandlersUserChoiceImpl(
     const wchar_t* aAumi, const wchar_t* const aSid, const bool aRegRename,
     const nsTArray<nsString>& aFileExtensions) {
+  static LONG (*plat_fn)(UINT32*, PWSTR);
+  if (!plat_fn) {
+    if (auto* module = GetModuleHandle(L"Kernel32.dll"); module) {
+      plat_fn = reinterpret_cast<decltype(plat_fn)>(
+          GetProcAddress(module, "GetCurrentPackageFullName"));
+    }
+  }
   UINT32 pfnLen = 0;
-  bool inMsix =
-      GetCurrentPackageFullName(&pfnLen, nullptr) != APPMODEL_ERROR_NO_PACKAGE;
+  bool inMsix =plat_fn ? 
+      ((*plat_fn)(&pfnLen, nullptr) != APPMODEL_ERROR_NO_PACKAGE) : false;
 
   if (inMsix) {
     return SetDefaultExtensionHandlersUserChoiceImplMsix(
