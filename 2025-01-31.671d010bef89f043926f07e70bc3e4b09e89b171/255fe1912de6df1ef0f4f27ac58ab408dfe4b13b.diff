diff --git a/browser/themes/windows/browser.css b/browser/themes/windows/browser.css
index f49604e537807..09e90a4eb8f67 100644
--- a/browser/themes/windows/browser.css
+++ b/browser/themes/windows/browser.css
@@ -30,6 +30,16 @@
     @media (-moz-windows-mica) {
       &:not([lwtheme]) {
         background-color: transparent;
+
+        /* Accent color in titlebar overrides Mica. */
+        @media not (-moz-windows-accent-color-in-titlebar) {
+          /* Hide the Firefox buttons since Windows draws their own.
+           * FIXME(emilio): Find a way of hiding the native buttons, or make them
+           * taller, this is very hacky. */
+          .titlebar-buttonbox {
+            opacity: 0;
+          }
+        }
       }
     }
 
diff --git a/mozglue/misc/PreXULSkeletonUI.h b/mozglue/misc/PreXULSkeletonUI.h
index 8f0c9b1a65bca..3e91eac21adce 100644
--- a/mozglue/misc/PreXULSkeletonUI.h
+++ b/mozglue/misc/PreXULSkeletonUI.h
@@ -21,8 +21,8 @@ namespace mozilla {
 // to not vary based off of any user settings for the initial toplevel window,
 // so we're safe here for now.
 static const DWORD kPreXULSkeletonUIWindowStyle =
-    WS_OVERLAPPED | WS_CLIPCHILDREN | WS_DLGFRAME | WS_BORDER | WS_THICKFRAME |
-    WS_MAXIMIZEBOX | WS_MINIMIZEBOX | WS_SYSMENU;
+    WS_CLIPCHILDREN | WS_DLGFRAME | WS_BORDER | WS_MAXIMIZEBOX |
+    WS_MINIMIZEBOX | WS_SIZEBOX | WS_SYSMENU;
 static const DWORD kPreXULSkeletonUIWindowStyleEx = WS_EX_WINDOWEDGE;
 
 struct CSSPixelSpan {
diff --git a/widget/windows/nsWindow.cpp b/widget/windows/nsWindow.cpp
index af20679e3271b..e9040c1ed81c1 100644
--- a/widget/windows/nsWindow.cpp
+++ b/widget/windows/nsWindow.cpp
@@ -2671,39 +2671,10 @@ void nsWindow::SetCustomTitlebar(bool aCustomTitlebar) {
 
   mCustomNonClient = aCustomTitlebar;
 
-  const LONG_PTR style = GetWindowLongPtrW(mWnd, GWL_STYLE);
   // Force a reflow of content based on the new client dimensions.
   if (mCustomNonClient) {
-    if (style & WS_SYSMENU) {
-      // Remove the WS_SYSMENU style, so that DWM doesn't draw the caption
-      // buttons. Note that we still need WS_MAXIMIZEBOX at least to
-      // support Snap Layouts / Aero Snap.
-      //
-      // This behavior is not documented: per MSDN, WS_MAXIMIZEBOX simply
-      // requires WS_SYSMENU, and is not valid without it. However, omitting it
-      // doesn't seem to have negative side-effects on any version of Windows
-      // tested (other than losing the default system menu handling, which we
-      // implement ourselves in DisplaySystemMenu()).
-      //
-      // Since the system menu is lazily initialized (see [1]), we have to call
-      // GetSystemMenu() here in order to get it created before it is too late.
-      // An alternative would be to play with window styles later to force it
-      // to be created, but that seems a bit more finicky.
-      //
-      // [1]: https://devblogs.microsoft.com/oldnewthing/20100528-00/?p=13893
-      ::GetSystemMenu(mWnd, FALSE);
-      ::SetWindowLongPtrW(mWnd, GWL_STYLE, style & ~WS_SYSMENU);
-    }
     UpdateNonClientMargins();
   } else {
-    if (WindowStyle() & WS_SYSMENU) {
-      // Restore the WS_SYSMENU style if appropriate.
-      ::SetWindowLongPtrW(mWnd, GWL_STYLE, style | WS_SYSMENU);
-      // Reset the small icon as a workaround for a dwm bug, see bug 1935542.
-      HICON icon =
-          (HICON)::SendMessageW(mWnd, WM_SETICON, (WPARAM)ICON_SMALL, 0);
-      ::SendMessageW(mWnd, WM_SETICON, (WPARAM)ICON_SMALL, (LPARAM)icon);
-    }
     mCustomNonClientMetrics = {};
     ResetLayout();
   }
@@ -4523,55 +4498,53 @@ void nsWindow::IPCWindowProcHandler(UINT& msg, WPARAM& wParam, LPARAM& lParam) {
 static bool DisplaySystemMenu(HWND hWnd, nsSizeMode sizeMode, bool isRtl,
                               int32_t x, int32_t y) {
   HMENU hMenu = GetSystemMenu(hWnd, FALSE);
-  if (NS_WARN_IF(!hMenu)) {
-    return false;
-  }
-
-  MENUITEMINFO mii;
-  mii.cbSize = sizeof(MENUITEMINFO);
-  mii.fMask = MIIM_STATE;
-  mii.fType = 0;
-
-  // update the options
-  mii.fState = MF_ENABLED;
-  SetMenuItemInfo(hMenu, SC_RESTORE, FALSE, &mii);
-  SetMenuItemInfo(hMenu, SC_SIZE, FALSE, &mii);
-  SetMenuItemInfo(hMenu, SC_MOVE, FALSE, &mii);
-  SetMenuItemInfo(hMenu, SC_MAXIMIZE, FALSE, &mii);
-  SetMenuItemInfo(hMenu, SC_MINIMIZE, FALSE, &mii);
-
-  mii.fState = MF_GRAYED;
-  switch (sizeMode) {
-    case nsSizeMode_Fullscreen:
-      // intentional fall through
-    case nsSizeMode_Maximized:
-      SetMenuItemInfo(hMenu, SC_SIZE, FALSE, &mii);
-      SetMenuItemInfo(hMenu, SC_MOVE, FALSE, &mii);
-      SetMenuItemInfo(hMenu, SC_MAXIMIZE, FALSE, &mii);
-      break;
-    case nsSizeMode_Minimized:
-      SetMenuItemInfo(hMenu, SC_MINIMIZE, FALSE, &mii);
-      break;
-    case nsSizeMode_Normal:
-      SetMenuItemInfo(hMenu, SC_RESTORE, FALSE, &mii);
-      break;
-    case nsSizeMode_Invalid:
-      NS_ASSERTION(false, "Did the argument come from invalid IPC?");
-      break;
-    default:
-      MOZ_ASSERT_UNREACHABLE("Unhnalded nsSizeMode value detected");
-      break;
-  }
-  LPARAM cmd = TrackPopupMenu(hMenu,
-                              TPM_LEFTBUTTON | TPM_RIGHTBUTTON | TPM_RETURNCMD |
-                                  TPM_TOPALIGN |
-                                  (isRtl ? TPM_RIGHTALIGN : TPM_LEFTALIGN),
-                              x, y, 0, hWnd, nullptr);
-  if (!cmd) {
-    return false;
+  if (hMenu) {
+    MENUITEMINFO mii;
+    mii.cbSize = sizeof(MENUITEMINFO);
+    mii.fMask = MIIM_STATE;
+    mii.fType = 0;
+
+    // update the options
+    mii.fState = MF_ENABLED;
+    SetMenuItemInfo(hMenu, SC_RESTORE, FALSE, &mii);
+    SetMenuItemInfo(hMenu, SC_SIZE, FALSE, &mii);
+    SetMenuItemInfo(hMenu, SC_MOVE, FALSE, &mii);
+    SetMenuItemInfo(hMenu, SC_MAXIMIZE, FALSE, &mii);
+    SetMenuItemInfo(hMenu, SC_MINIMIZE, FALSE, &mii);
+
+    mii.fState = MF_GRAYED;
+    switch (sizeMode) {
+      case nsSizeMode_Fullscreen:
+        // intentional fall through
+      case nsSizeMode_Maximized:
+        SetMenuItemInfo(hMenu, SC_SIZE, FALSE, &mii);
+        SetMenuItemInfo(hMenu, SC_MOVE, FALSE, &mii);
+        SetMenuItemInfo(hMenu, SC_MAXIMIZE, FALSE, &mii);
+        break;
+      case nsSizeMode_Minimized:
+        SetMenuItemInfo(hMenu, SC_MINIMIZE, FALSE, &mii);
+        break;
+      case nsSizeMode_Normal:
+        SetMenuItemInfo(hMenu, SC_RESTORE, FALSE, &mii);
+        break;
+      case nsSizeMode_Invalid:
+        NS_ASSERTION(false, "Did the argument come from invalid IPC?");
+        break;
+      default:
+        MOZ_ASSERT_UNREACHABLE("Unhnalded nsSizeMode value detected");
+        break;
+    }
+    LPARAM cmd = TrackPopupMenu(
+        hMenu,
+        (TPM_LEFTBUTTON | TPM_RIGHTBUTTON | TPM_RETURNCMD | TPM_TOPALIGN |
+         (isRtl ? TPM_RIGHTALIGN : TPM_LEFTALIGN)),
+        x, y, 0, hWnd, nullptr);
+    if (cmd) {
+      PostMessage(hWnd, WM_SYSCOMMAND, cmd, 0);
+      return true;
+    }
   }
-  PostMessage(hWnd, WM_SYSCOMMAND, cmd, 0);
-  return true;
+  return false;
 }
 
 // The WndProc procedure for all nsWindows in this toolkit. This merely catches
@@ -5727,20 +5700,13 @@ bool nsWindow::ProcessMessageInternal(UINT msg, WPARAM& wParam, LPARAM& lParam,
         result = true;
       }
 
-      if (filteredWParam == SC_KEYMENU && lParam == VK_SPACE) {
-        const auto sizeMode = mFrameState->GetSizeMode();
-        // Handle the system menu manually when we're in full screen mode or
-        // with custom titlebar so we can set the appropriate options.
-        if (sizeMode == nsSizeMode_Fullscreen || mCustomNonClient) {
-          // Historically on fullscreen windows we've used this offset from the
-          // top left as our context menu position. Note that if the point we
-          // supply is offscreen, Windows will still try to put our menu in the
-          // right place.
-          constexpr LayoutDeviceIntPoint offset(20, 20);
-          auto pos = GetScreenBounds().TopLeft() + offset;
-          DisplaySystemMenu(mWnd, sizeMode, mIsRTL, pos.x, pos.y);
-          result = true;
-        }
+      // Handle the system menu manually when we're in full screen mode
+      // so we can set the appropriate options.
+      if (filteredWParam == SC_KEYMENU && lParam == VK_SPACE &&
+          mFrameState->GetSizeMode() == nsSizeMode_Fullscreen) {
+        DisplaySystemMenu(mWnd, mFrameState->GetSizeMode(), mIsRTL,
+                          MOZ_SYSCONTEXT_X_POS, MOZ_SYSCONTEXT_Y_POS);
+        result = true;
       }
     } break;
 
diff --git a/widget/windows/nsWindowDefs.h b/widget/windows/nsWindowDefs.h
index 57bc3005a45b5..320d6ef07b078 100644
--- a/widget/windows/nsWindowDefs.h
+++ b/widget/windows/nsWindowDefs.h
@@ -24,6 +24,10 @@
 // ConstrainPosition window positioning slop value
 #define kWindowPositionSlop 20
 
+// Origin of the system context menu when displayed in full screen mode
+#define MOZ_SYSCONTEXT_X_POS 20
+#define MOZ_SYSCONTEXT_Y_POS 20
+
 // Don't put more than this many rects in the dirty region, just fluff
 // out to the bounding-box if there are more
 #define MAX_RECTS_IN_REGION 100
