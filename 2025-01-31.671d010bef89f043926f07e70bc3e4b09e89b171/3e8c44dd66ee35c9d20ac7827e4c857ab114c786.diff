diff --git a/browser/components/BrowserContentHandler.sys.mjs b/browser/components/BrowserContentHandler.sys.mjs
index 994cb7a654b5..2af68eca1060 100644
--- a/browser/components/BrowserContentHandler.sys.mjs
+++ b/browser/components/BrowserContentHandler.sys.mjs
@@ -584,7 +584,7 @@ nsBrowserContentHandler.prototype = {
       // is an implementation of an interface method and changing it to be async would be complicated
       // and ultimately nothing here needs the result of setDefaultBrowser, so we do not bother doing
       // an await.
-      lazy.ShellService.setDefaultBrowser(true).catch(e => {
+      lazy.ShellService.setDefaultBrowser(true, true).catch(e => {
         console.error("setDefaultBrowser failed:", e);
       });
     }
@@ -923,6 +923,20 @@ nsBrowserContentHandler.prototype = {
       ) {
         throw Components.Exception("", Cr.NS_ERROR_ABORT);
       }
+      var isDefault = false;
+      try {
+        var url =
+          Services.urlFormatter.formatURLPref("app.support.baseURL") +
+          "win10-default-browser";
+        if (urlParam == url) {
+          isDefault = lazy.ShellService.isDefaultBrowser(false, false);
+        }
+      } catch (ex) {}
+      if (isDefault) {
+        // Firefox is already the default HTTP handler.
+        // We don't have to show the instruction page.
+        throw Components.Exception("", Cr.NS_ERROR_ABORT);
+      }
     }
   },
 };
diff --git a/browser/components/preferences/main.js b/browser/components/preferences/main.js
index 183f2e8e92dc..609b9a9d0617 100644
--- a/browser/components/preferences/main.js
+++ b/browser/components/preferences/main.js
@@ -1724,7 +1724,7 @@ var gMainPane = {
       setDefaultButton.disabled = true;
 
       try {
-        await shellSvc.setDefaultBrowser(false);
+        await shellSvc.setDefaultBrowser(true, false);
       } catch (ex) {
         console.error(ex);
         return;
diff --git a/browser/components/shell/ShellService.sys.mjs b/browser/components/shell/ShellService.sys.mjs
index 6503faf0055c..b7da2a098410 100644
--- a/browser/components/shell/ShellService.sys.mjs
+++ b/browser/components/shell/ShellService.sys.mjs
@@ -339,7 +339,7 @@ let ShellServiceInternal = {
   },
 
   // override nsIShellService.setDefaultBrowser() on the ShellService proxy.
-  async setDefaultBrowser(forAllUsers) {
+  async setDefaultBrowser(claimAllTypes, forAllUsers) {
     // On Windows 10, our best chance is to set UserChoice, so try that first.
     if (
       AppConstants.isPlatformAndVersionAtLeast("win", "10") &&
@@ -353,14 +353,25 @@ let ShellServiceInternal = {
       }
     }
 
-    this.shellService.setDefaultBrowser(forAllUsers);
+    this.shellService.setDefaultBrowser(claimAllTypes, forAllUsers);
     this._maybeShowSetDefaultGuidanceNotification();
   },
 
   async setAsDefault() {
+    let claimAllTypes = true;
     let setAsDefaultError = false;
+    if (AppConstants.platform == "win") {
+      try {
+        // In Windows 8+, the UI for selecting default protocol is much
+        // nicer than the UI for setting file type associations. So we
+        // only show the protocol association screen on Windows 8+.
+        // Windows 8 is version 6.2.
+        let version = Services.sysinfo.getProperty("version");
+        claimAllTypes = parseFloat(version) < 6.2;
+      } catch (ex) {}
+    }
     try {
-      await ShellService.setDefaultBrowser(false);
+      await ShellService.setDefaultBrowser(claimAllTypes, false);
     } catch (ex) {
       setAsDefaultError = true;
       console.error(ex);
diff --git a/browser/components/shell/nsGNOMEShellService.cpp b/browser/components/shell/nsGNOMEShellService.cpp
index 987e8ae78bbd..a07d37d1093d 100644
--- a/browser/components/shell/nsGNOMEShellService.cpp
+++ b/browser/components/shell/nsGNOMEShellService.cpp
@@ -253,7 +253,7 @@ nsGNOMEShellService::IsDefaultForScheme(const nsACString& aScheme,
 }
 
 NS_IMETHODIMP
-nsGNOMEShellService::SetDefaultBrowser(bool aForAllUsers) {
+nsGNOMEShellService::SetDefaultBrowser(bool aClaimAllTypes, bool aForAllUsers) {
 #ifdef DEBUG
   if (aForAllUsers)
     NS_WARNING(
@@ -299,18 +299,22 @@ nsGNOMEShellService::SetDefaultBrowser(bool aForAllUsers) {
 
     // set handler for the protocols
     for (unsigned int i = 0; i < std::size(appProtocols); ++i) {
-      appInfo->SetAsDefaultForURIScheme(
-          nsDependentCString(appProtocols[i].name));
+      if (appProtocols[i].essential || aClaimAllTypes) {
+        appInfo->SetAsDefaultForURIScheme(
+            nsDependentCString(appProtocols[i].name));
+      }
     }
 
     // set handler for .html and xhtml files and MIME types:
-    // Add mime types for html, xhtml extension and set app to just created
-    // appinfo.
-    for (unsigned int i = 0; i < std::size(appTypes); ++i) {
-      appInfo->SetAsDefaultForMimeType(
-          nsDependentCString(appTypes[i].mimeType));
-      appInfo->SetAsDefaultForFileExtensions(
-          nsDependentCString(appTypes[i].extensions));
+    if (aClaimAllTypes) {
+      // Add mime types for html, xhtml extension and set app to just created
+      // appinfo.
+      for (unsigned int i = 0; i < std::size(appTypes); ++i) {
+        appInfo->SetAsDefaultForMimeType(
+            nsDependentCString(appTypes[i].mimeType));
+        appInfo->SetAsDefaultForFileExtensions(
+            nsDependentCString(appTypes[i].extensions));
+      }
     }
   }
 
diff --git a/browser/components/shell/nsIShellService.idl b/browser/components/shell/nsIShellService.idl
index c52db439b842..4eae32c03e6a 100644
--- a/browser/components/shell/nsIShellService.idl
+++ b/browser/components/shell/nsIShellService.idl
@@ -26,11 +26,14 @@ interface nsIShellService : nsISupports
   /**
    * Registers Firefox as the "Default Browser."
    *
+   * @param aClaimAllTypes Register Firefox as the handler for
+   *                       additional protocols (chrome etc)
+   *                       and web documents (.html, .xhtml etc).
    * @param aForAllUsers   Whether or not Firefox should attempt
    *                       to become the default browser for all
    *                       users on a multi-user system.
    */
-  void setDefaultBrowser(in boolean aForAllUsers);
+  void setDefaultBrowser(in boolean aClaimAllTypes, in boolean aForAllUsers);
 
   /**
    * Flags for positioning/sizing of the Desktop Background image.
diff --git a/browser/components/shell/nsMacShellService.cpp b/browser/components/shell/nsMacShellService.cpp
index d0e275acaf5a..2482032e4259 100644
--- a/browser/components/shell/nsMacShellService.cpp
+++ b/browser/components/shell/nsMacShellService.cpp
@@ -68,7 +68,7 @@ nsMacShellService::IsDefaultBrowser(bool aForAllTypes,
 }
 
 NS_IMETHODIMP
-nsMacShellService::SetDefaultBrowser(bool aForAllUsers) {
+nsMacShellService::SetDefaultBrowser(bool aClaimAllTypes, bool aForAllUsers) {
   // Note: We don't support aForAllUsers on Mac OS X.
 
   CFStringRef firefoxID = ::CFBundleGetIdentifier(::CFBundleGetMainBundle());
@@ -83,9 +83,11 @@ nsMacShellService::SetDefaultBrowser(bool aForAllUsers) {
     return NS_ERROR_FAILURE;
   }
 
-  if (::LSSetDefaultRoleHandlerForContentType(kUTTypeHTML, kLSRolesAll,
-                                              firefoxID) != noErr) {
-    return NS_ERROR_FAILURE;
+  if (aClaimAllTypes) {
+    if (::LSSetDefaultRoleHandlerForContentType(kUTTypeHTML, kLSRolesAll,
+                                                firefoxID) != noErr) {
+      return NS_ERROR_FAILURE;
+    }
   }
 
   nsCOMPtr<nsIPrefBranch> prefs(do_GetService(NS_PREFSERVICE_CONTRACTID));
diff --git a/browser/components/shell/nsWindowsShellService.cpp b/browser/components/shell/nsWindowsShellService.cpp
index ec082c637621..07dfa3280e51 100644
--- a/browser/components/shell/nsWindowsShellService.cpp
+++ b/browser/components/shell/nsWindowsShellService.cpp
@@ -25,6 +25,7 @@
 #include "nsServiceManagerUtils.h"
 #include "nsShellService.h"
 #include "nsUnicharUtils.h"
+#include "nsIURLFormatter.h"
 #include "nsWindowsHelpers.h"
 #include "nsXULAppAPI.h"
 #include "Windows11TaskbarPinning.h"
@@ -293,6 +294,10 @@ nsresult nsWindowsShellService::LaunchControlPanelDefaultsSelectionUI() {
   return SUCCEEDED(hr) ? NS_OK : NS_ERROR_FAILURE;
 }
 
+nsresult nsWindowsShellService::LaunchControlPanelDefaultPrograms() {
+  return ::LaunchControlPanelDefaultPrograms() ? NS_OK : NS_ERROR_FAILURE;
+}
+
 NS_IMETHODIMP
 nsWindowsShellService::CheckAllProgIDsExist(bool* aResult) {
   *aResult = false;
@@ -331,8 +336,36 @@ nsresult nsWindowsShellService::LaunchModernSettingsDialogDefaultApps() {
   return ::LaunchModernSettingsDialogDefaultApps() ? NS_OK : NS_ERROR_FAILURE;
 }
 
+nsresult nsWindowsShellService::InvokeHTTPOpenAsVerb() {
+  nsCOMPtr<nsIURLFormatter> formatter(
+      do_GetService("@mozilla.org/toolkit/URLFormatterService;1"));
+  if (!formatter) {
+    return NS_ERROR_UNEXPECTED;
+  }
+
+  nsString urlStr;
+  nsresult rv = formatter->FormatURLPref(u"app.support.baseURL"_ns, urlStr);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  if (!StringBeginsWith(urlStr, u"https://"_ns)) {
+    return NS_ERROR_FAILURE;
+  }
+  urlStr.AppendLiteral("win10-default-browser");
+
+  SHELLEXECUTEINFOW seinfo = {sizeof(SHELLEXECUTEINFOW)};
+  seinfo.lpVerb = L"openas";
+  seinfo.lpFile = urlStr.get();
+  seinfo.nShow = SW_SHOWNORMAL;
+  if (!ShellExecuteExW(&seinfo)) {
+    return NS_ERROR_FAILURE;
+  }
+  return NS_OK;
+}
+
 NS_IMETHODIMP
-nsWindowsShellService::SetDefaultBrowser(bool aForAllUsers) {
+nsWindowsShellService::SetDefaultBrowser(bool aClaimAllTypes,
+                                         bool aForAllUsers) {
   // If running from within a package, don't attempt to set default with
   // the helper, as it will not work and will only confuse our package's
   // virtualized registry.
@@ -351,11 +384,20 @@ nsWindowsShellService::SetDefaultBrowser(bool aForAllUsers) {
   }
 
   if (NS_SUCCEEDED(rv)) {
-    rv = LaunchModernSettingsDialogDefaultApps();
-    // The above call should never really fail, but just in case
-    // fall back to showing control panel for all defaults
-    if (NS_FAILED(rv)) {
-      rv = LaunchControlPanelDefaultsSelectionUI();
+    if (aClaimAllTypes) {
+      rv = LaunchModernSettingsDialogDefaultApps();
+      // The above call should never really fail, but just in case
+      // fall back to showing the HTTP association screen only.
+      if (NS_FAILED(rv)) {
+        rv = InvokeHTTPOpenAsVerb();
+      }
+    } else {
+      rv = LaunchModernSettingsDialogDefaultApps();
+      // The above call should never really fail, but just in case
+      // fall back to showing control panel for all defaults
+      if (NS_FAILED(rv)) {
+        rv = LaunchControlPanelDefaultsSelectionUI();
+      }
     }
   }
 
diff --git a/browser/components/shell/nsWindowsShellService.h b/browser/components/shell/nsWindowsShellService.h
index 8d7ebee66b5a..11ee905e482a 100644
--- a/browser/components/shell/nsWindowsShellService.h
+++ b/browser/components/shell/nsWindowsShellService.h
@@ -29,7 +29,9 @@ class nsWindowsShellService : public nsIShellService,
 
  protected:
   nsresult LaunchControlPanelDefaultsSelectionUI();
+  nsresult LaunchControlPanelDefaultPrograms();
   nsresult LaunchModernSettingsDialogDefaultApps();
+  nsresult InvokeHTTPOpenAsVerb();
 };
 
 #endif  // nswindowsshellservice_h____
diff --git a/browser/components/shell/test/browser_633221.js b/browser/components/shell/test/browser_633221.js
index dbc66e286482..0bea31728a4f 100644
--- a/browser/components/shell/test/browser_633221.js
+++ b/browser/components/shell/test/browser_633221.js
@@ -1,5 +1,5 @@
 function test() {
-  ShellService.setDefaultBrowser(false);
+  ShellService.setDefaultBrowser(true, false);
   ok(
     ShellService.isDefaultBrowser(true, false),
     "we got here and are the default browser"
diff --git a/browser/components/uitour/UITour.sys.mjs b/browser/components/uitour/UITour.sys.mjs
index 9d039c280eb5..89ac56046c52 100644
--- a/browser/components/uitour/UITour.sys.mjs
+++ b/browser/components/uitour/UITour.sys.mjs
@@ -1662,7 +1662,7 @@ export var UITour = {
         try {
           let shell = aWindow.getShellService();
           if (shell) {
-            await shell.setDefaultBrowser(false);
+            await shell.setDefaultBrowser(true, false);
           }
         } catch (e) {}
         break;
