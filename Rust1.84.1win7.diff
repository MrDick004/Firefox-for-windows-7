diff --git a/library/std/src/sys/pal/windows/c.rs b/library/std/src/sys/pal/windows/c.rs
index 9ce3e912caf..871fc4a0bee 100644
--- a/library/std/src/sys/pal/windows/c.rs
+++ b/library/std/src/sys/pal/windows/c.rs
@@ -19,9 +19,7 @@
 pub const EXIT_SUCCESS: u32 = 0;
 pub const EXIT_FAILURE: u32 = 1;
 
-#[cfg(target_vendor = "win7")]
 pub const CONDITION_VARIABLE_INIT: CONDITION_VARIABLE = CONDITION_VARIABLE { Ptr: ptr::null_mut() };
-#[cfg(target_vendor = "win7")]
 pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { Ptr: ptr::null_mut() };
 #[cfg(not(target_thread_local))]
 pub const INIT_ONCE_STATIC_INIT: INIT_ONCE = INIT_ONCE { Ptr: ptr::null_mut() };
@@ -109,16 +107,6 @@ pub struct MOUNT_POINT_REPARSE_BUFFER {
 }
 
 // Use raw-dylib to import ProcessPrng as we can't rely on there being an import library.
-#[cfg(not(target_vendor = "win7"))]
-#[cfg_attr(
-    target_arch = "x86",
-    link(name = "bcryptprimitives", kind = "raw-dylib", import_name_type = "undecorated")
-)]
-#[cfg_attr(not(target_arch = "x86"), link(name = "bcryptprimitives", kind = "raw-dylib"))]
-extern "system" {
-    pub fn ProcessPrng(pbdata: *mut u8, cbdata: usize) -> BOOL;
-}
-
 // Functions that aren't available on every version of Windows that we support,
 // but we still use them and just provide some form of a fallback implementation.
 compat_fn_with_fallback! {
@@ -138,7 +126,6 @@ pub fn GetThreadDescription(hthread: HANDLE, lpthreaddescription: *mut PWSTR) ->
 
     // >= Win8 / Server 2012
     // https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime
-    #[cfg(target_vendor = "win7")]
     pub fn GetSystemTimePreciseAsFileTime(lpsystemtimeasfiletime: *mut FILETIME) -> () {
         unsafe { GetSystemTimeAsFileTime(lpsystemtimeasfiletime) }
     }
@@ -150,33 +137,7 @@ pub fn GetTempPath2W(bufferlength: u32, buffer: PWSTR) -> u32 {
     }
 }
 
-#[cfg(not(target_vendor = "win7"))]
-// Use raw-dylib to import synchronization functions to workaround issues with the older mingw import library.
-#[cfg_attr(
-    target_arch = "x86",
-    link(
-        name = "api-ms-win-core-synch-l1-2-0",
-        kind = "raw-dylib",
-        import_name_type = "undecorated"
-    )
-)]
-#[cfg_attr(
-    not(target_arch = "x86"),
-    link(name = "api-ms-win-core-synch-l1-2-0", kind = "raw-dylib")
-)]
-extern "system" {
-    pub fn WaitOnAddress(
-        address: *const c_void,
-        compareaddress: *const c_void,
-        addresssize: usize,
-        dwmilliseconds: u32,
-    ) -> BOOL;
-    pub fn WakeByAddressSingle(address: *const c_void);
-    pub fn WakeByAddressAll(address: *const c_void);
-}
-
 // These are loaded by `load_synch_functions`.
-#[cfg(target_vendor = "win7")]
 compat_fn_optional! {
     pub fn WaitOnAddress(
         address: *const c_void,
@@ -187,11 +148,9 @@ pub fn WaitOnAddress(
     pub fn WakeByAddressSingle(address: *const c_void);
 }
 
-#[cfg(any(target_vendor = "win7", target_vendor = "uwp"))]
 compat_fn_with_fallback! {
     pub static NTDLL: &CStr = c"ntdll";
 
-    #[cfg(target_vendor = "win7")]
     pub fn NtCreateKeyedEvent(
         KeyedEventHandle: *mut HANDLE,
         DesiredAccess: u32,
@@ -200,7 +159,6 @@ pub fn NtCreateKeyedEvent(
     ) -> NTSTATUS {
         panic!("keyed events not available")
     }
-    #[cfg(target_vendor = "win7")]
     pub fn NtReleaseKeyedEvent(
         EventHandle: HANDLE,
         Key: *const c_void,
@@ -209,7 +167,6 @@ pub fn NtReleaseKeyedEvent(
     ) -> NTSTATUS {
         panic!("keyed events not available")
     }
-    #[cfg(target_vendor = "win7")]
     pub fn NtWaitForKeyedEvent(
         EventHandle: HANDLE,
         Key: *const c_void,
diff --git a/library/std/src/sys/pal/windows/compat.rs b/library/std/src/sys/pal/windows/compat.rs
index 42999da1664..68817f76015 100644
--- a/library/std/src/sys/pal/windows/compat.rs
+++ b/library/std/src/sys/pal/windows/compat.rs
@@ -37,7 +37,6 @@
 // file an issue for discussion; currently we don't guarantee any functionality
 // before main.
 // See https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-initialization?view=msvc-170
-#[cfg(target_vendor = "win7")]
 #[used]
 #[link_section = ".CRT$XCT"]
 static INIT_TABLE_ENTRY: unsafe extern "C" fn() = init;
@@ -52,7 +51,6 @@
 /// negative performance impact in practical situations.
 ///
 /// Currently we only preload `WaitOnAddress` and `WakeByAddressSingle`.
-#[cfg(target_vendor = "win7")]
 unsafe extern "C" fn init() {
     // In an exe this code is executed before main() so is single threaded.
     // In a DLL the system's loader lock will be held thereby synchronizing
@@ -199,7 +197,6 @@ pub unsafe fn call($($argname: $argtype),*) -> $rettype {
 /// Optionally loaded functions.
 ///
 /// Relies on the functions being pre-loaded elsewhere.
-#[cfg(target_vendor = "win7")]
 macro_rules! compat_fn_optional {
     ($(
         $(#[$meta:meta])*
@@ -232,7 +229,6 @@ pub fn option() -> Option<F> {
 }
 
 /// Load all needed functions from "api-ms-win-core-synch-l1-2-0".
-#[cfg(target_vendor = "win7")]
 pub(super) fn load_synch_functions() {
     fn try_load() -> Option<()> {
         use crate::sync::atomic::Ordering;
diff --git a/library/std/src/sys/pal/windows/mod.rs b/library/std/src/sys/pal/windows/mod.rs
index aca69490d7a..def7c39725f 100644
--- a/library/std/src/sys/pal/windows/mod.rs
+++ b/library/std/src/sys/pal/windows/mod.rs
@@ -18,8 +18,6 @@
 pub mod c;
 pub mod env;
 pub mod fs;
-#[cfg(not(target_vendor = "win7"))]
-pub mod futex;
 pub mod handle;
 pub mod io;
 pub mod net;
diff --git a/library/std/src/sys/pal/windows/os.rs b/library/std/src/sys/pal/windows/os.rs
index 5242bc9da31..8e2969d1df5 100644
--- a/library/std/src/sys/pal/windows/os.rs
+++ b/library/std/src/sys/pal/windows/os.rs
@@ -320,33 +320,6 @@ pub fn temp_dir() -> PathBuf {
     super::fill_utf16_buf(|buf, sz| unsafe { c::GetTempPath2W(sz, buf) }, super::os2path).unwrap()
 }
 
-#[cfg(all(not(target_vendor = "uwp"), not(target_vendor = "win7")))]
-fn home_dir_crt() -> Option<PathBuf> {
-    unsafe {
-        // Defined in processthreadsapi.h.
-        const CURRENT_PROCESS_TOKEN: usize = -4_isize as usize;
-
-        super::fill_utf16_buf(
-            |buf, mut sz| {
-                // GetUserProfileDirectoryW does not quite use the usual protocol for
-                // negotiating the buffer size, so we have to translate.
-                match c::GetUserProfileDirectoryW(
-                    ptr::without_provenance_mut(CURRENT_PROCESS_TOKEN),
-                    buf,
-                    &mut sz,
-                ) {
-                    0 if api::get_last_error() != WinError::INSUFFICIENT_BUFFER => 0,
-                    0 => sz,
-                    _ => sz - 1, // sz includes the null terminator
-                }
-            },
-            super::os2path,
-        )
-        .ok()
-    }
-}
-
-#[cfg(target_vendor = "win7")]
 fn home_dir_crt() -> Option<PathBuf> {
     unsafe {
         use crate::sys::handle::Handle;
diff --git a/library/std/src/sys/random/windows.rs b/library/std/src/sys/random/windows.rs
index 7566000f9e6..42092e45acd 100644
--- a/library/std/src/sys/random/windows.rs
+++ b/library/std/src/sys/random/windows.rs
@@ -1,15 +1,5 @@
 use crate::sys::c;
 
-#[cfg(not(target_vendor = "win7"))]
-#[inline]
-pub fn fill_bytes(bytes: &mut [u8]) {
-    let ret = unsafe { c::ProcessPrng(bytes.as_mut_ptr(), bytes.len()) };
-    // ProcessPrng is documented as always returning `TRUE`.
-    // https://learn.microsoft.com/en-us/windows/win32/seccng/processprng#return-value
-    debug_assert_eq!(ret, c::TRUE);
-}
-
-#[cfg(target_vendor = "win7")]
 pub fn fill_bytes(mut bytes: &mut [u8]) {
     while !bytes.is_empty() {
         let len = bytes.len().try_into().unwrap_or(u32::MAX);
diff --git a/library/std/src/sys/sync/condvar/mod.rs b/library/std/src/sys/sync/condvar/mod.rs
index d0c998a5597..b3ae156b081 100644
--- a/library/std/src/sys/sync/condvar/mod.rs
+++ b/library/std/src/sys/sync/condvar/mod.rs
@@ -1,6 +1,5 @@
 cfg_if::cfg_if! {
     if #[cfg(any(
-        all(target_os = "windows", not(target_vendor="win7")),
         target_os = "linux",
         target_os = "android",
         target_os = "freebsd",
@@ -18,7 +17,7 @@
     ))] {
         mod pthread;
         pub use pthread::Condvar;
-    } else if #[cfg(all(target_os = "windows", target_vendor = "win7"))] {
+    } else if #[cfg(target_os = "windows")] {
         mod windows7;
         pub use windows7::Condvar;
     } else if #[cfg(all(target_vendor = "fortanix", target_env = "sgx"))] {
diff --git a/library/std/src/sys/sync/mutex/mod.rs b/library/std/src/sys/sync/mutex/mod.rs
index 360df3fc4b5..37d98139372 100644
--- a/library/std/src/sys/sync/mutex/mod.rs
+++ b/library/std/src/sys/sync/mutex/mod.rs
@@ -1,6 +1,5 @@
 cfg_if::cfg_if! {
     if #[cfg(any(
-        all(target_os = "windows", not(target_vendor = "win7")),
         target_os = "linux",
         target_os = "android",
         target_os = "freebsd",
@@ -20,7 +19,7 @@
     ))] {
         mod pthread;
         pub use pthread::Mutex;
-    } else if #[cfg(all(target_os = "windows", target_vendor = "win7"))] {
+    } else if #[cfg(target_os = "windows")] {
         mod windows7;
         pub use windows7::{Mutex, raw};
     } else if #[cfg(all(target_vendor = "fortanix", target_env = "sgx"))] {
diff --git a/library/std/src/sys/sync/once/mod.rs b/library/std/src/sys/sync/once/mod.rs
index 0e38937b121..61b29713fa1 100644
--- a/library/std/src/sys/sync/once/mod.rs
+++ b/library/std/src/sys/sync/once/mod.rs
@@ -9,7 +9,6 @@
 
 cfg_if::cfg_if! {
     if #[cfg(any(
-        all(target_os = "windows", not(target_vendor="win7")),
         target_os = "linux",
         target_os = "android",
         all(target_arch = "wasm32", target_feature = "atomics"),
diff --git a/library/std/src/sys/sync/rwlock/mod.rs b/library/std/src/sys/sync/rwlock/mod.rs
index 70ba6bf38ef..72ab72995eb 100644
--- a/library/std/src/sys/sync/rwlock/mod.rs
+++ b/library/std/src/sys/sync/rwlock/mod.rs
@@ -1,6 +1,5 @@
 cfg_if::cfg_if! {
     if #[cfg(any(
-        all(target_os = "windows", not(target_vendor = "win7")),
         target_os = "linux",
         target_os = "android",
         target_os = "freebsd",
@@ -14,7 +13,7 @@
         pub use futex::RwLock;
     } else if #[cfg(any(
         target_family = "unix",
-        all(target_os = "windows", target_vendor = "win7"),
+        target_os = "windows",
         all(target_vendor = "fortanix", target_env = "sgx"),
         target_os = "xous",
     ))] {
diff --git a/library/std/src/sys/sync/thread_parking/mod.rs b/library/std/src/sys/sync/thread_parking/mod.rs
index f4d8fa0a58c..95dfcf5fa30 100644
--- a/library/std/src/sys/sync/thread_parking/mod.rs
+++ b/library/std/src/sys/sync/thread_parking/mod.rs
@@ -1,6 +1,5 @@
 cfg_if::cfg_if! {
     if #[cfg(any(
-        all(target_os = "windows", not(target_vendor = "win7")),
         target_os = "linux",
         target_os = "android",
         all(target_arch = "wasm32", target_feature = "atomics"),
@@ -19,7 +18,7 @@
     ))] {
         mod id;
         pub use id::Parker;
-    } else if #[cfg(target_vendor = "win7")] {
+    } else if #[cfg(target_os = "windows")] {
         mod windows7;
         pub use windows7::Parker;
     } else if #[cfg(all(target_vendor = "apple", not(miri)))] {
diff --git a/library/std/src/sys/sync/thread_parking/windows7.rs b/library/std/src/sys/sync/thread_parking/windows7.rs
index f7585e882f0..085b45c492e 100644
--- a/library/std/src/sys/sync/thread_parking/windows7.rs
+++ b/library/std/src/sys/sync/thread_parking/windows7.rs
@@ -110,7 +110,6 @@ pub unsafe fn park(self: Pin<&Self>) {
             return;
         }
 
-        #[cfg(target_vendor = "win7")]
         if c::WaitOnAddress::option().is_none() {
             return keyed_events::park(self);
         }
@@ -138,7 +137,6 @@ pub unsafe fn park_timeout(self: Pin<&Self>, timeout: Duration) {
             return;
         }
 
-        #[cfg(target_vendor = "win7")]
         if c::WaitOnAddress::option().is_none() {
             return keyed_events::park_timeout(self, timeout);
         }
@@ -168,7 +166,6 @@ pub fn unpark(self: Pin<&Self>) {
         // with park().
         if self.state.swap(NOTIFIED, Release) == PARKED {
             unsafe {
-                #[cfg(target_vendor = "win7")]
                 if c::WakeByAddressSingle::option().is_none() {
                     return keyed_events::unpark(self);
                 }
@@ -182,7 +179,6 @@ fn ptr(&self) -> *const c_void {
     }
 }
 
-#[cfg(target_vendor = "win7")]
 mod keyed_events {
     use core::pin::Pin;
     use core::ptr;
diff --git a/library/backtrace/src/symbolize/dbghelp.rs b/library/backtrace/src/symbolize/dbghelp.rs
index d4c887d..3ef46f1 100644
--- a/library/backtrace/src/symbolize/dbghelp.rs
+++ b/library/backtrace/src/symbolize/dbghelp.rs
@@ -78,22 +78,6 @@ impl Symbol<'_> {
 #[repr(C, align(8))]
 struct Aligned8<T>(T);
 
-#[cfg(not(target_vendor = "win7"))]
-pub unsafe fn resolve(what: ResolveWhat<'_>, cb: &mut dyn FnMut(&super::Symbol)) {
-    // Ensure this process's symbols are initialized
-    let dbghelp = match dbghelp::init() {
-        Ok(dbghelp) => dbghelp,
-        Err(()) => return, // oh well...
-    };
-    match what {
-        ResolveWhat::Address(_) => resolve_with_inline(&dbghelp, what.address_or_ip(), None, cb),
-        ResolveWhat::Frame(frame) => {
-            resolve_with_inline(&dbghelp, frame.ip(), frame.inner.inline_context(), cb)
-        }
-    };
-}
-
-#[cfg(target_vendor = "win7")]
 pub unsafe fn resolve(what: ResolveWhat<'_>, cb: &mut dyn FnMut(&super::Symbol)) {
     // Ensure this process's symbols are initialized
     let dbghelp = match dbghelp::init() {
@@ -122,7 +106,6 @@ pub unsafe fn resolve(what: ResolveWhat<'_>, cb: &mut dyn FnMut(&super::Symbol))
 ///
 /// This should work all the way down to Windows XP. The inline context is
 /// ignored, since this concept was only introduced in dbghelp 6.2+.
-#[cfg(target_vendor = "win7")]
 unsafe fn resolve_legacy(
     dbghelp: &dbghelp::Init,
     addr: *mut c_void,
