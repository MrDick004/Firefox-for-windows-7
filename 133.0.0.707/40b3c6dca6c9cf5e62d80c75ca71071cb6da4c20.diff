

diff --git a/browser/installer/Makefile.in b/browser/installer/Makefile.in
index 7fa33323b5224..92ed86d87dcdb 100644
--- a/browser/installer/Makefile.in
+++ b/browser/installer/Makefile.in
@@ -76,6 +76,9 @@ DEFINES += -DMSVC_C_RUNTIME_1_DLL=$(MSVC_C_RUNTIME_1_DLL)
 endif
 DEFINES += -DMSVC_CXX_RUNTIME_DLL=$(MSVC_CXX_RUNTIME_DLL)
 endif
+ifdef WIN_UCRT_REDIST_DIR
+DEFINES += -DMOZ_PACKAGE_WIN_UCRT_DLLS=1
+endif
 endif
 endif
 
diff --git a/browser/installer/package-manifest.in b/browser/installer/package-manifest.in
index c438603e241b6..bd7f7348f181c 100644
--- a/browser/installer/package-manifest.in
+++ b/browser/installer/package-manifest.in
@@ -98,6 +98,10 @@
 #endif
 @BINPATH@/@MSVC_CXX_RUNTIME_DLL@
 #endif
+#if MOZ_PACKAGE_WIN_UCRT_DLLS
+@BINPATH@/api-ms-win-*.dll
+@BINPATH@/ucrtbase.dll
+#endif
 #endif
 #ifdef MOZ_GTK
 ; This is a standalone binary launched by Firefox on Linux to verify
@@ -117,6 +121,8 @@
 ; build because we haven't run the relevant parts of configure, so we guess
 ; here and trust what came from our source build.
 #if defined(MOZ_ARTIFACT_BUILDS) && defined(XP_WIN)
+@BINPATH@/api-ms-win-*.dll
+@BINPATH@/ucrtbase.dll
 @BINPATH@/vcruntime*.dll
 @BINPATH@/msvcp*.dll
 @BINPATH@/libEGL.dll
diff --git a/build/win32/moz.build b/build/win32/moz.build
index d8d61a22db473..32defa1dc8e78 100644
--- a/build/win32/moz.build
+++ b/build/win32/moz.build
@@ -30,3 +30,17 @@ if CONFIG["WIN32_REDIST_DIR"] and CONFIG["COMPILE_ENVIRONMENT"]:
     for f in ["MSVC_C_RUNTIME_DLL", "MSVC_C_RUNTIME_1_DLL", "MSVC_CXX_RUNTIME_DLL"]:
         if CONFIG[f]:
             FINAL_TARGET_FILES += ["%%%s/%s" % (CONFIG["WIN32_REDIST_DIR"], CONFIG[f])]
+
+if CONFIG["WIN_UCRT_REDIST_DIR"] and CONFIG["COMPILE_ENVIRONMENT"]:
+    win7_ucrt_redists = [
+        "api-ms-win-core-file-l1-2-0.dll",
+        "api-ms-win-core-file-l2-1-0.dll",
+        "api-ms-win-core-localization-l1-2-0.dll",
+        "api-ms-win-core-processthreads-l1-1-1.dll",
+        "api-ms-win-core-synch-l1-2-0.dll",
+        "api-ms-win-core-timezone-l1-1-0.dll",
+        "api-ms-win-crt-*.dll",
+        "ucrtbase.dll",
+    ]
+    for f in win7_ucrt_redists:
+        FINAL_TARGET_FILES += ["%%%s/%s" % (CONFIG["WIN_UCRT_REDIST_DIR"], f)]
diff --git a/toolkit/library/gtest/TestUCRTDepends.cpp b/toolkit/library/gtest/TestUCRTDepends.cpp
new file mode 100644
index 0000000000000..a2faaf5ce37ff
--- /dev/null
+++ b/toolkit/library/gtest/TestUCRTDepends.cpp
@@ -0,0 +1,142 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include <windows.h>
+#include <stdio.h>
+#include <string.h>
+#include "gtest/gtest.h"
+#include "mozilla/ArrayUtils.h"
+#include "mozilla/Unused.h"
+#include "mozilla/WindowsVersion.h"
+#include "nsDependentString.h"
+#include "nsReadableUtils.h"
+#include "nsUnicharUtils.h"
+#include "nsWindowsHelpers.h"
+
+using namespace mozilla;
+
+constexpr const WCHAR pattern[] = L"\\api-*.dll";
+
+static LPWSTR GetModuleFileDir(HMODULE module, LPWSTR path, DWORD size) {
+  DWORD chars = GetModuleFileNameW(module, path, size);
+  if (chars <= 0 || chars >= MAX_PATH) {
+    return nullptr;
+  }
+
+  // Split the base name from the directory.
+  LPWSTR basename = wcsrchr(path, L'\\');
+  if (!basename) {
+    return nullptr;  // at least one path separator must be present
+  }
+  *basename++ = L'\0';
+  return basename;
+}
+
+// Make sure that Universal CRT forwarder DLLs are not in app directory if it
+// is in Api Sets.
+TEST(TestUCRTDepends, AppDir)
+{
+  WCHAR appdir[MAX_PATH];
+  ASSERT_TRUE(GetModuleFileDir(nullptr, appdir, MAX_PATH));
+
+  WCHAR path[MAX_PATH + ArrayLength(pattern)];
+  swprintf(path, L"%s%s", appdir, pattern);
+
+  WIN32_FIND_DATAW wfd;
+  HANDLE hFind = FindFirstFileW(path, &wfd);
+#if defined(_M_ARM64)  // We do not ship Universal CRT DLLs on aarch64.
+  if (hFind == INVALID_HANDLE_VALUE) {
+    EXPECT_EQ(GetLastError(), static_cast<DWORD>(ERROR_FILE_NOT_FOUND));
+    return;
+  }
+#else
+  ASSERT_NE(hFind, INVALID_HANDLE_VALUE);
+#endif
+  do {
+    nsModuleHandle module(LoadLibraryW(wfd.cFileName));
+    EXPECT_TRUE(module);
+    if (!module) {
+      continue;
+    }
+
+    // Get a full path of the loaded module.
+    LPWSTR basename = GetModuleFileDir(module, path, MAX_PATH);
+    ASSERT_TRUE(basename);
+
+    // If the module is in Api Sets, GetModuleFileName returns the redirected
+    // DLL path, so filenames will not match.
+    bool inApiSets = wcsicmp(wfd.cFileName, basename);
+    if (IsWin10OrLater()) {
+      // All files must be in Api Sets on Windows 10.
+      EXPECT_TRUE(inApiSets);
+      continue;
+    }
+    if (IsWin8OrLater()) {
+      if (inApiSets) {
+        continue;  // This file is in Api Sets, OK.
+      }
+      // Universal CRT files are not in Api Sets on Windows 8.
+      EXPECT_TRUE(StringBeginsWith(nsDependentString(wfd.cFileName),
+                                   u"api-ms-win-crt-"_ns,
+                                   nsCaseInsensitiveStringComparator));
+    } else {  // Windows 7
+      // All files must not be in Api Sets on Windows 7.
+      EXPECT_FALSE(inApiSets);
+    }
+    // Files must be loaded from appdir
+    EXPECT_TRUE(!wcsicmp(path, appdir));
+  } while (FindNextFileW(hFind, &wfd));
+  EXPECT_EQ(GetLastError(), static_cast<DWORD>(ERROR_NO_MORE_FILES));
+  BOOL ret = FindClose(hFind);
+  EXPECT_TRUE(ret);
+}
+
+// Make sure that we do not depend on Universal CRT forwarder DLLs in the
+// system directory.
+TEST(TestUCRTDepends, SystemDir)
+{
+  WCHAR appdir[MAX_PATH];
+  ASSERT_TRUE(GetModuleFileDir(nullptr, appdir, MAX_PATH));
+
+  WCHAR path[MAX_PATH + ArrayLength(pattern)];
+  UINT chars = GetSystemDirectoryW(path, MAX_PATH);
+  ASSERT_TRUE(chars > 0 && chars < MAX_PATH);
+  wcscat(path, pattern);
+
+  WIN32_FIND_DATAW wfd;
+  HANDLE hFind = FindFirstFileW(path, &wfd);
+  if (hFind == INVALID_HANDLE_VALUE) {
+    EXPECT_EQ(GetLastError(), static_cast<DWORD>(ERROR_FILE_NOT_FOUND));
+    EXPECT_TRUE(IsWin8OrLater());
+    return;  // Not found in the system directory, OK.
+  }
+  // Api Sets forwarders must not be present on Windows 10.
+  EXPECT_FALSE(IsWin10OrLater());
+  do {
+    HMODULE module = GetModuleHandleW(wfd.cFileName);
+    if (!module) {
+      continue;  // We are not using this file, OK.
+    }
+
+    // Get a full path of the loaded module.
+    LPWSTR basename = GetModuleFileDir(module, path, MAX_PATH);
+    ASSERT_TRUE(basename);
+
+    // If the module is in Api Sets, GetModuleFileName returns the redirected
+    // DLL path, so filenames will not match.
+    if (wcsicmp(wfd.cFileName, basename)) {
+      // If this file is in Api Sets, it must not be present in appdir.
+      swprintf(path, L"%s\\%s", appdir, wfd.cFileName);
+      EXPECT_EQ(GetFileAttributesW(path), INVALID_FILE_ATTRIBUTES);
+    } else {
+      // If this file is not in Api Sets, it must be loaded from appdir.
+      EXPECT_TRUE(!wcsicmp(path, appdir));
+    }
+  } while (FindNextFileW(hFind, &wfd));
+  EXPECT_EQ(GetLastError(), static_cast<DWORD>(ERROR_NO_MORE_FILES));
+  BOOL ret = FindClose(hFind);
+  EXPECT_TRUE(ret);
+}
diff --git a/toolkit/library/gtest/moz.build b/toolkit/library/gtest/moz.build
index 9744edcc46fa2..f33cd92197d68 100644
--- a/toolkit/library/gtest/moz.build
+++ b/toolkit/library/gtest/moz.build
@@ -25,6 +25,11 @@ if CONFIG["ENABLE_TESTS"]:
         "/xpcom/build",
     ]
 
+    if CONFIG["OS_ARCH"] == "WINNT":
+        UNIFIED_SOURCES += [
+            "TestUCRTDepends.cpp",
+        ]
+
 USE_LIBS += [
     "static:xul",
 ]
diff --git a/toolkit/mozapps/installer/upload-files.mk b/toolkit/mozapps/installer/upload-files.mk
index 5dae7e6bce3fb..e6e03bdc78aa0 100644
--- a/toolkit/mozapps/installer/upload-files.mk
+++ b/toolkit/mozapps/installer/upload-files.mk
@@ -74,6 +74,11 @@ ifdef MSVC_CXX_RUNTIME_DLL
   JSSHELL_BINS += $(MSVC_CXX_RUNTIME_DLL)
 endif
 
+ifdef WIN_UCRT_REDIST_DIR
+  JSSHELL_BINS += $(notdir $(wildcard $(DIST)/bin/api-ms-win-*.dll))
+  JSSHELL_BINS += ucrtbase.dll
+endif
+
 ifdef LLVM_SYMBOLIZER
   JSSHELL_BINS += $(notdir $(LLVM_SYMBOLIZER))
 endif
