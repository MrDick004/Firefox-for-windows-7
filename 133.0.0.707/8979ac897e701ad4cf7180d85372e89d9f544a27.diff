

diff --git a/dom/media/MediaManager.cpp b/dom/media/MediaManager.cpp
index 2ade297d31e84..e74654f10230e 100644
--- a/dom/media/MediaManager.cpp
+++ b/dom/media/MediaManager.cpp
@@ -75,7 +75,12 @@
 #endif
 
 #if defined(XP_WIN)
+#  include <iphlpapi.h>
 #  include <objbase.h>
+#  include <tchar.h>
+#  include <winsock2.h>
+
+#  include "mozilla/WindowsVersion.h"
 #endif
 
 // A specialization of nsMainThreadPtrHolder for
@@ -2501,6 +2506,27 @@ media::Parent<media::NonE10s>* MediaManager::GetNonE10sParent() {
   return mNonE10sParent;
 }
 
+/* static */
+void MediaManager::StartupInit() {
+#ifdef WIN32
+  if (!IsWin8OrLater()) {
+    // Bug 1107702 - Older Windows fail in GetAdaptersInfo (and others) if the
+    // first(?) call occurs after the process size is over 2GB (kb/2588507).
+    // Attempt to 'prime' the pump by making a call at startup.
+    unsigned long out_buf_len = sizeof(IP_ADAPTER_INFO);
+    PIP_ADAPTER_INFO pAdapterInfo = (IP_ADAPTER_INFO*)moz_xmalloc(out_buf_len);
+    if (GetAdaptersInfo(pAdapterInfo, &out_buf_len) == ERROR_BUFFER_OVERFLOW) {
+      free(pAdapterInfo);
+      pAdapterInfo = (IP_ADAPTER_INFO*)moz_xmalloc(out_buf_len);
+      GetAdaptersInfo(pAdapterInfo, &out_buf_len);
+    }
+    if (pAdapterInfo) {
+      free(pAdapterInfo);
+    }
+  }
+#endif
+}
+
 /* static */
 void MediaManager::Dispatch(already_AddRefed<Runnable> task) {
   MOZ_ASSERT(NS_IsMainThread());
diff --git a/dom/media/MediaManager.h b/dom/media/MediaManager.h
index 5029e61ca936c..abd20a1caa125 100644
--- a/dom/media/MediaManager.h
+++ b/dom/media/MediaManager.h
@@ -210,6 +210,7 @@ class MediaManager final : public nsIMediaManagerService,
   // to MainThread from MediaManager thread.
   static MediaManager* Get();
   static MediaManager* GetIfExists();
+  static void StartupInit();
   static void Dispatch(already_AddRefed<Runnable> task);
 
   /**
diff --git a/dom/media/ipc/MFCDMChild.cpp b/dom/media/ipc/MFCDMChild.cpp
index 9df86b82f4786..156a6105a40e8 100644
--- a/dom/media/ipc/MFCDMChild.cpp
+++ b/dom/media/ipc/MFCDMChild.cpp
@@ -8,6 +8,7 @@
 #include "mozilla/KeySystemConfig.h"
 #include "mozilla/RefPtr.h"
 #include "mozilla/StaticString.h"
+#include "mozilla/WindowsVersion.h"
 #include "mozilla/WMFCDMProxyCallback.h"
 #include "nsString.h"
 #include "RemoteDecoderManagerChild.h"
@@ -86,6 +87,12 @@ RefPtr<MFCDMChild::RemotePromise> MFCDMChild::EnsureRemote() {
     return RemotePromise::CreateAndReject(mState, __func__);
   }
 
+  if (!IsWin10OrLater()) {
+    LOG("only support MF CDM on Windows 10+");
+    mState = NS_ERROR_NOT_AVAILABLE;
+    return RemotePromise::CreateAndReject(mState, __func__);
+  }
+
   RefPtr<MFCDMChild> self = this;
   RemoteDecoderManagerChild::LaunchUtilityProcessIfNeeded(
       RemoteDecodeIn::UtilityProcess_MFMediaEngineCDM)
diff --git a/dom/media/ipc/MFMediaEngineChild.cpp b/dom/media/ipc/MFMediaEngineChild.cpp
index 987f7569d1ec2..9d9ccb1fcfe88 100644
--- a/dom/media/ipc/MFMediaEngineChild.cpp
+++ b/dom/media/ipc/MFMediaEngineChild.cpp
@@ -6,6 +6,7 @@
 
 #include "MFMediaEngineUtils.h"
 #include "RemoteDecoderManagerChild.h"
+#include "mozilla/WindowsVersion.h"
 
 #ifdef MOZ_WMF_CDM
 #  include "WMFCDMProxy.h"
@@ -53,6 +54,12 @@ RefPtr<GenericNonExclusivePromise> MFMediaEngineChild::Init(
                                                        __func__);
   }
 
+  if (!IsWin10OrLater()) {
+    CLOG("Only support MF media engine playback on Windows 10+");
+    return GenericNonExclusivePromise::CreateAndReject(NS_ERROR_FAILURE,
+                                                       __func__);
+  }
+
   CLOG("Init, hasAudio=%d, hasVideo=%d, encrypted=%d", aInfo.HasAudio(),
        aInfo.HasVideo(), aInfo.IsEncrypted());
 
diff --git a/dom/media/platforms/PDMFactory.cpp b/dom/media/platforms/PDMFactory.cpp
index bf534e4785d8b..1bb8310266738 100644
--- a/dom/media/platforms/PDMFactory.cpp
+++ b/dom/media/platforms/PDMFactory.cpp
@@ -38,6 +38,7 @@
 
 #ifdef XP_WIN
 #  include "WMFDecoderModule.h"
+#  include "mozilla/WindowsVersion.h"
 #  ifdef MOZ_WMF_MEDIA_ENGINE
 #    include "MFMediaEngineDecoderModule.h"
 #  endif
@@ -86,13 +87,17 @@ class PDMInitializer final {
  private:
   static void InitGpuPDMs() {
 #ifdef XP_WIN
-    WMFDecoderModule::Init();
+    if (!IsWin7AndPre2000Compatible()) {
+      WMFDecoderModule::Init();
+    }
 #endif
   }
 
   static void InitRddPDMs() {
 #ifdef XP_WIN
-    WMFDecoderModule::Init();
+    if (!IsWin7AndPre2000Compatible()) {
+      WMFDecoderModule::Init();
+    }
 #endif
 #ifdef MOZ_APPLEMEDIA
     AppleDecoderModule::Init();
@@ -108,11 +113,12 @@ class PDMInitializer final {
   static void InitUtilityPDMs() {
     const ipc::SandboxingKind kind = GetCurrentSandboxingKind();
 #ifdef XP_WIN
-    if (kind == ipc::SandboxingKind::UTILITY_AUDIO_DECODING_WMF) {
+    if (!IsWin7AndPre2000Compatible() &&
+        kind == ipc::SandboxingKind::UTILITY_AUDIO_DECODING_WMF) {
       WMFDecoderModule::Init();
     }
 #  ifdef MOZ_WMF_MEDIA_ENGINE
-    if (StaticPrefs::media_wmf_media_engine_enabled() &&
+    if (IsWin10OrLater() && StaticPrefs::media_wmf_media_engine_enabled() &&
         kind == ipc::SandboxingKind::MF_MEDIA_ENGINE_CDM) {
       MFMediaEngineDecoderModule::Init();
     }
@@ -139,14 +145,16 @@ class PDMInitializer final {
     if (StaticPrefs::media_allow_audio_non_utility()) {
 #endif  // !defined(MOZ_WIDGET_ANDROID)
 #ifdef XP_WIN
+      if (!IsWin7AndPre2000Compatible()) {
 #  ifdef MOZ_WMF
-      if (!StaticPrefs::media_rdd_process_enabled() ||
-          !StaticPrefs::media_rdd_wmf_enabled() ||
-          !StaticPrefs::media_utility_process_enabled() ||
-          !StaticPrefs::media_utility_wmf_enabled()) {
-        WMFDecoderModule::Init();
-      }
+        if (!StaticPrefs::media_rdd_process_enabled() ||
+            !StaticPrefs::media_rdd_wmf_enabled() ||
+            !StaticPrefs::media_utility_process_enabled() ||
+            !StaticPrefs::media_utility_wmf_enabled()) {
+          WMFDecoderModule::Init();
+        }
 #  endif
+      }
 #endif
 #ifdef MOZ_APPLEMEDIA
       AppleDecoderModule::Init();
@@ -167,7 +175,9 @@ class PDMInitializer final {
 
   static void InitDefaultPDMs() {
 #ifdef XP_WIN
-    WMFDecoderModule::Init();
+    if (!IsWin7AndPre2000Compatible()) {
+      WMFDecoderModule::Init();
+    }
 #endif
 #ifdef MOZ_APPLEMEDIA
     AppleDecoderModule::Init();
@@ -504,7 +514,7 @@ void PDMFactory::CreatePDMs() {
 
 void PDMFactory::CreateGpuPDMs() {
 #ifdef XP_WIN
-  if (StaticPrefs::media_wmf_enabled()) {
+  if (StaticPrefs::media_wmf_enabled() && !IsWin7AndPre2000Compatible()) {
     StartupPDM(WMFDecoderModule::Create());
   }
 #endif
@@ -593,7 +603,7 @@ void PDMFactory::CreateUtilityPDMs() {
   }
 #ifdef MOZ_WMF_MEDIA_ENGINE
   if (aKind == ipc::SandboxingKind::MF_MEDIA_ENGINE_CDM) {
-    if (StaticPrefs::media_wmf_media_engine_enabled()) {
+    if (IsWin10OrLater() && StaticPrefs::media_wmf_media_engine_enabled()) {
       StartupPDM(MFMediaEngineDecoderModule::Create());
     }
   }
@@ -633,7 +643,7 @@ void PDMFactory::CreateContentPDMs() {
   if (StaticPrefs::media_allow_audio_non_utility()) {
 #endif  // !defined(MOZ_WIDGET_ANDROID)
 #ifdef XP_WIN
-    if (StaticPrefs::media_wmf_enabled()) {
+    if (StaticPrefs::media_wmf_enabled() && !IsWin7AndPre2000Compatible()) {
 #  ifdef MOZ_WMF
       if (!StaticPrefs::media_rdd_process_enabled() ||
           !StaticPrefs::media_rdd_wmf_enabled()) {
@@ -687,7 +697,7 @@ void PDMFactory::CreateContentPDMs() {
 
 void PDMFactory::CreateDefaultPDMs() {
 #ifdef XP_WIN
-  if (StaticPrefs::media_wmf_enabled()) {
+  if (StaticPrefs::media_wmf_enabled() && !IsWin7AndPre2000Compatible()) {
     if (!StartupPDM(WMFDecoderModule::Create())) {
       mFailureFlags += DecoderDoctorDiagnostics::Flags::WMFFailedToLoad;
     }
diff --git a/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp b/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
index e291ab6a5452d..25a0fd378e687 100644
--- a/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
+++ b/dom/media/platforms/wmf/MFMediaEngineDecoderModule.cpp
@@ -150,7 +150,7 @@ static bool CreateMFTDecoderOnMTA(const WMFStreamType& aType) {
     case WMFStreamType::VP8:
     case WMFStreamType::VP9: {
       static const uint32_t VPX_USABLE_BUILD = 16287;
-      if (IsWindows10BuildOrLater(VPX_USABLE_BUILD)) {
+      if (IsWindowsBuildOrLater(VPX_USABLE_BUILD)) {
         result = SUCCEEDED(decoder->Create(CLSID_CMSVPXDecMFT));
       }
       break;
diff --git a/dom/media/platforms/wmf/WMFDecoderModule.cpp b/dom/media/platforms/wmf/WMFDecoderModule.cpp
index b61e1862b5fc5..e24cbcfdae80d 100644
--- a/dom/media/platforms/wmf/WMFDecoderModule.cpp
+++ b/dom/media/platforms/wmf/WMFDecoderModule.cpp
@@ -205,7 +205,7 @@ HRESULT WMFDecoderModule::CreateMFTDecoder(const WMFStreamType& aType,
       return aDecoder->Create(CLSID_CMSH264DecoderMFT);
     case WMFStreamType::VP8:
       static const uint32_t VP8_USABLE_BUILD = 16287;
-      if (!IsWindows10BuildOrLater(VP8_USABLE_BUILD)) {
+      if (!IsWindowsBuildOrLater(VP8_USABLE_BUILD)) {
         WmfDecoderModuleMarkerAndLog("CreateMFTDecoder, VP8 Failure",
                                      "VP8 MFT requires Windows build %" PRId32
                                      " or later",
diff --git a/dom/media/platforms/wmf/WMFMediaDataDecoder.cpp b/dom/media/platforms/wmf/WMFMediaDataDecoder.cpp
index 19dab1d27c0af..e7307384cc9c6 100644
--- a/dom/media/platforms/wmf/WMFMediaDataDecoder.cpp
+++ b/dom/media/platforms/wmf/WMFMediaDataDecoder.cpp
@@ -13,6 +13,7 @@
 #include "mozilla/SyncRunnable.h"
 #include "mozilla/TaskQueue.h"
 #include "mozilla/Telemetry.h"
+#include "mozilla/WindowsVersion.h"
 #include "nsTArray.h"
 
 #define LOG(...) MOZ_LOG(sPDMLog, mozilla::LogLevel::Debug, (__VA_ARGS__))
@@ -123,6 +124,12 @@ bool WMFMediaDataDecoder::ShouldGuardAgaintIncorrectFirstSample(
     return false;
   }
 
+  // By observation so far this issue only happens on Windows 10 so we don't
+  // need to enable this on other versions.
+  if (!IsWin10OrLater()) {
+    return false;
+  }
+
   // This is not the first output sample so we don't need to guard it.
   if (mOutputsCount != 0) {
     return false;
diff --git a/dom/media/platforms/wmf/WMFUtils.cpp b/dom/media/platforms/wmf/WMFUtils.cpp
index 6d03ad384637e..8595d0ae5eccc 100644
--- a/dom/media/platforms/wmf/WMFUtils.cpp
+++ b/dom/media/platforms/wmf/WMFUtils.cpp
@@ -27,6 +27,7 @@
 #include "nsWindowsHelpers.h"
 #include "prenv.h"
 #include "mozilla/mscom/EnsureMTA.h"
+#include "mozilla/WindowsVersion.h"
 
 #ifndef WAVE_FORMAT_OPUS
 #  define WAVE_FORMAT_OPUS 0x704F
@@ -438,6 +439,16 @@ LoadDLLs() {
 
 HRESULT
 MediaFoundationInitializer::MFStartup() {
+  if (IsWin7AndPre2000Compatible()) {
+    /*
+     * Specific exclude the usage of WMF on Win 7 with compatibility mode
+     * prior to Win 2000 as we may crash while trying to startup WMF.
+     * Using GetVersionEx API which takes compatibility mode into account.
+     * See Bug 1279171.
+     */
+    return E_FAIL;
+  }
+
   HRESULT hr = LoadDLLs();
   if (FAILED(hr)) {
     return hr;
diff --git a/dom/media/platforms/wmf/WMFVideoMFTManager.cpp b/dom/media/platforms/wmf/WMFVideoMFTManager.cpp
index 2a266975e6c07..15421a2c2a051 100644
--- a/dom/media/platforms/wmf/WMFVideoMFTManager.cpp
+++ b/dom/media/platforms/wmf/WMFVideoMFTManager.cpp
@@ -27,6 +27,7 @@
 #include "mozilla/StaticPrefs_media.h"
 #include "mozilla/SyncRunnable.h"
 #include "mozilla/Telemetry.h"
+#include "mozilla/WindowsVersion.h"
 #include "mozilla/gfx/DeviceManagerDx.h"
 #include "mozilla/gfx/gfxVars.h"
 #include "mozilla/layers/LayersTypes.h"
@@ -45,6 +46,35 @@ using mozilla::media::TimeUnit;
 
 namespace mozilla {
 
+static bool IsWin7H264Decoder4KCapable() {
+  WCHAR systemPath[MAX_PATH + 1];
+  if (!ConstructSystem32Path(L"msmpeg2vdec.dll", systemPath, MAX_PATH + 1)) {
+    // Cannot build path -> Assume it's the old DLL or it's missing.
+    return false;
+  }
+
+  DWORD zero;
+  DWORD infoSize = GetFileVersionInfoSizeW(systemPath, &zero);
+  if (infoSize == 0) {
+    // Can't get file info -> Assume it's the old DLL or it's missing.
+    return false;
+  }
+  auto infoData = MakeUnique<unsigned char[]>(infoSize);
+  VS_FIXEDFILEINFO* vInfo;
+  UINT vInfoLen;
+  if (GetFileVersionInfoW(systemPath, 0, infoSize, infoData.get()) &&
+      VerQueryValueW(infoData.get(), L"\\", (LPVOID*)&vInfo, &vInfoLen)) {
+    uint64_t version = uint64_t(vInfo->dwFileVersionMS) << 32 |
+                       uint64_t(vInfo->dwFileVersionLS);
+    // 12.0.9200.16426 & later allow for >1920x1088 resolutions.
+    const uint64_t minimum =
+        (uint64_t(12) << 48) | (uint64_t(9200) << 16) | uint64_t(16426);
+    return version >= minimum;
+  }
+  // Can't get file version -> Assume it's the old DLL.
+  return false;
+}
+
 LayersBackend GetCompositorBackendType(
     layers::KnowsCompositor* aKnowsCompositor) {
   if (aKnowsCompositor) {
@@ -141,6 +171,10 @@ bool WMFVideoMFTManager::InitializeDXVA() {
         StaticPrefs::GetPrefName_media_wmf_dxva_d3d11_enabled());
     d3d11 = false;
   }
+  if (!IsWin8OrLater()) {
+    mDXVAFailureReason.AssignLiteral("D3D11: Requires Windows 8 or later");
+    d3d11 = false;
+  }
 
   if (d3d11) {
     mDXVAFailureReason.AppendLiteral("D3D11: ");
@@ -167,7 +201,10 @@ MediaResult WMFVideoMFTManager::ValidateVideoInfo() {
         // have this limitation, but it still might have maximum resolution
         // limitation.
         // https://msdn.microsoft.com/en-us/library/windows/desktop/dd797815(v=vs.85).aspx
-        static const int32_t MAX_H264_PIXEL_COUNT = 4096 * 2304;
+        const bool Is4KCapable =
+            IsWin8OrLater() || IsWin7H264Decoder4KCapable();
+        static const int32_t MAX_H264_PIXEL_COUNT =
+            Is4KCapable ? 4096 * 2304 : 1920 * 1088;
         const CheckedInt32 pixelCount =
             CheckedInt32(mVideoInfo.mImage.width) * mVideoInfo.mImage.height;
 
@@ -238,7 +275,8 @@ MediaResult WMFVideoMFTManager::InitInternal() {
     attr->GetUINT32(MF_SA_D3D_AWARE, &aware);
     attr->SetUINT32(CODECAPI_AVDecNumWorkerThreads,
                     WMFDecoderModule::GetNumDecoderThreads());
-    bool lowLatency = StaticPrefs::media_wmf_low_latency_enabled();
+    bool lowLatency =
+        (StaticPrefs::media_wmf_low_latency_enabled() || IsWin10OrLater());
     if (mLowLatency || lowLatency) {
       HRESULT hr = attr->SetUINT32(CODECAPI_AVLowLatencyMode, TRUE);
       if (SUCCEEDED(hr)) {
diff --git a/layout/build/nsLayoutStatics.cpp b/layout/build/nsLayoutStatics.cpp
index 5278d0b6b762a..a3c38ce7de979 100644
--- a/layout/build/nsLayoutStatics.cpp
+++ b/layout/build/nsLayoutStatics.cpp
@@ -10,6 +10,7 @@
 #include "nscore.h"
 
 #include "mozilla/intl/AppDateTimeFormat.h"
+#include "MediaManager.h"
 #include "mozilla/dom/ServiceWorkerRegistrar.h"
 #include "nsAttrValue.h"
 #include "nsComputedDOMStyle.h"
@@ -218,6 +219,7 @@ nsresult nsLayoutStatics::Initialize() {
   }
 
   DecoderDoctorLogger::Init();
+  MediaManager::StartupInit();
   CubebUtils::InitLibrary();
 
   nsHtml5Module::InitializeStatics();
