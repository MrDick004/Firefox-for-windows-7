

diff --git a/uriloader/exthandler/win/nsOSHelperAppService.cpp b/uriloader/exthandler/win/nsOSHelperAppService.cpp
index 31c2a6f09c63e..ced261552ca29 100644
--- a/uriloader/exthandler/win/nsOSHelperAppService.cpp
+++ b/uriloader/exthandler/win/nsOSHelperAppService.cpp
@@ -17,6 +17,7 @@
 #include "nsIWindowsRegKey.h"
 #include "nsXULAppAPI.h"
 #include "mozilla/UniquePtrExtensions.h"
+#include "mozilla/WindowsVersion.h"
 
 // shellapi.h is needed to build with WIN32_LEAN_AND_MEAN
 #include <shellapi.h>
@@ -118,21 +119,23 @@ NS_IMETHODIMP nsOSHelperAppService::GetApplicationDescription(
 
   NS_ConvertASCIItoUTF16 buf(aScheme);
 
-  wchar_t result[1024];
-  DWORD resultSize = 1024;
-  HRESULT hr = AssocQueryString(0x1000 /* ASSOCF_IS_PROTOCOL */,
-                                ASSOCSTR_FRIENDLYAPPNAME, buf.get(), NULL,
-                                result, &resultSize);
-  if (SUCCEEDED(hr)) {
-    _retval = result;
-    return NS_OK;
+  if (mozilla::IsWin8OrLater()) {
+    wchar_t result[1024];
+    DWORD resultSize = 1024;
+    HRESULT hr = AssocQueryString(0x1000 /* ASSOCF_IS_PROTOCOL */,
+                                  ASSOCSTR_FRIENDLYAPPNAME, buf.get(), NULL,
+                                  result, &resultSize);
+    if (SUCCEEDED(hr)) {
+      _retval = result;
+      return NS_OK;
+    }
   }
 
   NS_ENSURE_TRUE(mAppAssoc, NS_ERROR_NOT_AVAILABLE);
   wchar_t* pResult = nullptr;
   // We are responsible for freeing returned strings.
-  hr = mAppAssoc->QueryCurrentDefault(buf.get(), AT_URLPROTOCOL, AL_EFFECTIVE,
-                                      &pResult);
+  HRESULT hr = mAppAssoc->QueryCurrentDefault(buf.get(), AT_URLPROTOCOL,
+                                              AL_EFFECTIVE, &pResult);
   if (SUCCEEDED(hr)) {
     nsCOMPtr<nsIFile> app;
     nsAutoString appInfo(pResult);
