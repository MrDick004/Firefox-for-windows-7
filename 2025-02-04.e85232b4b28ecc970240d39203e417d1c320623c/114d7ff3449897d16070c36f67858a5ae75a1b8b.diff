diff --git a/widget/windows/nsWindowGfx.cpp b/widget/windows/nsWindowGfx.cpp
index e9e5ee63c1f5..cf07794300de 100644
--- a/widget/windows/nsWindowGfx.cpp
+++ b/widget/windows/nsWindowGfx.cpp
@@ -209,19 +209,19 @@ bool nsWindow::OnPaint(uint32_t aNestingLevel) {
       translucentRegion.SubOut(mOpaqueRegion);
       region.OrWith(translucentRegion);
     }
+  }
 
-    if (mNeedsNCAreaClear ||
-        (didResize && mTransparencyMode == TransparencyMode::Transparent)) {
-      // We need to clear the non-client-area region, and the transparent parts
-      // of the window to black (once).
-      auto black = reinterpret_cast<HBRUSH>(::GetStockObject(BLACK_BRUSH));
-      nsAutoRegion regionToClear(ComputeNonClientHRGN());
-      if (!translucentRegion.IsEmpty()) {
-        nsAutoRegion translucent(WinUtils::RegionToHRGN(translucentRegion));
-        ::CombineRgn(regionToClear, regionToClear, translucent, RGN_OR);
-      }
-      ::FillRgn(hDC, regionToClear, black);
+  if (!usingMemoryDC && (mNeedsNCAreaClear || didResize)) {
+    // We need to clear the non-client-area region, and the transparent parts
+    // of the window to black (once).
+    auto black = reinterpret_cast<HBRUSH>(::GetStockObject(BLACK_BRUSH));
+    nsAutoRegion regionToClear(ComputeNonClientHRGN());
+    if (mTransparencyMode == TransparencyMode::Transparent &&
+        !translucentRegion.IsEmpty()) {
+      nsAutoRegion translucent(WinUtils::RegionToHRGN(translucentRegion));
+      ::CombineRgn(regionToClear, regionToClear, translucent, RGN_OR);
     }
+    ::FillRgn(hDC, regionToClear, black);
   }
   mNeedsNCAreaClear = false;
 
