diff --git a/dom/media/gmp/ChromiumCDMAdapter.cpp b/dom/media/gmp/ChromiumCDMAdapter.cpp
index a5e866f83edc4..674585c0fc403 100644
--- a/dom/media/gmp/ChromiumCDMAdapter.cpp
+++ b/dom/media/gmp/ChromiumCDMAdapter.cpp
@@ -20,6 +20,8 @@
 #ifdef XP_WIN
 #  include "WinUtils.h"
 #  include "nsWindowsDllInterceptor.h"
+#  include "mozilla/NativeNt.h"
+#  include "mozilla/WindowsVersion.h"
 #  include <windows.h>
 #  include <strsafe.h>
 #  include <unordered_map>
@@ -175,6 +177,7 @@ bool ChromiumCDMAdapter::Supports(int32_t aModuleVersion,
 
 #ifdef XP_WIN
 
+MOZ_RUNINIT static WindowsDllInterceptor sKernelBaseIntercept;
 MOZ_RUNINIT static WindowsDllInterceptor sKernel32Intercept;
 
 typedef DWORD(WINAPI* QueryDosDeviceWFnPtr)(_In_opt_ LPCWSTR lpDeviceName,
@@ -184,6 +187,13 @@ typedef DWORD(WINAPI* QueryDosDeviceWFnPtr)(_In_opt_ LPCWSTR lpDeviceName,
 static WindowsDllInterceptor::FuncHookType<QueryDosDeviceWFnPtr>
     sOriginalQueryDosDeviceWFnPtr;
 
+typedef BOOL(WINAPI* GetProcessMitigationPolicyFnPtr)(
+    HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer,
+    SIZE_T dwLength);
+
+static WindowsDllInterceptor::FuncHookType<GetProcessMitigationPolicyFnPtr>
+    sOriginalGetProcessMitigationPolicyFnPtr;
+
 static std::unordered_map<std::wstring, std::wstring>* sDeviceNames = nullptr;
 
 DWORD WINAPI QueryDosDeviceWHook(LPCWSTR lpDeviceName, LPWSTR lpTargetPath,
@@ -242,6 +252,29 @@ static std::wstring GetDeviceMapping(const std::wstring& aDosDeviceName) {
   return std::wstring(buf, buf + rv);
 }
 
+BOOL WINAPI MozGetProcessMitigationPolicy(
+    HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer,
+    SIZE_T dwLength) {
+  if (MitigationPolicy != ProcessSystemCallDisablePolicy ||
+      dwLength != sizeof(PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY)) {
+    // We don't use GetProcessPreferredUILanguages, which is patched to create
+    // this workable version of GetProcessMitigationPolicy. However, in theory
+    // other code in our process could bind to GetProcessPreferredUILanguages
+    // before we rename it. As the second and fourth arguments for that function
+    // are pointers, if it is called it will always end up here. FALSE is a
+    // valid return value for GetProcessPreferredUILanguages so in that rare
+    // case it shouldn't be an issue.
+    ::SetLastError(ERROR_INVALID_PARAMETER);
+    return FALSE;
+  }
+
+  auto* policy =
+      reinterpret_cast<PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY*>(
+          lpBuffer);
+  policy->Flags = 0;
+  return TRUE;
+}
+
 static void InitializeHooks() {
   static bool initialized = false;
   if (initialized) {
@@ -253,9 +286,27 @@ static void InitializeHooks() {
     sDeviceNames->emplace(name, GetDeviceMapping(name));
   }
 
-  sKernel32Intercept.Init("kernelbase.dll");
-  sOriginalQueryDosDeviceWFnPtr.Set(sKernel32Intercept, "QueryDosDeviceW",
+  sKernelBaseIntercept.Init("kernelbase.dll");
+  sOriginalQueryDosDeviceWFnPtr.Set(sKernelBaseIntercept, "QueryDosDeviceW",
                                     &QueryDosDeviceWHook);
+
+  if (!IsWin8OrLater()) {
+    auto k32mod = ::GetModuleHandleW(L"kernel32.dll");
+    interceptor::MMPolicyInProcess policy;
+    auto k32Exports = nt::PEExportSection<interceptor::MMPolicyInProcess>::Get(
+        k32mod, policy);
+    if (k32Exports.ReplaceExportNameTableEntry("GetProcessPreferredUILanguages",
+                                               "GetProcessMitigationPolicy")) {
+      sKernel32Intercept.Init("kernel32.dll");
+      if (!sOriginalGetProcessMitigationPolicyFnPtr.Set(
+              sKernel32Intercept, "GetProcessMitigationPolicy",
+              &MozGetProcessMitigationPolicy)) {
+        GMP_LOG_WARNING("Failed to hook GetProcessMitigationPolicy");
+      }
+    } else {
+      GMP_LOG_WARNING("Failed to rename to GetProcessMitigationPolicy");
+    }
+  }
 }
 #endif
 
diff --git a/mozglue/misc/NativeNt.h b/mozglue/misc/NativeNt.h
index 439ef3d12abfe..726fc26f574ee 100644
--- a/mozglue/misc/NativeNt.h
+++ b/mozglue/misc/NativeNt.h
@@ -1242,6 +1242,59 @@ class MOZ_RAII PEExportSection {
     return rvaToFunction;
   }
 
+  BOOL ReplaceExportNameTableEntry(const char* aFunctionNameASCII,
+                                   const char* aReplFunctionNameASCII) const {
+    if (!*this || !aFunctionNameASCII || !aReplFunctionNameASCII) {
+      return FALSE;
+    }
+
+    struct NameTableComparator {
+      NameTableComparator(const PEExportSection<MMPolicy>& aExportSection,
+                          const char* aTarget)
+          : mExportSection(aExportSection),
+            mTargetName(aTarget),
+            mTargetNamelength(StrlenASCII(aTarget)) {}
+
+      int operator()(DWORD aRVAToString) const {
+        mozilla::interceptor::TargetObjectArray<MMPolicy, char> itemString(
+            mExportSection.mMMPolicy, mExportSection.mImageBase + aRVAToString,
+            mTargetNamelength + 1);
+        return StrcmpASCII(mTargetName, itemString[0]);
+      }
+
+      const PEExportSection<MMPolicy>& mExportSection;
+      const char* mTargetName;
+      size_t mTargetNamelength;
+    };
+
+    const NameTableComparator comp(*this, aFunctionNameASCII);
+
+    size_t match;
+    if (!mExportNameTable.BinarySearchIf(comp, &match)) {
+      return FALSE;
+    }
+
+    const DWORD* rvaToString = mExportNameTable[match];
+    if (!rvaToString) {
+      return FALSE;
+    }
+
+    auto replNameLen = StrlenASCII(aReplFunctionNameASCII);
+    char* namePtr = reinterpret_cast<char*>(mImageBase + *rvaToString);
+    if (StrlenASCII(namePtr) < replNameLen) {
+      return FALSE;
+    }
+
+    auto replNameLenIncNull = replNameLen + 1;
+    AutoVirtualProtect prot(namePtr, replNameLenIncNull, PAGE_READWRITE);
+    if (!prot) {
+      return FALSE;
+    }
+
+    memcpy(namePtr, aReplFunctionNameASCII, replNameLenIncNull);
+    return TRUE;
+  }
+
   /**
    * This functions behaves the same as the native ::GetProcAddress except
    * the following cases:
diff --git a/toolkit/xre/dllservices/mozglue/interceptor/PatcherDetour.h b/toolkit/xre/dllservices/mozglue/interceptor/PatcherDetour.h
index e0b33c7addf0f..ccdc425d8e5be 100644
--- a/toolkit/xre/dllservices/mozglue/interceptor/PatcherDetour.h
+++ b/toolkit/xre/dllservices/mozglue/interceptor/PatcherDetour.h
@@ -655,7 +655,7 @@ class WindowsDllDetourPatcher final
   }
 
 #  if defined(_M_X64)
-  enum class JumpType{Je, Jne, Jae, Jmp, Call};
+  enum class JumpType{Je, Jne, Jae, Jmp, Call, Js};
 
   static bool GenerateJump(Trampoline<MMPolicyT>& aTramp,
                            uintptr_t aAbsTargetAddress, const JumpType aType) {
@@ -686,6 +686,10 @@ class WindowsDllDetourPatcher final
       // JB RIP+14
       aTramp.WriteByte(0x72);
       aTramp.WriteByte(14);
+    } else if (aType == JumpType::Js) {
+      // JNS RIP+14
+      aTramp.WriteByte(0x79);
+      aTramp.WriteByte(14);
     }
 
     // Near jmp, absolute indirect, address given in r/m32
@@ -1496,6 +1500,16 @@ class WindowsDllDetourPatcher final
                           jumpType)) {
           return;
         }
+      } else if (*origBytes == 0x78) {
+        // 78 cb    JS rel8
+        uint8_t offset = origBytes[1];
+
+        origBytes += 2;
+
+        if (!GenerateJump(tramp, origBytes.OffsetToAbsolute(offset),
+                          JumpType::Js)) {
+          return;
+        }
       } else if (*origBytes == 0xff) {
         uint8_t mod = origBytes[1] & kMaskMod;
         uint8_t reg = (origBytes[1] & kMaskReg) >> kRegFieldShift;
