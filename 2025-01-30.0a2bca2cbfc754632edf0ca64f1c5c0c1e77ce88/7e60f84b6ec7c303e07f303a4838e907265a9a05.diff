diff --git a/browser/base/content/test/forms/browser_selectpopup_large.js b/browser/base/content/test/forms/browser_selectpopup_large.js
index d655aa6179d5..0c88755b27bb 100644
--- a/browser/base/content/test/forms/browser_selectpopup_large.js
+++ b/browser/base/content/test/forms/browser_selectpopup_large.js
@@ -241,7 +241,12 @@ async function performLargePopupTests(win) {
     // might return floating point values. We don't care about sub-pixel
     // accuracy, and only care about the final pixel value, so we add a
     // fuzz-factor of 1.
-    const fuzzFactor = 1;
+    //
+    // FIXME(emilio): In win7 scroll position is off by 20px more, but that's
+    // not reproducible in win10 even with the win7 "native" menus enabled.
+    const fuzzFactor = matchMedia("(-moz-platform: windows-win7)").matches
+      ? 21
+      : 1;
     SimpleTest.isfuzzy(
       selectPopup.children[selectedOption].getBoundingClientRect().bottom,
       selectPopup.getBoundingClientRect().bottom - bpBottom + marginBottom,
diff --git a/browser/base/content/test/static/browser_parsable_css.js b/browser/base/content/test/static/browser_parsable_css.js
index 2a44900ef003..81a296c5ad0b 100644
--- a/browser/base/content/test/static/browser_parsable_css.js
+++ b/browser/base/content/test/static/browser_parsable_css.js
@@ -286,7 +286,12 @@ let customPropsToReferencesMap = new Map();
 function neverMatches(mediaList) {
   const perPlatformMediaQueryMap = {
     macosx: ["(-moz-platform: macos)"],
-    win: ["(-moz-platform: windows)"],
+    win: [
+      "(-moz-platform: windows)",
+      "(-moz-platform: windows-win7)",
+      "(-moz-platform: windows-win8)",
+      "(-moz-platform: windows-win10)",
+    ],
     linux: ["(-moz-platform: linux)"],
     android: ["(-moz-platform: android)"],
   };
diff --git a/browser/themes/shared/light-dark-overrides.css b/browser/themes/shared/light-dark-overrides.css
index 87d56a505515..5fa24219f57c 100644
--- a/browser/themes/shared/light-dark-overrides.css
+++ b/browser/themes/shared/light-dark-overrides.css
@@ -7,3 +7,104 @@
   --urlbar-box-focus-bgcolor: var(--button-background-color);
   --urlbar-box-hover-bgcolor: var(--button-background-color-hover);
 }
+
+@media (-moz-platform: windows) {
+  /* The window background is white due to no accentcolor in the lightweight
+     theme. It can't be changed to transparent when there is no compositor
+     (Win 7 in classic / basic theme), or else dragging and focus become
+     broken. So instead just show the normal titlebar in that case, and override
+     the window color as transparent when the compositor is available. */
+  @media not (-moz-windows-compositor) {
+    :root[lwtheme][tabsintitlebar]:not([inDOMFullscreen]) #titlebar {
+      visibility: visible;
+    }
+
+    /* Prevent accent color overriding the window background for
+     * light and dark theme on Aero Basic. This is copied from browser-aero.css. */
+    @media (-moz-windows-default-theme) {
+      :root {
+        background-color: rgb(185,209,234) !important;
+      }
+      :root:-moz-window-inactive {
+        background-color: rgb(215,228,242) !important;
+      }
+    }
+  }
+
+  /* Add a fog for background tabs to be visible on Windows 7 glass window background */
+  @media (-moz-platform: windows-win7) {
+    @media (-moz-windows-default-theme) {
+      #TabsToolbar {
+        background-image: radial-gradient(ellipse at bottom, rgba(255,255,255,0.8), rgba(255,255,255,0.5) 80%, transparent);
+        color: black;
+        --toolbarbutton-icon-fill: currentColor;
+      }
+    }
+  }
+
+  @media (-moz-windows-glass) {
+    /* Make the menubar text readable on aero glass (copied from browser-aero.css). */
+    #toolbar-menubar {
+      text-shadow: 0 0 .5em white, 0 0 .5em white, 0 1px 0 rgba(255,255,255,.4);
+    }
+
+    #main-menubar:not(:-moz-window-inactive) {
+      background-color: rgba(255,255,255,.5);
+      color: black;
+      border-radius: 4px;
+    }
+  }
+
+  @media (-moz-platform: windows-win7),
+         (-moz-platform: windows-win8) {
+    @media (-moz-windows-compositor) {
+      :root {
+        background: transparent !important;
+      }
+
+      /* Remove lwtheme borders from toolbars in non-maximized windows. */
+      #toolbar-menubar,
+      #TabsToolbar {
+        border-inline-style: none !important;
+      }
+    }
+
+    /* Use proper menu text styling in Win7 classic mode. On Windows 8, we use
+       these colors so tabs and menus are legible against the window accent color.
+       These colors are copied from browser.css. */
+    @media not (-moz-windows-compositor),
+           not (-moz-windows-default-theme),
+           (-moz-platform: windows-win8) {
+      :root[tabsintitlebar] {
+        color: CaptionText;
+      }
+
+      :root[tabsintitlebar]:-moz-window-inactive {
+        color: InactiveCaptionText;
+      }
+    }
+  }
+
+  /* Restored windows get an artificial border on windows, because the lwtheme background
+   * overlaps the regular window border. That isn't the case for us, so we avoid painting
+   * over the native border with our custom borders. These are !important to avoid
+   * specificity-wars with the selectors that add these borders. */
+  @media (-moz-windows-classic),
+         not (-moz-windows-compositor) and (-moz-windows-default-theme) {
+    #navigator-toolbox {
+      background-image: none !important;
+    }
+  }
+  @media (-moz-windows-glass) {
+    #navigator-toolbox {
+      border-top: none !important;
+      box-shadow: none !important;
+      padding-top: 0 !important;
+    }
+  }
+  @media (-moz-platform: windows-win8) {
+    #navigator-toolbox {
+      border-top: none !important;
+    }
+  }
+}
diff --git a/browser/themes/shared/preferences/preferences.css b/browser/themes/shared/preferences/preferences.css
index c0ecc35c68f4..237b717b0434 100644
--- a/browser/themes/shared/preferences/preferences.css
+++ b/browser/themes/shared/preferences/preferences.css
@@ -575,6 +575,14 @@ a[is="moz-support-link"]:not(.sidebar-footer-link) {
   margin-inline-start: 0;
 }
 
+@media (-moz-platform: windows-win7),
+       (-moz-platform: windows-win8) {
+  #windows-sso,
+  #windows-sso-caption {
+    display: none;
+  }
+}
+
 /**
  * Dialog
  */
diff --git a/browser/themes/shared/search/searchbar.css b/browser/themes/shared/search/searchbar.css
index 70fa8ea0aa20..f7d14aa5e611 100644
--- a/browser/themes/shared/search/searchbar.css
+++ b/browser/themes/shared/search/searchbar.css
@@ -167,7 +167,7 @@
   fill-opacity: var(--urlbar-icon-fill-opacity);
 }
 
-@media (-moz-platform: windows) {
+@media (-moz-platform: windows-win10) {
   #PopupSearchAutoComplete {
     --panel-border-radius: var(--arrowpanel-border-radius);
   }
diff --git a/browser/themes/windows/browser-aero.css b/browser/themes/windows/browser-aero.css
index a5e606555f4c..8365160e63cd 100644
--- a/browser/themes/windows/browser-aero.css
+++ b/browser/themes/windows/browser-aero.css
@@ -2,228 +2,351 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-@media (-moz-windows-default-theme) {
-  @media (-moz-windows-accent-color-in-titlebar) {
-    :root[sizemode=normal][tabsintitlebar] #navigator-toolbox {
-      border-top: .5px solid ActiveBorder;
-    }
-  }
-
-  :root[sizemode=normal][tabsintitlebar]:-moz-window-inactive #navigator-toolbox {
-    border-top-color: InactiveBorder;
-  }
-
-  :root[tabsintitlebar] .tab-label:-moz-window-inactive {
-    /* Calculated to match the opacity change of Windows Explorer
-       titlebar text change for inactive windows. */
-    opacity: .6;
-  }
-
-  :root[tabsintitlebar] .tab-secondary-label:-moz-window-inactive {
-    opacity: .6;
-  }
+:root {
+  --glass-active-border-color: rgb(37, 44, 51);
+  --glass-inactive-border-color: rgb(102, 102, 102);
+  --glass-shadow-color: hsla(240,5%,5%,0.3);
 }
 
-/* See bug 1715990 about why we do this ourselves on HCM */
-@media (prefers-contrast) {
-  :root[tabsintitlebar]:not([lwtheme]) {
-    background-color: ActiveCaption;
-    color: CaptionText;
-  }
+@media (-moz-platform: windows-win7),
+       (-moz-platform: windows-win8) {
+  @media not (-moz-windows-classic) {
+    :root[sizemode="normal"] #toolbar-menubar:not([autohide="true"]) > #menubar-items,
+    :root[sizemode="normal"] #toolbar-menubar[autohide="true"][inactive] + #TabsToolbar > .toolbar-items {
+      margin-top: 1px;
+    }
+    /**
+     * Except for Windows 8, Windows 7 Aero and Windows 7 Aero Basic, the
+     * -moz-window-button-box appearance on the .titlebar-buttonbox adds an
+     * unwanted margin at the top of the button box.
+     *
+     * For Windows 8 and Windows Aero (which both use the compositor):
+     *   We want the -moz-window-button-box applied in the restored case,
+     *   and -moz-window-button-box-maximized in the maximized case.
+     *
+     * For Windows Aero Basic:
+     *   The margin is also unwanted in the maximized case, but we want
+     *   it in the restored window case.
+     */
+    :root[sizemode="normal"] .titlebar-buttonbox {
+      appearance: auto;
+      -moz-default-appearance: -moz-window-button-box;
+    }
 
-  :root[tabsintitlebar]:not([lwtheme]):-moz-window-inactive {
-    background-color: InactiveCaption;
-    color: InactiveCaptionText;
+    @media (-moz-windows-compositor) {
+      :root[sizemode="maximized"] .titlebar-buttonbox {
+        appearance: auto;
+        -moz-default-appearance: -moz-window-button-box-maximized;
+      }
+    }
   }
 }
 
-.titlebar-buttonbox,
-.titlebar-button {
-  appearance: none !important;
-}
-
-.titlebar-button {
-  border: none;
-  margin: 0 !important;
-  padding: 8px 17px;
-  -moz-context-properties: stroke;
-  stroke: currentColor;
-
-  /* Win10's tablet mode is non-windowed -- windows can't be moved or resized
-     freely. In theory "minimize" might still make sense, but for simplicity we
-     just hide everything but "close".
-
-     (This is not called for in Win11's tablet mode, which _is_ windowed.)
-  */
-  :root[win10-tablet-mode] &:not(.titlebar-close) {
-    display: none;
-  }
-
-  &:focus-visible {
-    outline: var(--focus-outline);
-    outline-offset: var(--focus-outline-inset);
-  }
-
-  > .toolbarbutton-icon {
-    width: 12px;
-    height: 12px;
-
-    &:-moz-locale-dir(rtl) {
-      transform: scaleX(-1);
+@media (-moz-windows-compositor) {
+  @media not (-moz-platform: windows-win7) {
+    @media not (-moz-platform: windows-win8) {
+      @media (-moz-windows-default-theme) {
+        @media (-moz-windows-accent-color-in-titlebar) {
+          :root[sizemode=normal][tabsintitlebar] #navigator-toolbox {
+            border-top: .5px solid ActiveBorder;
+          }
+        }
+
+        :root[sizemode=normal][tabsintitlebar] #navigator-toolbox:-moz-window-inactive {
+          border-top-color: InactiveBorder;
+        }
+
+        :root[tabsintitlebar] .tab-label:-moz-window-inactive {
+          /* Calculated to match the opacity change of Windows Explorer
+             titlebar text change for inactive windows. */
+          opacity: .6;
+        }
+
+        :root[tabsintitlebar] .tab-secondary-label:-moz-window-inactive {
+          opacity: .6;
+        }
+      }
+
+      .titlebar-buttonbox,
+      .titlebar-button {
+        appearance: none !important;
+      }
+
+      .titlebar-button {
+        border: none;
+        margin: 0 !important;
+        padding: 8px 17px;
+        -moz-context-properties: stroke;
+        stroke: currentColor;
+      
+        /* Win10's tablet mode is non-windowed -- windows can't be moved or resized
+           freely. In theory "minimize" might still make sense, but for simplicity we
+           just hide everything but "close".
+      
+           (This is not called for in Win11's tablet mode, which _is_ windowed.)
+        */
+        :root[win10-tablet-mode] &:not(.titlebar-close) {
+          display: none;
+        }
+      
+        &:focus-visible {
+          outline: var(--focus-outline);
+          outline-offset: var(--focus-outline-inset);
+        }
+      
+        > .toolbarbutton-icon {
+          width: 12px;
+          height: 12px;
+      
+          &:-moz-locale-dir(rtl) {
+            transform: scaleX(-1);
+          }
+        }
+      }
+
+      .titlebar-button > .toolbarbutton-icon {
+        width: 12px;
+        height: 12px;
+      }
+
+      .titlebar-min {
+        list-style-image: url(chrome://browser/skin/window-controls/minimize.svg);
+      }
+
+      .titlebar-max {
+        list-style-image: url(chrome://browser/skin/window-controls/maximize.svg);
+      }
+
+      .titlebar-restore {
+        list-style-image: url(chrome://browser/skin/window-controls/restore.svg);
+      }
+
+      .titlebar-restore > .toolbarbutton-icon:-moz-locale-dir(rtl) {
+        transform: scaleX(-1);
+      }
+
+      .titlebar-close {
+        list-style-image: url(chrome://browser/skin/window-controls/close.svg);
+      }
+
+      :root[lwtheme-image] .titlebar-button {
+        -moz-context-properties: unset;
+      }
+      :root[lwtheme-image] .titlebar-min {
+        list-style-image: url(chrome://browser/skin/window-controls/minimize-themes.svg);
+      }
+      :root[lwtheme-image] .titlebar-max {
+        list-style-image: url(chrome://browser/skin/window-controls/maximize-themes.svg);
+      }
+      :root[lwtheme-image] .titlebar-restore {
+        list-style-image: url(chrome://browser/skin/window-controls/restore-themes.svg);
+      }
+      :root[lwtheme-image] .titlebar-close {
+        list-style-image: url(chrome://browser/skin/window-controls/close-themes.svg);
+      }
+
+      /* the 12px image renders a 10px icon, and the 10px upscaled gets rounded to 12.5, which
+       * rounds up to 13px, which makes the icon one pixel too big on 1.25dppx. Fix: */
+      @media (min-resolution: 1.20dppx) and (max-resolution: 1.45dppx) {
+        .titlebar-button > .toolbarbutton-icon {
+          width: 11.5px;
+          height: 11.5px;
+        }
+      }
+
+      /* 175% dpi should result in the same device pixel sizes as 150% dpi. */
+      @media (min-resolution: 1.70dppx) and (max-resolution: 1.95dppx) {
+        .titlebar-button {
+          padding-inline: 14.1px;
+        }
+
+        .titlebar-button > .toolbarbutton-icon {
+          width: 10.8px;
+          height: 10.8px;
+        }
+      }
+
+      /* 225% dpi should result in the same device pixel sizes as 200% dpi. */
+      @media (min-resolution: 2.20dppx) and (max-resolution: 2.45dppx) {
+        .titlebar-button {
+          padding-inline: 15.3333px;
+        }
+
+        .titlebar-button > .toolbarbutton-icon {
+          width: 10.8px;
+          height: 10.8px;
+        }
+      }
+
+      /* 275% dpi should result in the same device pixel sizes as 250% dpi. */
+      @media (min-resolution: 2.70dppx) and (max-resolution: 2.95dppx) {
+        /* NB: todo: this should also change padding on the buttons
+         * themselves, but without a device to test this on, it's
+         * impossible to know by how much. */
+        .titlebar-button > .toolbarbutton-icon {
+          width: 10.8px;
+          height: 10.8px;
+        }
+      }
+
+      @media (-moz-windows-default-theme) {
+        #main-menubar > menu[_moz-menuactive="true"] {
+          color: inherit;
+        }
+
+        #main-menubar > menu[_moz-menuactive="true"],
+        .titlebar-button:hover {
+          background-color: hsla(0,0%,0%,.12);
+        }
+        .titlebar-button:hover:active {
+          background-color: hsla(0,0%,0%,.22);
+        }
+
+        #toolbar-menubar[brighttext] > #menubar-items > #main-menubar > menu[_moz-menuactive="true"],
+        toolbar[brighttext] .titlebar-button:not(.titlebar-close):hover {
+          background-color: hsla(0,0%,100%,.22);
+        }
+        toolbar[brighttext] .titlebar-button:not(.titlebar-close):hover:active {
+          background-color: hsla(0,0%,100%,.32);
+        }
+
+        .titlebar-close:hover {
+          stroke: white;
+          background-color: hsl(355,86%,49%);
+        }
+        .titlebar-close:hover:active {
+          background-color: hsl(355,82%,69%);
+        }
+
+        .titlebar-button:not(:hover) > .toolbarbutton-icon:-moz-window-inactive {
+          opacity: 0.5;
+        }
+      }
+
+      @media not (-moz-windows-default-theme) {
+        .titlebar-button {
+          background-color: -moz-field;
+          stroke: ButtonText;
+        }
+        .titlebar-button:hover {
+          background-color: SelectedItem;
+          stroke: SelectedItemText;
+        }
+
+        .titlebar-min {
+          list-style-image: url(chrome://browser/skin/window-controls/minimize-highcontrast.svg);
+        }
+
+        .titlebar-max {
+          list-style-image: url(chrome://browser/skin/window-controls/maximize-highcontrast.svg);
+        }
+
+        .titlebar-restore {
+          list-style-image: url(chrome://browser/skin/window-controls/restore-highcontrast.svg);
+        }
+
+        .titlebar-close {
+          list-style-image: url(chrome://browser/skin/window-controls/close-highcontrast.svg);
+        }
+      }
     }
   }
-}
-
-.titlebar-button > .toolbarbutton-icon {
-  width: 12px;
-  height: 12px;
-}
-
-.titlebar-min {
-  list-style-image: url(chrome://browser/skin/window-controls/minimize.svg);
-}
-
-.titlebar-max {
-  list-style-image: url(chrome://browser/skin/window-controls/maximize.svg);
-}
-
-.titlebar-restore {
-  list-style-image: url(chrome://browser/skin/window-controls/restore.svg);
-}
 
-.titlebar-restore > .toolbarbutton-icon:-moz-locale-dir(rtl) {
-  transform: scaleX(-1);
-}
-
-.titlebar-close {
-  list-style-image: url(chrome://browser/skin/window-controls/close.svg);
-}
-
-:root[lwtheme-image] .titlebar-button {
-  -moz-context-properties: unset;
-}
-:root[lwtheme-image] .titlebar-min {
-  list-style-image: url(chrome://browser/skin/window-controls/minimize-themes.svg);
-}
-:root[lwtheme-image] .titlebar-max {
-  list-style-image: url(chrome://browser/skin/window-controls/maximize-themes.svg);
-}
-:root[lwtheme-image] .titlebar-restore {
-  list-style-image: url(chrome://browser/skin/window-controls/restore-themes.svg);
-}
-:root[lwtheme-image] .titlebar-close {
-  list-style-image: url(chrome://browser/skin/window-controls/close-themes.svg);
-}
+  @media (-moz-platform: windows-win7),
+         (-moz-platform: windows-win8) {
+    :root {
+      background-color: transparent;
+      appearance: auto;
+      -moz-default-appearance: -moz-win-borderless-glass;
+    }
 
-/* the 12px image renders a 10px icon, and the 10px upscaled gets rounded to 12.5, which
- * rounds up to 13px, which makes the icon one pixel too big on 1.25dppx. Fix: */
-@media (min-resolution: 1.20dppx) and (max-resolution: 1.45dppx) {
-  .titlebar-button > .toolbarbutton-icon {
-    width: 11.5px;
-    height: 11.5px;
-  }
-}
+    :root[sizemode="maximized"] .titlebar-buttonbox {
+      margin-inline-end: 3px;
+    }
 
-/* 175% dpi should result in the same device pixel sizes as 150% dpi. */
-@media (min-resolution: 1.70dppx) and (max-resolution: 1.95dppx) {
-  .titlebar-button {
-    padding-inline: 14.1px;
-  }
+    /* These should be hidden w/ glass enabled. Windows draws its own buttons. */
+    .titlebar-button {
+      display: none;
+    }
 
-  .titlebar-button > .toolbarbutton-icon {
-    width: 10.8px;
-    height: 10.8px;
+    /* The borders on the glass frame are ours, and inside #browser, and on
+     * win7 we want to make sure they are "glassy", so we can't use #browser
+     * as the exclude-glass container. We use #appcontent instead. */
+    #appcontent {
+      appearance: auto;
+      -moz-default-appearance: -moz-win-exclude-glass;
+    }
   }
-}
 
-/* 225% dpi should result in the same device pixel sizes as 200% dpi. */
-@media (min-resolution: 2.20dppx) and (max-resolution: 2.45dppx) {
-  .titlebar-button {
-    padding-inline: 15.3333px;
+  @media (-moz-platform: windows-win8) {
+    /* Artificially draw window borders that are covered by lwtheme, see bug 591930.
+     * Borders for win7 are below, win10 only needs something like this when
+     * drawing in the titlebar (-moz-windows-accent-color-in-titlebar). */
+    :root[lwtheme] #main-window[sizemode="normal"] #navigator-toolbox {
+      border-top: 1px solid var(--glass-shadow-color);
+    }
   }
 
-  .titlebar-button > .toolbarbutton-icon {
-    width: 10.8px;
-    height: 10.8px;
+  :root[darkwindowframe="true"]:not([lwtheme], :-moz-window-inactive) {
+    color: white;
   }
-}
 
-/* 275% dpi should result in the same device pixel sizes as 250% dpi. */
-@media (min-resolution: 2.70dppx) and (max-resolution: 2.95dppx) {
-  /* NB: todo: this should also change padding on the buttons
-   * themselves, but without a device to test this on, it's
-   * impossible to know by how much. */
-  .titlebar-button > .toolbarbutton-icon {
-    width: 10.8px;
-    height: 10.8px;
+  &:not([lwtheme]) #appcontent {
+    background-color: -moz-dialog;
   }
 }
 
-@media (-moz-windows-default-theme) {
-  #main-menubar > menu[_moz-menuactive="true"] {
-    color: inherit;
+@media (-moz-windows-glass) {
+  &:not([lwtheme]) #toolbar-menubar {
+    text-shadow: 0 0 .5em white, 0 0 .5em white, 0 1px 0 rgba(255,255,255,.4);
   }
 
-  #main-menubar > menu[_moz-menuactive="true"],
-  .titlebar-button:hover {
-    background-color: hsla(0,0%,0%,.12);
-  }
-  .titlebar-button:hover:active {
-    background-color: hsla(0,0%,0%,.22);
-  }
-
-  #toolbar-menubar[brighttext] > #menubar-items > #main-menubar > menu[_moz-menuactive="true"],
-  toolbar[brighttext] .titlebar-button:not(.titlebar-close):hover {
-    background-color: hsla(0,0%,100%,.22);
-  }
-  toolbar[brighttext] .titlebar-button:not(.titlebar-close):hover:active {
-    background-color: hsla(0,0%,100%,.32);
+  &:not([lwtheme]) #main-menubar:not(:-moz-window-inactive) {
+    background-color: rgba(255,255,255,.5);
+    color: black;
+    border-radius: 4px;
   }
 
-  .titlebar-close:hover {
-    stroke: white;
-    background-color: hsl(355,86%,49%);
-  }
-  .titlebar-close:hover:active {
-    background-color: hsl(355,82%,69%);
+  /* Artificially draw window borders that are covered by lwtheme, see bug 591930.
+   * We use a different border for win8, and this win10+ only needs this if
+   * drawing in the titlebar (-moz-windows-accent-color-in-titlebar). */
+  :root[lwtheme] #main-window[sizemode="normal"] #navigator-toolbox {
+    border-top: 1px solid var(--glass-active-border-color);
+    padding-top: 1px;
+    box-shadow: 0 1px 0 rgba(255,255,255,.6) inset;
   }
 
-  .titlebar-button:not(:hover) > .toolbarbutton-icon:-moz-window-inactive {
-    opacity: 0.5;
+  :root[lwtheme] #main-window[sizemode="normal"] #navigator-toolbox:-moz-window-inactive {
+    border-top-color: var(--glass-inactive-border-color);
   }
 }
 
-@media not (-moz-windows-default-theme) {
-  .titlebar-button {
-    background-color: -moz-field;
-    stroke: ButtonText;
-  }
-  .titlebar-button:hover {
-    background-color: SelectedItem;
-    stroke: SelectedItemText;
-  }
-
-  .titlebar-min {
-    list-style-image: url(chrome://browser/skin/window-controls/minimize-highcontrast.svg);
-  }
-
-  .titlebar-max {
-    list-style-image: url(chrome://browser/skin/window-controls/maximize-highcontrast.svg);
-  }
-
-  .titlebar-restore {
-    list-style-image: url(chrome://browser/skin/window-controls/restore-highcontrast.svg);
-  }
+/* Aero Basic */
+@media not (-moz-windows-compositor) {
+  @media (-moz-windows-default-theme) {
+    :root {
+      background-color: rgb(185,209,234);
+    }
+    :root:-moz-window-inactive {
+      background-color: rgb(215,228,242);
+    }
 
-  .titlebar-close {
-    list-style-image: url(chrome://browser/skin/window-controls/close-highcontrast.svg);
-  }
+    /* Render a window top border for lwthemes: */
+    :root[lwtheme] #main-window[tabsintitlebar][sizemode="normal"] #navigator-toolbox {
+      background-image: linear-gradient(to bottom,
+            var(--glass-active-border-color) 0, var(--glass-active-border-color) 1px,
+            rgba(255,255,255,.6) 1px, rgba(255,255,255,.6) 2px, transparent 2px);
+    }
 
-  :root[darkwindowframe="true"]:not(:-moz-window-inactive, [lwtheme]) {
-    color: white;
+    :root[lwtheme] #main-window[tabsintitlebar][sizemode="normal"] #navigator-toolbox:-moz-window-inactive {
+      background-image: linear-gradient(to bottom,
+            var(--glass-inactive-border-color) 0, var(--glass-inactive-border-color) 1px,
+            rgba(255,255,255,.6) 1px, rgba(255,255,255,.6) 2px, transparent 2px);
+    }
   }
 
-  &:not([lwtheme]) #appcontent {
-    background-color: -moz-dialog;
+  &:not([lwtheme]) #print-preview-toolbar {
+    appearance: auto;
+    -moz-default-appearance: -moz-win-browsertabbar-toolbox;
   }
 }
diff --git a/browser/themes/windows/customizableui/panelUI.css b/browser/themes/windows/customizableui/panelUI.css
index 2eb4775aa10e..af8a210b552e 100644
--- a/browser/themes/windows/customizableui/panelUI.css
+++ b/browser/themes/windows/customizableui/panelUI.css
@@ -14,3 +14,13 @@ menupopup::part(drop-indicator) {
   /* To account for the shadow margin + border of the panel */
   margin-inline-start: 5px;
 }
+
+@media not (-moz-windows-non-native-menus) {
+  .toolbar-menupopup {
+    --panel-shadow-margin: 4px;
+  }
+
+  .toolbar-menupopup menupopup {
+    margin-inline-start: var(--nested-margin);
+  }
+}
diff --git a/editor/reftests/xul/input.css b/editor/reftests/xul/input.css
index cec3f94d3be6..17432527b2ec 100644
--- a/editor/reftests/xul/input.css
+++ b/editor/reftests/xul/input.css
@@ -20,6 +20,12 @@ html|input.empty {
   color: graytext;
 }
 
+@media (-moz-windows-default-theme) and (-moz-platform: windows-win7) {
+  :root:not(.winxp) html|input.empty {
+    font-style: italic;
+  }
+}
+
 html|input.num {
   text-align: end;
 }
diff --git a/layout/style/GeckoBindings.h b/layout/style/GeckoBindings.h
index c6f58518e079..9e5ffc264bbb 100644
--- a/layout/style/GeckoBindings.h
+++ b/layout/style/GeckoBindings.h
@@ -612,6 +612,8 @@ bool Gecko_IsDOMWorkerThread();
 mozilla::StyleDisplayMode Gecko_MediaFeatures_GetDisplayMode(
     const mozilla::dom::Document*);
 
+bool Gecko_MediaFeatures_WindowsNonNativeMenus(const mozilla::dom::Document*);
+
 bool Gecko_MediaFeatures_UseOverlayScrollbars(const mozilla::dom::Document*);
 int32_t Gecko_MediaFeatures_GetColorDepth(const mozilla::dom::Document*);
 int32_t Gecko_MediaFeatures_GetMonochromeBitsPerPixel(
diff --git a/layout/style/nsMediaFeatures.cpp b/layout/style/nsMediaFeatures.cpp
index 5e4fe65abcc3..581b6da29ba6 100644
--- a/layout/style/nsMediaFeatures.cpp
+++ b/layout/style/nsMediaFeatures.cpp
@@ -94,6 +94,11 @@ static nsSize GetDeviceSize(const Document& aDocument) {
   return pc->DeviceContext()->GetDeviceSurfaceDimensions();
 }
 
+bool Gecko_MediaFeatures_WindowsNonNativeMenus(const Document* aDocument) {
+  return LookAndFeel::WindowsNonNativeMenusEnabled() ||
+         aDocument->ShouldAvoidNativeTheme();
+}
+
 bool Gecko_MediaFeatures_IsResourceDocument(const Document* aDocument) {
   return aDocument->IsResourceDoc();
 }
@@ -243,6 +248,17 @@ bool Gecko_MediaFeatures_MatchesPlatform(StylePlatform aPlatform) {
 #if defined(XP_WIN)
     case StylePlatform::Windows:
       return true;
+    case StylePlatform::WindowsWin10:
+    case StylePlatform::WindowsWin7:
+    case StylePlatform::WindowsWin8: {
+      if (IsWin10OrLater()) {
+        return aPlatform == StylePlatform::WindowsWin10;
+      }
+      if (IsWin8OrLater()) {
+        return aPlatform == StylePlatform::WindowsWin8;
+      }
+      return aPlatform == StylePlatform::WindowsWin7;
+    }
 #elif defined(ANDROID)
     case StylePlatform::Android:
       return true;
diff --git a/layout/style/test/chrome/bug418986-2.js b/layout/style/test/chrome/bug418986-2.js
index b4d4002dd700..99ca03011605 100644
--- a/layout/style/test/chrome/bug418986-2.js
+++ b/layout/style/test/chrome/bug418986-2.js
@@ -56,7 +56,9 @@ var suppressed_toggles = [
   "-moz-scrollbar-end-forward",
   "-moz-scrollbar-start-backward",
   "-moz-scrollbar-start-forward",
+  "-moz-windows-compositor",
   "-moz-windows-default-theme",
+  "-moz-windows-glass",
   "-moz-gtk-csd-available",
   "-moz-gtk-csd-minimize-button",
   "-moz-gtk-csd-maximize-button",
@@ -69,6 +71,12 @@ var toggles_enabled_in_content = [];
 // Read the current OS.
 var OS = SpecialPowers.Services.appinfo.OS;
 
+// If we are using Windows, add an extra toggle only
+// available on that OS.
+if (OS === "WINNT") {
+  suppressed_toggles.push("-moz-windows-classic");
+}
+
 // __keyValMatches(key, val)__.
 // Runs a media query and returns true if key matches to val.
 var keyValMatches = (key, val) =>
diff --git a/layout/style/test/chrome/chrome-only-media-queries.js b/layout/style/test/chrome/chrome-only-media-queries.js
index f1f483008454..ae71857d6601 100644
--- a/layout/style/test/chrome/chrome-only-media-queries.js
+++ b/layout/style/test/chrome/chrome-only-media-queries.js
@@ -7,11 +7,17 @@ const CHROME_ONLY_TOGGLES = [
   "-moz-scrollbar-end-backward",
   "-moz-scrollbar-end-forward",
   "-moz-overlay-scrollbars",
+  "-moz-windows-classic",
+  "-moz-windows-compositor",
   "-moz-windows-default-theme",
   "-moz-mac-graphite-theme",
   "-moz-mac-big-sur-theme",
   "-moz-menubar-drag",
   "-moz-windows-accent-color-in-titlebar",
+  "-moz-windows-compositor",
+  "-moz-windows-classic",
+  "-moz-windows-glass",
+  "-moz-windows-non-native-menus",
   "-moz-swipe-animation-enabled",
   "-moz-gtk-csd-available",
   "-moz-gtk-csd-transparency-available",
@@ -28,6 +34,9 @@ const CHROME_ONLY_QUERIES = [
   "(-moz-platform: windows)",
   "(-moz-platform: macos)",
   "(-moz-platform: android)",
+  "(-moz-platform: windows-win7)",
+  "(-moz-platform: windows-win8)",
+  "(-moz-platform: windows-win10)",
   "(-moz-content-prefers-color-scheme: dark)",
   "(-moz-content-prefers-color-scheme: light)",
   "(-moz-gtk-theme-family: unknown)",
diff --git a/servo/components/style/gecko/media_features.rs b/servo/components/style/gecko/media_features.rs
index 2e430aee3052..8f049ce88ccf 100644
--- a/servo/components/style/gecko/media_features.rs
+++ b/servo/components/style/gecko/media_features.rs
@@ -572,6 +572,12 @@ pub enum Platform {
     Macos,
     /// Matches any Windows version.
     Windows,
+    /// Matches only Windows 7.
+    WindowsWin7,
+    /// Matches only Windows 8.
+    WindowsWin8,
+    /// Matches windows 10 and actually matches windows 11 too, as of right now.
+    WindowsWin10,
 }
 
 fn eval_moz_platform(_: &Context, query_value: Option<Platform>) -> bool {
@@ -608,6 +614,10 @@ fn eval_scripting(context: &Context, query_value: Option<Scripting>) -> bool {
     }
 }
 
+fn eval_moz_windows_non_native_menus(context: &Context) -> bool {
+    unsafe { bindings::Gecko_MediaFeatures_WindowsNonNativeMenus(context.device().document()) }
+}
+
 fn eval_moz_overlay_scrollbars(context: &Context) -> bool {
     unsafe { bindings::Gecko_MediaFeatures_UseOverlayScrollbars(context.device().document()) }
 }
@@ -684,7 +694,7 @@ macro_rules! bool_pref_feature {
 /// to support new types in these entries and (2) ensuring that either
 /// nsPresContext::MediaFeatureValuesChanged is called when the value that
 /// would be returned by the evaluator function could change.
-pub static MEDIA_FEATURES: [QueryFeatureDescription; 63] = [
+pub static MEDIA_FEATURES: [QueryFeatureDescription; 67] = [
     feature!(
         atom!("width"),
         AllowsRanges::Yes,
@@ -948,6 +958,12 @@ pub static MEDIA_FEATURES: [QueryFeatureDescription; 64] = [
         Evaluator::BoolInteger(eval_moz_print_preview),
         FeatureFlags::CHROME_AND_UA_ONLY,
     ),
+    feature!(
+        atom!("-moz-windows-non-native-menus"),
+        AllowsRanges::No,
+        Evaluator::BoolInteger(eval_moz_windows_non_native_menus),
+        FeatureFlags::CHROME_AND_UA_ONLY,
+    ),
     feature!(
         atom!("-moz-overlay-scrollbars"),
         AllowsRanges::No,
@@ -983,6 +999,9 @@ pub static MEDIA_FEATURES: [QueryFeatureDescription; 64] = [
         atom!("-moz-windows-accent-color-in-titlebar"),
         WindowsAccentColorInTitlebar
     ),
+    lnf_int_feature!(atom!("-moz-windows-compositor"), DWMCompositor),
+    lnf_int_feature!(atom!("-moz-windows-classic"), WindowsClassic),
+    lnf_int_feature!(atom!("-moz-windows-glass"), WindowsGlass),
     lnf_int_feature!(atom!("-moz-windows-mica"), WindowsMica),
     lnf_int_feature!(atom!("-moz-swipe-animation-enabled"), SwipeAnimationEnabled),
     lnf_int_feature!(atom!("-moz-gtk-csd-available"), GTKCSDAvailable),
diff --git a/toolkit/themes/shared/checkbox.css b/toolkit/themes/shared/checkbox.css
index 26c06fe3d3b9..725c995a4d41 100644
--- a/toolkit/themes/shared/checkbox.css
+++ b/toolkit/themes/shared/checkbox.css
@@ -119,6 +119,13 @@ checkbox:not([native]):focus-visible > .checkbox-check {
   margin: 1px 0;
 }
 
+  @media (-moz-windows-classic) {
+    checkbox[native][disabled="true"] {
+      color: ThreeDShadow;
+      text-shadow: 1px 1px ThreeDHighlight;
+    }
+  }
+
 /* ::::: checkmark image ::::: */
 
 .checkbox-check {
diff --git a/toolkit/themes/shared/tree.css b/toolkit/themes/shared/tree.css
index 3a3e652d6e34..33a52cacaeac 100644
--- a/toolkit/themes/shared/tree.css
+++ b/toolkit/themes/shared/tree.css
@@ -271,6 +271,27 @@ html|input.tree-input {
       color: -moz-ButtonActiveText;
     }
   }
+
+  @media (-moz-windows-classic) {
+    treecol,
+    .tree-columnpicker-button {
+      border: 1px solid;
+      border-top-color: ThreeDHighlight;
+      border-inline-end-color: ThreeDShadow;
+      border-bottom-color: ThreeDShadow;
+      border-inline-start-color: ThreeDHighlight;
+      box-shadow: none;
+      background-color: -moz-Dialog;
+    }
+
+    treecol:where(:hover:active),
+    .tree-columnpicker-button:where(:hover:active) {
+      border-top-color: ThreeDShadow;
+      border-inline-end-color: ThreeDHighlight;
+      border-bottom-color: ThreeDHighlight;
+      border-inline-start-color: ThreeDShadow;
+    }
+  }
 }
 
 @media (-moz-platform: macos) and (not (prefers-contrast)) {
diff --git a/toolkit/themes/windows/global/button.css b/toolkit/themes/windows/global/button.css
index 8f5fb1405962..14a6be2e9356 100644
--- a/toolkit/themes/windows/global/button.css
+++ b/toolkit/themes/windows/global/button.css
@@ -69,6 +69,13 @@ button:where([disabled="true"]) {
   text-align: center;
 }
 
+@media (-moz-windows-classic) {
+  button:where([disabled="true"]) {
+    color: ThreeDShadow;
+    text-shadow: 1px 1px ThreeDHighlight;
+  }
+}
+
 /* ::::: menu buttons ::::: */
 
 .button-menu-dropmarker {
diff --git a/toolkit/themes/shared/popup.css b/toolkit/themes/shared/popup.css
index dbf12347a68e..54ffa2ec8ebe 100644
--- a/toolkit/themes/shared/popup.css
+++ b/toolkit/themes/shared/popup.css
@@ -23,23 +23,43 @@ panel {
   }
 }
 
-menupopup {
-  /* Also apply the padding in the inline axis for menus */
-  --panel-padding: var(--panel-padding-block);
-
-  @media (-moz-platform: windows) {
-    > menu,
-    > menuitem {
-      padding-block: 0.5em;
-      padding-inline-start: 1em;
-    }
-  }
-
-  > menu > menupopup {
-    /* Vertically align nested menupopups: the shadow plus the top padding plus top border */
-    margin-top: calc(-1 * (var(--panel-shadow-margin) + var(--panel-padding-block) + 1px));
-  }
-}
+@media not (-moz-windows-non-native-menus) {
+  menupopup {
+    appearance: auto;
+    -moz-default-appearance: menupopup;
+
+    /* Native menus are always light */
+    color-scheme: light !important;
+
+    /* We set the background-color / border here so that it doesn't interfere with native styling. */
+    background-color: Menu;
+    border: 1px solid ThreeDShadow;
+    --panel-background: transparent;
+    --panel-border-color: transparent;
+    --nested-margin: -3px;
+    --panel-shadow-margin: 0px;
+  }
+}
+
+@media (-moz-windows-non-native-menus) {
+  menupopup {
+    /* Also apply the padding in the inline axis for menus */
+    --panel-padding: var(--panel-padding-block);
+  
+    @media (-moz-platform: windows) {
+      > menu,
+      > menuitem {
+        padding-block: 0.5em;
+        padding-inline-start: 1em;
+      }
+    }
+  
+    > menu > menupopup {
+      /* Vertically align nested menupopups: the shadow plus the top padding plus top border */
+      margin-top: calc(-1 * (var(--panel-shadow-margin) + var(--panel-padding-block) + 1px));
+    }
+  }
+}
 
 /* Rules for popups associated with menulists */
 menulist > menupopup {
@@ -90,3 +113,13 @@ menulist > menupopup {
     }
   }
 }
+
+@media not (-moz-windows-non-native-menus) {
+  /* For Win10, the popup itself needs to have a transparent background because
+     otherwise the background color would appear behind the drop shadow. */
+  menulist > menupopup {
+    color: FieldText;
+    --panel-background: Field;
+    --panel-border-color: ThreeDShadow;
+  }
+}
diff --git a/toolkit/themes/shared/radio.css b/toolkit/themes/shared/radio.css
index 691b03e2b2b1..56c792fc49ed 100644
--- a/toolkit/themes/shared/radio.css
+++ b/toolkit/themes/shared/radio.css
@@ -52,3 +52,10 @@ radiogroup:focus-visible > radio[focused="true"] > .radio-label-box {
     margin-inline-end: 2px;
   }
 }
+
+@media (-moz-windows-classic) {
+  radio[disabled="true"] {
+    color: ThreeDShadow;
+    text-shadow: 1px 1px ThreeDHighlight;
+  }
+}
diff --git a/toolkit/themes/windows/global/richlistbox.css b/toolkit/themes/windows/global/richlistbox.css
index e8235d11969a..7aff813299bf 100644
--- a/toolkit/themes/windows/global/richlistbox.css
+++ b/toolkit/themes/windows/global/richlistbox.css
@@ -114,6 +114,37 @@ richlistbox.theme-listbox > richlistitem > label {
     background-color: var(--listitem-selectedFocusCurrentBackground);
     outline: none;
   }
+
+  @media (-moz-platform: windows-win7) {
+    richlistbox.theme-listbox > richlistitem {
+      --listitem-selectedBottomBorder: var(--listitem-selectedColor);
+      --listitem-selectedBackground: rgba(190,190,190,.15);
+      --listitem-selectedImage: linear-gradient(rgba(190,190,190,.1), rgba(190,190,190,.4));
+      --listitem-selectedCurrentBorder: rgb(125,162,206);
+      --listitem-selectedFocusColor: rgb(132,172,221);
+      --listitem-selectedFocusBottomBorder: var(--listitem-selectedFocusColor);
+      --listitem-selectedFocusBackground: rgba(131,183,249,.02);
+      --listitem-selectedFocusImage: linear-gradient(rgba(131,183,249,.16), rgba(131,183,249,.375));
+      --listitem-selectedFocusCurrentBackground: rgba(131,183,249,.15);
+
+      border-radius: 3px;
+      box-shadow: inset 0 0 0 1px rgba(255,255,255,.4), inset 0 -1px 0 1px rgba(255,255,255,.2);
+    }
+  }
+
+  @media (-moz-platform: windows-win8) {
+    richlistbox.theme-listbox > richlistitem {
+      --listitem-selectedBottomBorder: var(--listitem-selectedColor);
+      --listitem-selectedBackground: rgba(190,190,190,.15);
+      --listitem-selectedImage: linear-gradient(rgba(190,190,190,.4), rgba(190,190,190,.4));
+      --listitem-selectedCurrentBorder: rgb(125,162,206);
+      --listitem-selectedFocusColor: rgb(132,172,221);
+      --listitem-selectedFocusBottomBorder: var(--listitem-selectedFocusColor);
+      --listitem-selectedFocusBackground: rgba(131,183,249,.02);
+      --listitem-selectedFocusImage: linear-gradient(rgba(131,183,249,.375), rgba(131,183,249,.375));
+      --listitem-selectedFocusCurrentBackground: rgba(131,183,249,.15);
+    }
+  }
 }
 
 listheader {
diff --git a/toolkit/themes/shared/toolbarbutton.css b/toolkit/themes/shared/toolbarbutton.css
index 4a7c89d8df81..33ed1acf25f4 100644
--- a/toolkit/themes/shared/toolbarbutton.css
+++ b/toolkit/themes/shared/toolbarbutton.css
@@ -29,6 +29,17 @@ toolbarbutton:where([disabled="true"]) {
   }
 }
 
+@media (-moz-windows-classic) {
+  @media not (prefers-contrast) {
+    toolbarbutton:where([disabled="true"]) {
+      text-shadow: 1px 1px ThreeDHighlight;
+    }
+  }
+  toolbarbutton:where([disabled="true"]) {
+    color: ThreeDShadow;
+  }
+}
+
 .toolbarbutton-text {
   margin: 0;
   padding: 0;
diff --git a/widget/LookAndFeel.h b/widget/LookAndFeel.h
index c3006d96bc9c..12ff7bbae829 100644
--- a/widget/LookAndFeel.h
+++ b/widget/LookAndFeel.h
@@ -117,6 +117,32 @@ class LookAndFeel {
      */
     WindowsDefaultTheme,
 
+    /*
+     * A Boolean value to determine whether the DWM compositor is being used
+     *
+     * This metric is not used on non-Windows platforms. These platforms
+     * should return NS_ERROR_NOT_IMPLEMENTED when queried for this metric.
+     */
+    DWMCompositor,
+
+    /*
+     * A Boolean value to determine whether Windows is themed (Classic vs.
+     * uxtheme)
+     *
+     * This is Windows-specific and is not implemented on other platforms
+     * (will return the default of NS_ERROR_FAILURE).
+     */
+    WindowsClassic,
+
+    /*
+     * A Boolean value to determine whether the current Windows desktop theme
+     * supports Aero Glass.
+     *
+     * This is Windows-specific and is not implemented on other platforms
+     * (will return the default of NS_ERROR_FAILURE).
+     */
+    WindowsGlass,
+
     /*
      * A Boolean value to determine whether the Mac graphite theme is
      * being used.
@@ -383,6 +409,8 @@ class LookAndFeel {
     Pen = 1 << 2,
   };
 
+  static bool WindowsNonNativeMenusEnabled();
+
   static ColorScheme SystemColorScheme() {
     return GetInt(IntID::SystemUsesDarkTheme) ? ColorScheme::Dark
                                               : ColorScheme::Light;
diff --git a/widget/headless/HeadlessLookAndFeelGTK.cpp b/widget/headless/HeadlessLookAndFeelGTK.cpp
index 1c41950e6bb5..2017aa26577f 100644
--- a/widget/headless/HeadlessLookAndFeelGTK.cpp
+++ b/widget/headless/HeadlessLookAndFeelGTK.cpp
@@ -95,9 +95,15 @@ nsresult HeadlessLookAndFeel::NativeGetInt(IntID aID, int32_t& aResult) {
       break;
     case IntID::WindowsAccentColorInTitlebar:
     case IntID::WindowsDefaultTheme:
+    case IntID::DWMCompositor:
       aResult = 0;
       res = NS_ERROR_NOT_IMPLEMENTED;
       break;
+    case IntID::WindowsClassic:
+    case IntID::WindowsGlass:
+      aResult = 0;
+      res = NS_ERROR_FAILURE;
+      break;
     case IntID::AlertNotificationOrigin:
       aResult = NS_ALERT_TOP;
       break;
diff --git a/widget/nsXPLookAndFeel.cpp b/widget/nsXPLookAndFeel.cpp
index 3f4f03c9b35c..84e57a058524 100644
--- a/widget/nsXPLookAndFeel.cpp
+++ b/widget/nsXPLookAndFeel.cpp
@@ -150,6 +150,9 @@ static const char sIntPrefs[][45] = {
     "ui.chosenMenuItemsShouldBlink",
     "ui.windowsAccentColorInTitlebar",
     "ui.windowsDefaultTheme",
+    "ui.dwmCompositor",
+    "ui.windowsClassic",
+    "ui.windowsGlass",
     "ui.macGraphiteTheme",
     "ui.windowsMica",
     "ui.macBigSurTheme",
@@ -484,11 +487,27 @@ void nsXPLookAndFeel::OnPrefChanged(const char* aPref, void* aClosure) {
   }
 }
 
+bool LookAndFeel::WindowsNonNativeMenusEnabled() {
+  switch (StaticPrefs::browser_display_windows_non_native_menus()) {
+    case 0:
+      return false;
+    case 1:
+      return true;
+    default:
+#ifdef XP_WIN
+      return IsWin10OrLater();
+#else
+      return false;
+#endif
+  }
+}
+
 static constexpr struct {
   nsLiteralCString mName;
   widget::ThemeChangeKind mChangeKind =
       widget::ThemeChangeKind::MediaQueriesOnly;
 } kMediaQueryPrefs[] = {
+    {"browser.display.windows.non_native_menus"_ns},
     // Affects whether standins are used for the accent color.
     {"widget.non-native-theme.use-theme-accent"_ns,
      widget::ThemeChangeKind::Style},
diff --git a/widget/windows/nsLookAndFeel.cpp b/widget/windows/nsLookAndFeel.cpp
index d85b5e8a4d47..805cdcf96509 100644
--- a/widget/windows/nsLookAndFeel.cpp
+++ b/widget/windows/nsLookAndFeel.cpp
@@ -122,6 +122,9 @@ void nsLookAndFeel::RefreshImpl() {
 }
 
 static bool UseNonNativeMenuColors(ColorScheme aScheme) {
+  if (!LookAndFeel::WindowsNonNativeMenusEnabled()) {
+    return false;
+  }
   return LookAndFeel::GetInt(LookAndFeel::IntID::WindowsDefaultTheme) ||
          aScheme == ColorScheme::Dark;
 }
@@ -153,6 +156,9 @@ nsresult nsLookAndFeel::NativeGetColor(ColorID aID, ColorScheme aScheme,
         if (UseNonNativeMenuColors(aScheme)) {
           return false;
         }
+        if (!nsUXThemeData::IsAppThemed()) {
+          return nsUXThemeData::AreFlatMenusEnabled();
+        }
         [[fallthrough]];
       case ColorID::MozMenuhovertext:
         if (UseNonNativeMenuColors(aScheme)) {
@@ -257,6 +263,10 @@ nsresult nsLookAndFeel::NativeGetColor(ColorID aID, ColorScheme aScheme,
         aColor = kNonNativeMenuText;
         return NS_OK;
       }
+      if (!nsUXThemeData::IsAppThemed()) {
+        idx = COLOR_MENUTEXT;
+        break;
+      }
       [[fallthrough]];
     case ColorID::MozMenuhovertext:
       if (UseNonNativeMenuColors(aScheme)) {
@@ -492,12 +502,23 @@ nsresult nsLookAndFeel::NativeGetInt(IntID aID, int32_t& aResult) {
     case IntID::TreeScrollLinesMax:
       aResult = 3;
       break;
+    case IntID::WindowsClassic:
+      aResult = !nsUXThemeData::IsAppThemed();
+      break;
     case IntID::WindowsDefaultTheme:
       aResult = nsUXThemeData::IsDefaultWindowTheme();
       break;
+    case IntID::DWMCompositor:
+      aResult = gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled();
+      break;
     case IntID::WindowsAccentColorInTitlebar:
       aResult = mTitlebarColors.mUseAccent;
       break;
+    case IntID::WindowsGlass:
+      // Aero Glass is only available prior to Windows 8 when DWM is used.
+      aResult = (gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled() &&
+                 !IsWin8OrLater());
+      break;
     case IntID::WindowsMica:
       aResult = WinUtils::MicaEnabled();
       break;
@@ -895,12 +916,14 @@ void nsLookAndFeel::EnsureInit() {
   }
   mInitialized = true;
 
-  mColorMenuHoverText =
-      ::GetColorFromTheme(eUXMenu, MENU_POPUPITEM, MPI_HOT, TMT_TEXTCOLOR);
-  mColorMediaText =
-      ::GetColorFromTheme(eUXMediaToolbar, TP_BUTTON, TS_NORMAL, TMT_TEXTCOLOR);
-  mColorCommunicationsText = ::GetColorFromTheme(
-      eUXCommunicationsToolbar, TP_BUTTON, TS_NORMAL, TMT_TEXTCOLOR);
+  if (nsUXThemeData::IsAppThemed()) {
+    mColorMenuHoverText =
+        ::GetColorFromTheme(eUXMenu, MENU_POPUPITEM, MPI_HOT, TMT_TEXTCOLOR);
+    mColorMediaText = ::GetColorFromTheme(eUXMediaToolbar, TP_BUTTON, TS_NORMAL,
+                                          TMT_TEXTCOLOR);
+    mColorCommunicationsText = ::GetColorFromTheme(
+        eUXCommunicationsToolbar, TP_BUTTON, TS_NORMAL, TMT_TEXTCOLOR);
+  }
 
   // Fill out the sys color table.
   for (int i = SYS_COLOR_MIN; i <= SYS_COLOR_MAX; ++i) {
diff --git a/widget/windows/nsNativeThemeWin.cpp b/widget/windows/nsNativeThemeWin.cpp
index 0b495540c4ab..2d19910f3e2d 100644
--- a/widget/windows/nsNativeThemeWin.cpp
+++ b/widget/windows/nsNativeThemeWin.cpp
@@ -350,7 +350,11 @@ static CaptionButtonPadding buttonData[3] = {
 // Adds "hot" caption button padding to minimum widget size.
 static void AddPaddingRect(LayoutDeviceIntSize* aSize, CaptionButton button) {
   if (!aSize) return;
-  RECT offset = buttonData[CAPTION_BASIC].hotPadding[button];
+  RECT offset;
+  if (!nsUXThemeData::IsAppThemed())
+    offset = buttonData[CAPTION_CLASSIC].hotPadding[button];
+  else
+    offset = buttonData[CAPTION_BASIC].hotPadding[button];
   aSize->width += offset.left + offset.right;
   aSize->height += offset.top + offset.bottom;
 }
@@ -358,7 +362,11 @@ static void AddPaddingRect(LayoutDeviceIntSize* aSize, CaptionButton button) {
 // If we've added padding to the minimum widget size, offset
 // the area we draw into to compensate.
 static void OffsetBackgroundRect(RECT& rect, CaptionButton button) {
-  RECT offset = buttonData[CAPTION_BASIC].hotPadding[button];
+  RECT offset;
+  if (!nsUXThemeData::IsAppThemed())
+    offset = buttonData[CAPTION_CLASSIC].hotPadding[button];
+  else
+    offset = buttonData[CAPTION_BASIC].hotPadding[button];
   rect.left += offset.left;
   rect.top += offset.top;
   rect.right -= offset.right;
@@ -1358,29 +1366,31 @@ nsNativeThemeWin::DrawWidgetBackground(gfxContext* aContext, nsIFrame* aFrame,
                                        aDirtyRect);
 
   // ^^ without the right sdk, assume xp theming and fall through.
-  switch (aAppearance) {
-    case StyleAppearance::MozWindowTitlebar:
-    case StyleAppearance::MozWindowTitlebarMaximized:
-      // Nothing to draw, these areas are glass. Minimum dimensions
-      // should be set, so xul content should be laid out correctly.
-      return NS_OK;
-    case StyleAppearance::MozWindowButtonClose:
-    case StyleAppearance::MozWindowButtonMinimize:
-    case StyleAppearance::MozWindowButtonMaximize:
-    case StyleAppearance::MozWindowButtonRestore:
-      // Not conventional bitmaps, can't be retrieved. If we fall
-      // through here and call the theme library we'll get aero
-      // basic bitmaps.
-      return NS_OK;
-    case StyleAppearance::MozWinBorderlessGlass:
-      // Nothing to draw, this is the glass background.
-      return NS_OK;
-    case StyleAppearance::MozWindowButtonBox:
-    case StyleAppearance::MozWindowButtonBoxMaximized:
-      // We handle these through nsIWidget::UpdateThemeGeometries
-      return NS_OK;
-    default:
-      break;
+  if (gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled()) {
+    switch (aAppearance) {
+      case StyleAppearance::MozWindowTitlebar:
+      case StyleAppearance::MozWindowTitlebarMaximized:
+        // Nothing to draw, these areas are glass. Minimum dimensions
+        // should be set, so xul content should be layed out correctly.
+        return NS_OK;
+      case StyleAppearance::MozWindowButtonClose:
+      case StyleAppearance::MozWindowButtonMinimize:
+      case StyleAppearance::MozWindowButtonMaximize:
+      case StyleAppearance::MozWindowButtonRestore:
+        // Not conventional bitmaps, can't be retrieved. If we fall
+        // through here and call the theme library we'll get aero
+        // basic bitmaps.
+        return NS_OK;
+      case StyleAppearance::MozWinBorderlessGlass:
+        // Nothing to draw, this is the glass background.
+        return NS_OK;
+      case StyleAppearance::MozWindowButtonBox:
+      case StyleAppearance::MozWindowButtonBoxMaximized:
+        // We handle these through nsIWidget::UpdateThemeGeometries
+        return NS_OK;
+      default:
+        break;
+    }
   }
 
   int32_t part, state;
@@ -2103,16 +2113,65 @@ LayoutDeviceIntSize nsNativeThemeWin::GetMinimumWidgetSize(
       }
       break;
 
+    case StyleAppearance::MozWindowButtonMaximize:
+    case StyleAppearance::MozWindowButtonRestore: {
+      // The only way to get accurate titlebar button info is to query a
+      // window w/buttons when it's visible. nsWindow takes care of this and
+      // stores that info in nsUXThemeData.
+      SIZE sz = nsUXThemeData::GetCommandButtonMetrics(CMDBUTTONIDX_RESTORE);
+      LayoutDeviceIntSize result(sz.cx, sz.cy);
+      AddPaddingRect(&result, CAPTIONBUTTON_RESTORE);
+      return result;
+    }
+
+    case StyleAppearance::MozWindowButtonMinimize: {
+      SIZE sz = nsUXThemeData::GetCommandButtonMetrics(CMDBUTTONIDX_MINIMIZE);
+      LayoutDeviceIntSize result(sz.cx, sz.cy);
+      AddPaddingRect(&result, CAPTIONBUTTON_MINIMIZE);
+      return result;
+    }
+
+    case StyleAppearance::MozWindowButtonClose: {
+      SIZE sz = nsUXThemeData::GetCommandButtonMetrics(CMDBUTTONIDX_CLOSE);
+      LayoutDeviceIntSize result(sz.cx, sz.cy);
+      AddPaddingRect(&result, CAPTIONBUTTON_CLOSE);
+      return result;
+    }
+
     case StyleAppearance::MozWindowTitlebar:
     case StyleAppearance::MozWindowTitlebarMaximized: {
       LayoutDeviceIntSize result;
       result.height = GetSystemMetrics(SM_CYCAPTION);
       result.height += GetSystemMetrics(SM_CYFRAME);
       result.height += GetSystemMetrics(SM_CXPADDEDBORDER);
-      ScaleForFrameDPI(&result, aFrame);
+      // On Win8.1, we don't want this scaling, because Windows doesn't scale
+      // the non-client area of the window, and we can end up with ugly overlap
+      // of the window frame controls into the tab bar or content area. But on
+      // Win10, we render the window controls ourselves, and the result looks
+      // better if we do apply this scaling (particularly with themes such as
+      // DevEdition; see bug 1267636).
+      if (IsWin10OrLater()) {
+        ScaleForFrameDPI(&result, aFrame);
+      }
       return result;
     }
 
+    case StyleAppearance::MozWindowButtonBox:
+    case StyleAppearance::MozWindowButtonBoxMaximized: {
+      if (gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled()) {
+        SIZE sz = nsUXThemeData::GetCommandButtonBoxMetrics();
+        LayoutDeviceIntSize result(sz.cx,
+                                   sz.cy - GetSystemMetrics(SM_CYFRAME) -
+                                       GetSystemMetrics(SM_CXPADDEDBORDER));
+        if (aAppearance == StyleAppearance::MozWindowButtonBoxMaximized) {
+          result.width += 1;
+          result.height -= 2;
+        }
+        return result;
+      }
+      break;
+    }
+
     default:
       break;
   }
@@ -2329,6 +2388,9 @@ bool nsNativeThemeWin::ClassicThemeSupportsWidget(nsIFrame* aFrame,
   switch (aAppearance) {
     case StyleAppearance::Menubar:
     case StyleAppearance::Menupopup:
+      // Classic non-flat menus are handled almost entirely through CSS.
+      if (!nsUXThemeData::AreFlatMenusEnabled()) return false;
+      [[fallthrough]];
     case StyleAppearance::Button:
     case StyleAppearance::NumberInput:
     case StyleAppearance::PasswordInput:
@@ -2422,8 +2484,14 @@ bool nsNativeThemeWin::ClassicGetWidgetPadding(nsDeviceContext* aContext,
         return false;
 
       if (part == 1) {  // top-level menu
-        (*aResult).top = (*aResult).bottom = (*aResult).left =
-            (*aResult).right = 2;
+        if (nsUXThemeData::AreFlatMenusEnabled() || !(state & DFCS_PUSHED)) {
+          (*aResult).top = (*aResult).bottom = (*aResult).left =
+              (*aResult).right = 2;
+        } else {
+          // make top-level menus look sunken when pushed in the Classic look
+          (*aResult).top = (*aResult).left = 3;
+          (*aResult).bottom = (*aResult).right = 1;
+        }
       } else {
         (*aResult).top = 0;
         (*aResult).bottom = (*aResult).left = (*aResult).right = 2;
@@ -2866,6 +2934,51 @@ static void DrawTab(HDC hdc, const RECT& R, int32_t aPosition, bool aSelected,
   if (aDrawRight) ::DrawEdge(hdc, &shadeRect, EDGE_RAISED, BF_SOFT | shadeFlag);
 }
 
+static void DrawMenuImage(HDC hdc, const RECT& rc, int32_t aComponent,
+                          uint32_t aColor) {
+  // This procedure creates a memory bitmap to contain the check mark, draws
+  // it into the bitmap (it is a mask image), then composes it onto the menu
+  // item in appropriate colors.
+  HDC hMemoryDC = ::CreateCompatibleDC(hdc);
+  if (hMemoryDC) {
+    // XXXjgr We should ideally be caching these, but we wont be notified when
+    // they change currently, so we can't do so easily. Same for the bitmap.
+    int checkW = ::GetSystemMetrics(SM_CXMENUCHECK);
+    int checkH = ::GetSystemMetrics(SM_CYMENUCHECK);
+
+    HBITMAP hMonoBitmap = ::CreateBitmap(checkW, checkH, 1, 1, nullptr);
+    if (hMonoBitmap) {
+      HBITMAP hPrevBitmap = (HBITMAP)::SelectObject(hMemoryDC, hMonoBitmap);
+      if (hPrevBitmap) {
+        // XXXjgr This will go pear-shaped if the image is bigger than the
+        // provided rect. What should we do?
+        RECT imgRect = {0, 0, checkW, checkH};
+        POINT imgPos = {rc.left + (rc.right - rc.left - checkW) / 2,
+                        rc.top + (rc.bottom - rc.top - checkH) / 2};
+
+        // XXXzeniko Windows renders these 1px lower than you'd expect
+        if (aComponent == DFCS_MENUCHECK || aComponent == DFCS_MENUBULLET)
+          imgPos.y++;
+
+        ::DrawFrameControl(hMemoryDC, &imgRect, DFC_MENU, aComponent);
+        COLORREF oldTextCol = ::SetTextColor(hdc, 0x00000000);
+        COLORREF oldBackCol = ::SetBkColor(hdc, 0x00FFFFFF);
+        ::BitBlt(hdc, imgPos.x, imgPos.y, checkW, checkH, hMemoryDC, 0, 0,
+                 SRCAND);
+        ::SetTextColor(hdc, ::GetSysColor(aColor));
+        ::SetBkColor(hdc, 0x00000000);
+        ::BitBlt(hdc, imgPos.x, imgPos.y, checkW, checkH, hMemoryDC, 0, 0,
+                 SRCPAINT);
+        ::SetTextColor(hdc, oldTextCol);
+        ::SetBkColor(hdc, oldBackCol);
+        ::SelectObject(hMemoryDC, hPrevBitmap);
+      }
+      ::DeleteObject(hMonoBitmap);
+    }
+    ::DeleteDC(hMemoryDC);
+  }
+}
+
 void nsNativeThemeWin::DrawCheckedRect(HDC hdc, const RECT& rc, int32_t fore,
                                        int32_t back, HBRUSH defaultBack) {
   static WORD patBits[8] = {0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55};
@@ -3074,6 +3187,60 @@ RENDER_AGAIN:
       break;
     case StyleAppearance::Menubar:
       break;
+    case StyleAppearance::Menupopup:
+      NS_ASSERTION(nsUXThemeData::AreFlatMenusEnabled(),
+                   "Classic menus are styled entirely through CSS");
+      ::FillRect(hdc, &widgetRect, (HBRUSH)(COLOR_MENU + 1));
+      ::FrameRect(hdc, &widgetRect, ::GetSysColorBrush(COLOR_BTNSHADOW));
+      break;
+    case StyleAppearance::Menuitem:
+    case StyleAppearance::Checkmenuitem:
+    case StyleAppearance::Radiomenuitem:
+      // part == 0 for normal items
+      // part == 1 for top-level menu items
+      if (nsUXThemeData::AreFlatMenusEnabled()) {
+        // Not disabled and hot/pushed.
+        if ((state & (DFCS_HOT | DFCS_PUSHED)) != 0) {
+          ::FillRect(hdc, &widgetRect, (HBRUSH)(COLOR_MENUHILIGHT + 1));
+          ::FrameRect(hdc, &widgetRect, ::GetSysColorBrush(COLOR_HIGHLIGHT));
+        }
+      } else {
+        if (part == 1) {
+          if ((state & DFCS_INACTIVE) == 0) {
+            if ((state & DFCS_PUSHED) != 0) {
+              ::DrawEdge(hdc, &widgetRect, BDR_SUNKENOUTER, BF_RECT);
+            } else if ((state & DFCS_HOT) != 0) {
+              ::DrawEdge(hdc, &widgetRect, BDR_RAISEDINNER, BF_RECT);
+            }
+          }
+        } else {
+          if ((state & (DFCS_HOT | DFCS_PUSHED)) != 0) {
+            ::FillRect(hdc, &widgetRect, (HBRUSH)(COLOR_HIGHLIGHT + 1));
+          }
+        }
+      }
+      break;
+    case StyleAppearance::Menucheckbox:
+    case StyleAppearance::Menuradio:
+      if (!(state & DFCS_CHECKED)) break;  // nothin' to do
+      [[fallthrough]];
+    case StyleAppearance::Menuarrow: {
+      uint32_t color = COLOR_MENUTEXT;
+      if ((state & DFCS_INACTIVE))
+        color = COLOR_GRAYTEXT;
+      else if ((state & DFCS_HOT))
+        color = COLOR_HIGHLIGHTTEXT;
+
+      if (aAppearance == StyleAppearance::Menucheckbox)
+        DrawMenuImage(hdc, widgetRect, DFCS_MENUCHECK, color);
+      else if (aAppearance == StyleAppearance::Menuradio)
+        DrawMenuImage(hdc, widgetRect, DFCS_MENUBULLET, color);
+      else if (aAppearance == StyleAppearance::Menuarrow)
+        DrawMenuImage(hdc, widgetRect,
+                      (state & DFCS_RTL) ? DFCS_MENUARROWRIGHT : DFCS_MENUARROW,
+                      color);
+      break;
+    }
     case StyleAppearance::Menuseparator: {
       // separators are offset by a bit (see menu.css)
       widgetRect.left++;
diff --git a/widget/windows/nsUXThemeData.cpp b/widget/windows/nsUXThemeData.cpp
index 722695a0344f..fe4061efb178 100644
--- a/widget/windows/nsUXThemeData.cpp
+++ b/widget/windows/nsUXThemeData.cpp
@@ -19,6 +19,30 @@ using namespace mozilla::widget;
 
 MOZ_RUNINIT nsUXThemeData::ThemeHandle nsUXThemeData::sThemes[eUXNumClasses];
 
+const int NUM_COMMAND_BUTTONS = 3;
+SIZE nsUXThemeData::sCommandButtonMetrics[NUM_COMMAND_BUTTONS];
+bool nsUXThemeData::sCommandButtonMetricsInitialized = false;
+SIZE nsUXThemeData::sCommandButtonBoxMetrics;
+bool nsUXThemeData::sCommandButtonBoxMetricsInitialized = false;
+
+bool nsUXThemeData::sTitlebarInfoPopulatedAero = false;
+bool nsUXThemeData::sTitlebarInfoPopulatedThemed = false;
+
+/**
+ * Windows themes we currently detect.
+ */
+enum class WindowsTheme {
+  Generic = 0,  // unrecognized theme
+  Classic,
+  Aero,
+  Luna,
+  Royale,
+  Zune,
+  AeroLite
+};
+
+static WindowsTheme sThemeId = WindowsTheme::Generic;
+
 nsUXThemeData::ThemeHandle::~ThemeHandle() { Close(); }
 
 void nsUXThemeData::ThemeHandle::OpenOnce(HWND aWindow, LPCWSTR aClassList) {
@@ -99,6 +123,165 @@ const wchar_t* nsUXThemeData::GetClassName(nsUXThemeClass cls) {
       return L"";
   }
 }
+
+// static
+void nsUXThemeData::EnsureCommandButtonMetrics() {
+  if (sCommandButtonMetricsInitialized) {
+    return;
+  }
+  sCommandButtonMetricsInitialized = true;
+
+  // This code should never need to be evaluated for our UI since if we need
+  // these metrics for our UI we should make sure that we obtain the correct
+  // metrics when nsWindow::Create() is called.  The generic metrics that we
+  // fetch here will likley not match the current theme, but we provide these
+  // values in case arbitrary content is styled with the '-moz-appearance'
+  // value '-moz-window-button-close' etc.
+  //
+  // ISSUE: We'd prefer to use MOZ_ASSERT_UNREACHABLE here, but since content
+  // (and at least one of our crashtests) can use '-moz-window-button-close'
+  // we need to use NS_WARNING instead.
+  NS_WARNING("Making expensive and likely unnecessary GetSystemMetrics calls");
+
+  sCommandButtonMetrics[0].cx = GetSystemMetrics(SM_CXSIZE);
+  sCommandButtonMetrics[0].cy = GetSystemMetrics(SM_CYSIZE);
+  sCommandButtonMetrics[1].cx = sCommandButtonMetrics[2].cx =
+      sCommandButtonMetrics[0].cx;
+  sCommandButtonMetrics[1].cy = sCommandButtonMetrics[2].cy =
+      sCommandButtonMetrics[0].cy;
+
+  // Trigger a refresh on the next layout.
+  sTitlebarInfoPopulatedAero = sTitlebarInfoPopulatedThemed = false;
+}
+
+// static
+void nsUXThemeData::EnsureCommandButtonBoxMetrics() {
+  if (sCommandButtonBoxMetricsInitialized) {
+    return;
+  }
+  sCommandButtonBoxMetricsInitialized = true;
+
+  EnsureCommandButtonMetrics();
+
+  sCommandButtonBoxMetrics.cx = sCommandButtonMetrics[0].cx +
+                                sCommandButtonMetrics[1].cx +
+                                sCommandButtonMetrics[2].cx;
+  sCommandButtonBoxMetrics.cy = sCommandButtonMetrics[0].cy +
+                                sCommandButtonMetrics[1].cy +
+                                sCommandButtonMetrics[2].cy;
+
+  // Trigger a refresh on the next layout.
+  sTitlebarInfoPopulatedAero = sTitlebarInfoPopulatedThemed = false;
+}
+
+// static
+void nsUXThemeData::UpdateTitlebarInfo(HWND aWnd) {
+  if (!aWnd) return;
+
+  if (!sTitlebarInfoPopulatedAero &&
+      gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled()) {
+    RECT captionButtons;
+    if (SUCCEEDED(DwmGetWindowAttribute(aWnd, DWMWA_CAPTION_BUTTON_BOUNDS,
+                                        &captionButtons,
+                                        sizeof(captionButtons)))) {
+      sCommandButtonBoxMetrics.cx =
+          captionButtons.right - captionButtons.left - 3;
+      sCommandButtonBoxMetrics.cy =
+          (captionButtons.bottom - captionButtons.top) - 1;
+      sCommandButtonBoxMetricsInitialized = true;
+      MOZ_ASSERT(
+          sCommandButtonBoxMetrics.cx > 0 && sCommandButtonBoxMetrics.cy > 0,
+          "We must not cache bad command button box dimensions");
+      sTitlebarInfoPopulatedAero = true;
+    }
+  }
+
+  // NB: sTitlebarInfoPopulatedThemed is always true pre-vista.
+  if (sTitlebarInfoPopulatedThemed || IsWin8OrLater()) return;
+
+  // Query a temporary, visible window with command buttons to get
+  // the right metrics.
+  WNDCLASSW wc;
+  wc.style = 0;
+  wc.lpfnWndProc = ::DefWindowProcW;
+  wc.cbClsExtra = 0;
+  wc.cbWndExtra = 0;
+  wc.hInstance = nsToolkit::mDllInstance;
+  wc.hIcon = nullptr;
+  wc.hCursor = nullptr;
+  wc.hbrBackground = nullptr;
+  wc.lpszMenuName = nullptr;
+  wc.lpszClassName = kClassNameTemp;
+  ::RegisterClassW(&wc);
+
+  // Create a transparent descendant of the window passed in. This
+  // keeps the window from showing up on the desktop or the taskbar.
+  // Note the parent (browser) window is usually still hidden, we
+  // don't want to display it, so we can't query it directly.
+  HWND hWnd = CreateWindowExW(WS_EX_LAYERED, kClassNameTemp, L"",
+                              WS_OVERLAPPEDWINDOW, 0, 0, 0, 0, aWnd, nullptr,
+                              nsToolkit::mDllInstance, nullptr);
+  NS_ASSERTION(hWnd, "UpdateTitlebarInfo window creation failed.");
+
+  int showType = SW_SHOWNA;
+  // We try to avoid activating this window, but on Aero basic (aero without
+  // compositor) and aero lite (special theme for win server 2012/2013) we may
+  // get the wrong information if the window isn't activated, so we have to:
+  if (sThemeId == WindowsTheme::AeroLite ||
+      (sThemeId == WindowsTheme::Aero &&
+       !gfxWindowsPlatform::GetPlatform()->DwmCompositionEnabled())) {
+    showType = SW_SHOW;
+  }
+  ShowWindow(hWnd, showType);
+  TITLEBARINFOEX info = {0};
+  info.cbSize = sizeof(TITLEBARINFOEX);
+  SendMessage(hWnd, WM_GETTITLEBARINFOEX, 0, (LPARAM)&info);
+  DestroyWindow(hWnd);
+
+  // Only set if we have valid data for all three buttons we use.
+  if ((info.rgrect[2].right - info.rgrect[2].left) == 0 ||
+      (info.rgrect[3].right - info.rgrect[3].left) == 0 ||
+      (info.rgrect[5].right - info.rgrect[5].left) == 0) {
+    NS_WARNING("WM_GETTITLEBARINFOEX query failed to find usable metrics.");
+    return;
+  }
+  // minimize
+  sCommandButtonMetrics[0].cx = info.rgrect[2].right - info.rgrect[2].left;
+  sCommandButtonMetrics[0].cy = info.rgrect[2].bottom - info.rgrect[2].top;
+  // maximize/restore
+  sCommandButtonMetrics[1].cx = info.rgrect[3].right - info.rgrect[3].left;
+  sCommandButtonMetrics[1].cy = info.rgrect[3].bottom - info.rgrect[3].top;
+  // close
+  sCommandButtonMetrics[2].cx = info.rgrect[5].right - info.rgrect[5].left;
+  sCommandButtonMetrics[2].cy = info.rgrect[5].bottom - info.rgrect[5].top;
+  sCommandButtonMetricsInitialized = true;
+
+#ifdef DEBUG
+  // Verify that all values for the command buttons are positive values
+  // otherwise we have cached bad values for the caption buttons
+  for (int i = 0; i < NUM_COMMAND_BUTTONS; i++) {
+    MOZ_ASSERT(sCommandButtonMetrics[i].cx > 0);
+    MOZ_ASSERT(sCommandButtonMetrics[i].cy > 0);
+  }
+#endif
+
+  sTitlebarInfoPopulatedThemed = true;
+}
+
+// visual style (aero glass, aero basic)
+//    theme (aero, luna, zune)
+//      theme color (silver, olive, blue)
+//        system colors
+
+const struct {
+  LPCWSTR name;
+  WindowsTheme type;
+} kKnownThemes[] = {{L"aero.msstyles", WindowsTheme::Aero},
+                    {L"aerolite.msstyles", WindowsTheme::AeroLite},
+                    {L"luna.msstyles", WindowsTheme::Luna},
+                    {L"zune.msstyles", WindowsTheme::Zune},
+                    {L"royale.msstyles", WindowsTheme::Royale}};
+
 bool nsUXThemeData::sIsDefaultWindowsTheme = false;
 bool nsUXThemeData::sIsHighContrastOn = false;
 
@@ -109,6 +292,12 @@ bool nsUXThemeData::IsHighContrastOn() { return sIsHighContrastOn; }
 
 // static
 void nsUXThemeData::UpdateNativeThemeInfo() {
+  // Trigger a refresh of themed button metrics if needed
+  sTitlebarInfoPopulatedThemed = false;
+
+  sIsDefaultWindowsTheme = false;
+  sThemeId = WindowsTheme::Generic;
+
   HIGHCONTRAST highContrastInfo;
   highContrastInfo.cbSize = sizeof(HIGHCONTRAST);
   if (SystemParametersInfo(SPI_GETHIGHCONTRAST, 0, &highContrastInfo, 0)) {
@@ -116,5 +305,52 @@ void nsUXThemeData::UpdateNativeThemeInfo() {
   } else {
     sIsHighContrastOn = false;
   }
-  sIsDefaultWindowsTheme = !sIsHighContrastOn;
+
+  if (!nsUXThemeData::IsAppThemed()) {
+    sThemeId = WindowsTheme::Classic;
+    return;
+  }
+
+  WCHAR themeFileName[MAX_PATH + 1];
+  WCHAR themeColor[MAX_PATH + 1];
+  if (FAILED(GetCurrentThemeName(themeFileName, MAX_PATH, themeColor, MAX_PATH,
+                                 nullptr, 0))) {
+    sThemeId = WindowsTheme::Classic;
+    return;
+  }
+
+  LPCWSTR themeName = wcsrchr(themeFileName, L'\\');
+  themeName = themeName ? themeName + 1 : themeFileName;
+
+  sThemeId = [&] {
+    for (const auto& theme : kKnownThemes) {
+      if (!lstrcmpiW(themeName, theme.name)) {
+        return theme.type;
+      }
+    }
+    return WindowsTheme::Generic;
+  }();
+
+  // We're using the default theme if we're using any of Aero, Aero Lite, or
+  // luna. However, on Win8, GetCurrentThemeName (see above) returns
+  // AeroLite.msstyles for the 4 builtin highcontrast themes as well. Those
+  // themes "don't count" as default themes, so we specifically check for high
+  // contrast mode in that situation.
+  sIsDefaultWindowsTheme = [&] {
+    if (sIsHighContrastOn && IsWin8OrLater()) {
+      return false;
+    }
+    return sThemeId == WindowsTheme::Aero ||
+           sThemeId == WindowsTheme::AeroLite || sThemeId == WindowsTheme::Luna;
+  }();
+}
+
+// static
+bool nsUXThemeData::AreFlatMenusEnabled() {
+  BOOL useFlat = FALSE;
+  return !!::SystemParametersInfo(SPI_GETFLATMENU, 0, &useFlat, 0) ? useFlat
+                                                                   : false;
 }
+
+// static
+bool nsUXThemeData::IsAppThemed() { return !!::IsAppThemed(); }
diff --git a/widget/windows/nsUXThemeData.h b/widget/windows/nsUXThemeData.h
index af67b0d5e23a..33ab0354b767 100644
--- a/widget/windows/nsUXThemeData.h
+++ b/widget/windows/nsUXThemeData.h
@@ -38,6 +38,13 @@ enum nsUXThemeClass {
   eUXNumClasses
 };
 
+enum CmdButtonIdx {
+  CMDBUTTONIDX_MINIMIZE = 0,
+  CMDBUTTONIDX_RESTORE,
+  CMDBUTTONIDX_CLOSE,
+  CMDBUTTONIDX_BUTTONBOX
+};
+
 class nsUXThemeData {
   // This class makes sure we don't attempt to open a theme if the previous
   // loading attempt has failed because OpenThemeData is a heavy task and
@@ -61,9 +68,22 @@ class nsUXThemeData {
   };
 
   static ThemeHandle sThemes[eUXNumClasses];
+
+  // We initialize sCommandButtonBoxMetrics separately as a performance
+  // optimization to avoid fetching dummy values for sCommandButtonMetrics
+  // when we don't need those.
+  static SIZE sCommandButtonMetrics[3];
+  static bool sCommandButtonMetricsInitialized;
+  static SIZE sCommandButtonBoxMetrics;
+  static bool sCommandButtonBoxMetricsInitialized;
+
   static const wchar_t* GetClassName(nsUXThemeClass);
+  static void EnsureCommandButtonMetrics();
+  static void EnsureCommandButtonBoxMetrics();
 
  public:
+  static bool sTitlebarInfoPopulatedAero;
+  static bool sTitlebarInfoPopulatedThemed;
   static bool sIsDefaultWindowsTheme;
   static bool sIsHighContrastOn;
 
@@ -71,8 +91,22 @@ class nsUXThemeData {
   static HANDLE GetTheme(nsUXThemeClass cls);
   static HMODULE GetThemeDLL();
 
+  // nsWindow calls this to update desktop settings info
+  static void UpdateTitlebarInfo(HWND aWnd);
+
+  static SIZE GetCommandButtonMetrics(CmdButtonIdx aMetric) {
+    EnsureCommandButtonMetrics();
+    return sCommandButtonMetrics[aMetric];
+  }
+  static SIZE GetCommandButtonBoxMetrics() {
+    EnsureCommandButtonBoxMetrics();
+    return sCommandButtonBoxMetrics;
+  }
   static void UpdateNativeThemeInfo();
   static bool IsDefaultWindowTheme();
   static bool IsHighContrastOn();
+
+  static bool AreFlatMenusEnabled();
+  static bool IsAppThemed();
 };
 #endif  // __UXThemeData_h__
diff --git a/widget/windows/nsWindow.cpp b/widget/windows/nsWindow.cpp
index 7b6344135ac2..c38b291c90a3 100644
--- a/widget/windows/nsWindow.cpp
+++ b/widget/windows/nsWindow.cpp
@@ -826,6 +826,15 @@ nsWindow::~nsWindow() {
  *
  **************************************************************/
 
+static bool ShouldCacheTitleBarInfo(WindowType aWindowType,
+                                    BorderStyle aBorderStyle) {
+  return (aWindowType == WindowType::TopLevel) &&
+         (aBorderStyle == BorderStyle::Default ||
+          aBorderStyle == BorderStyle::All) &&
+         (!nsUXThemeData::sTitlebarInfoPopulatedThemed ||
+          !nsUXThemeData::sTitlebarInfoPopulatedAero);
+}
+
 void nsWindow::SendAnAPZEvent(InputData& aEvent) {
   LRESULT popupHandlingResult;
   if (DealWithPopups(mWnd, MOZ_WM_DMANIP, 0, 0, &popupHandlingResult)) {
@@ -1210,6 +1219,12 @@ nsresult nsWindow::Create(nsIWidget* aParent, nsNativeWidget aNativeParent,
   mDefaultIMC.Init(this);
   IMEHandler::InitInputContext(this, mInputContext);
 
+  // Query for command button metric data for rendering the titlebar. We
+  // only do this once on the first window that has an actual titlebar
+  if (ShouldCacheTitleBarInfo(mWindowType, mBorderStyle)) {
+    nsUXThemeData::UpdateTitlebarInfo(mWnd);
+  }
+
   static bool a11yPrimed = false;
   if (!a11yPrimed && mWindowType == WindowType::TopLevel) {
     a11yPrimed = true;
@@ -3267,6 +3282,12 @@ void nsWindow::UpdateOpaqueRegion(const LayoutDeviceIntRegion& aOpaqueRegion) {
     margins.cxLeftWidth = largest.X();
     margins.cxRightWidth = clientBounds.Width() - largest.XMost();
     margins.cyBottomHeight = clientBounds.Height() - largest.YMost();
+    if (mCustomNonClient) {
+      // The minimum glass height must be the caption buttons height,
+      // otherwise the buttons are drawn incorrectly.
+      largest.MoveToY(std::max<uint32_t>(
+          largest.Y(), nsUXThemeData::GetCommandButtonBoxMetrics().cy));
+    }
     margins.cyTopHeight = largest.Y();
   }
 
diff --git a/xpcom/ds/StaticAtoms.py b/xpcom/ds/StaticAtoms.py
index 06410d4ca666..a1fedc48aa5d 100644
--- a/xpcom/ds/StaticAtoms.py
+++ b/xpcom/ds/StaticAtoms.py
@@ -2233,6 +2233,10 @@ STATIC_ATOMS = [
     Atom("forcemessagemanager", "forcemessagemanager"),
     Atom("initialBrowsingContextGroupId", "initialBrowsingContextGroupId"),
     Atom("manualactiveness", "manualactiveness"),
+    # windows media query names
+    Atom("windows_win7", "windows-win7"),
+    Atom("windows_win8", "windows-win8"),
+    Atom("windows_win10", "windows-win10"),
     # Names for system metrics.
     Atom("_moz_bool_pref", "-moz-bool-pref"),
     Atom("_moz_scrollbar_start_backward", "-moz-scrollbar-start-backward"),
@@ -2245,6 +2249,10 @@ STATIC_ATOMS = [
     Atom("_moz_mac_titlebar_height", "-moz-mac-titlebar-height"),
     Atom("_moz_platform", "-moz-platform"),
     Atom("_moz_gtk_theme_family", "-moz-gtk-theme-family"),
+    Atom("_moz_windows_compositor", "-moz-windows-compositor"),
+    Atom("_moz_windows_classic", "-moz-windows-classic"),
+    Atom("_moz_windows_glass", "-moz-windows-glass"),
+    Atom("_moz_windows_non_native_menus", "-moz-windows-non-native-menus"),
     Atom("_moz_menubar_drag", "-moz-menubar-drag"),
     Atom("_moz_device_pixel_ratio", "-moz-device-pixel-ratio"),
     Atom("_moz_device_orientation", "-moz-device-orientation"),
diff --git a/browser/themes/shared/browser-shared.css b/browser/themes/shared/browser-shared.css
index d569d0e4cd79..a055d057f51b 100644
--- a/browser/themes/shared/browser-shared.css
+++ b/browser/themes/shared/browser-shared.css
@@ -158,18 +158,39 @@ body {
    * images work with something other than the toolbox, so for now we ignore
    * them on other things like the sidebar that could have
    * .browser-toolbox-background */
-  :root[lwtheme] & {
-    background-image: var(--lwt-additional-images);
-    background-repeat: var(--lwt-background-tiling);
-    background-position: var(--lwt-background-alignment);
+  @media not (-moz-platform: windows-win7) {
+    @media not (-moz-platform: windows-win8) {
+      :root[lwtheme] & {
+        background-image: var(--lwt-additional-images);
+        background-repeat: var(--lwt-background-tiling);
+        background-position: var(--lwt-background-alignment);
+        background-color: var(--lwt-accent-color);
+      }
+    }
   }
 
-  /* When a theme defines both theme_frame and additional_backgrounds, show
-     the latter atop the former. */
-  :root[lwtheme-image] & {
-    background-image: var(--lwt-header-image), var(--lwt-additional-images);
-    background-repeat: no-repeat, var(--lwt-background-tiling);
-    background-position: right top, var(--lwt-background-alignment);
+  /* TODO bug 1695280: Remove these media selectors and merge the rule below
+     with the ruleset above. We must set background properties on :root and not
+     #navigator-toolbox on Windows 7/8 due to a WebRender bug that hides the
+     minimize/maximize/close buttons. */
+  @media not (-moz-platform: windows-win7) {
+    @media not (-moz-platform: windows-win8) {
+      :root[lwtheme] #navigator-toolbox {
+        background-color: var(--lwt-accent-color);
+      }
+  
+      /* When a theme defines both theme_frame and additional_backgrounds, show
+         the latter atop the former. */
+     :root[lwtheme-image] #navigator-toolbox {
+       background-image: var(--lwt-header-image), var(--lwt-additional-images);
+       background-repeat: no-repeat, var(--lwt-background-tiling);
+       background-position: right top, var(--lwt-background-alignment);
+     }
+  
+     :root[lwtheme] #navigator-toolbox:-moz-window-inactive {
+       background-color: var(--lwt-accent-color-inactive, var(--lwt-accent-color));
+     }
+    }
   }
 }
 
@@ -229,6 +246,27 @@ body {
   }
 }
 
+/* TODO bug 1695280: Remove this block. */
+@media (-moz-platform: windows-win7),
+       (-moz-platform: windows-win8) {
+  :root[lwtheme] {
+    background-color: var(--lwt-accent-color);
+    background-image: var(--lwt-additional-images);
+    background-repeat: var(--lwt-background-tiling);
+    background-position: var(--lwt-background-alignment);
+  }
+
+  :root[lwtheme-image] {
+    background-image: var(--lwt-header-image, linear-gradient(transparent, transparent)),  var(--lwt-additional-images) !important;
+    background-repeat: no-repeat, var(--lwt-background-tiling);
+    background-position: right top, var(--lwt-background-alignment) !important;
+  }
+
+  :root[lwtheme]:-moz-window-inactive {
+    background-color: var(--lwt-accent-color-inactive, var(--lwt-accent-color));
+  }
+}
+
 /* Title bar */
 
 .browser-titlebar {
diff --git a/browser/themes/windows/browser.css b/browser/themes/windows/browser.css
index 63b737c49f43..23a3d0fcb19f 100644
--- a/browser/themes/windows/browser.css
+++ b/browser/themes/windows/browser.css
@@ -5,6 +5,12 @@
 @import url("chrome://browser/skin/browser-shared.css");
 @import url("chrome://browser/skin/contextmenu.css");
 
+@namespace html url("http://www.w3.org/1999/xhtml");
+
+:root {
+  --sidebar-border-color: ThreeDLightShadow;
+}
+
 #menubar-items {
   flex-direction: column; /* for flex hack */
   justify-content: normal; /* align the menubar to the top also in customize mode */
@@ -25,46 +31,130 @@
   }
 }
 
-@media (-moz-windows-accent-color-in-titlebar) or (-moz-windows-mica) {
-  :root[tabsintitlebar] {
-    @media (-moz-windows-mica) {
-      &:not([lwtheme]) {
-        background-color: transparent;
+/* Use a different color only on Windows 8 and higher in inactive windows.
+ * On Win 7, the menubar fog disappears for inactive windows, and renders gray
+ * illegible.
+ */
+@media (-moz-windows-default-theme) {
+  @media not (-moz-platform: windows-win7) {
+    &:not([lwtheme]) #toolbar-menubar:-moz-window-inactive {
+      color: ThreeDShadow;
+    }
+  }
+}
 
-        /* Accent color in titlebar overrides Mica. */
-        @media not (-moz-windows-accent-color-in-titlebar) {
-          /* Hide the Firefox buttons since Windows draws their own.
-           * FIXME(emilio): Find a way of hiding the native buttons, or make them
-           * taller, this is very hacky. */
-          .titlebar-buttonbox {
-            opacity: 0;
+@media not (-moz-platform: windows-win7) {
+  @media not (-moz-platform: windows-win8) {
+    /* On Windows 10, when temporarily showing the menu bar, make it at least as
+     * tall as the tab bar such that the window controls don't appear to move up. */
+    @media (-moz-windows-accent-color-in-titlebar) or (-moz-windows-mica) {
+      :root[tabsintitlebar] {
+        @media (-moz-windows-mica) {
+          &:not([lwtheme]) {
+            background-color: transparent;
+    
+            /* Accent color in titlebar overrides Mica. */
+            @media not (-moz-windows-accent-color-in-titlebar) {
+              /* Hide the Firefox buttons since Windows draws their own.
+               * FIXME(emilio): Find a way of hiding the native buttons, or make them
+               * taller, this is very hacky. */
+              .titlebar-buttonbox {
+                opacity: 0;
+              }
+            }
+          }
+        }
+    
+        /* stylelint-disable-next-line media-query-no-invalid */
+        @media (-moz-windows-mica) or (-moz-bool-pref: "browser.theme.windows.accent-color-in-tabs.enabled") {
+          &:not([lwtheme]) #TabsToolbar {
+            /* These colors match the Linux/HCM default button colors. We need to
+             * override these on the tabs toolbar because the accent color is
+             * arbitrary, so the hardcoded colors from browser-custom-colors might
+             * not provide sufficient contrast. */
+            --toolbarbutton-icon-fill: currentColor;
+            --toolbarbutton-hover-background: color-mix(in srgb, currentColor 17%, transparent);
+            --toolbarbutton-active-background: color-mix(in srgb, currentColor 30%, transparent);
+          }
+        }
+    
+        &[sizemode="normal"] #navigator-toolbox {
+          border-top: .5px solid ActiveBorder;
+          &:-moz-window-inactive {
+            border-top-color: InactiveBorder;
           }
         }
       }
     }
+  }
+}
 
-    /* stylelint-disable-next-line media-query-no-invalid */
-    @media (-moz-windows-mica) or (-moz-bool-pref: "browser.theme.windows.accent-color-in-tabs.enabled") {
-      &:not([lwtheme]) #TabsToolbar {
-        /* These colors match the Linux/HCM default button colors. We need to
-         * override these on the tabs toolbar because the accent color is
-         * arbitrary, so the hardcoded colors from browser-custom-colors might
-         * not provide sufficient contrast. */
-        --toolbarbutton-icon-fill: currentColor;
-        --toolbarbutton-hover-background: color-mix(in srgb, currentColor 17%, transparent);
-        --toolbarbutton-active-background: color-mix(in srgb, currentColor 30%, transparent);
-      }
-    }
+/* Add 4px extra margin on top of the tabs toolbar on Windows 7. */
+@media (-moz-platform: windows-win7) {
+  :root[sizemode="normal"][chromehidden~="menubar"] #TabsToolbar > .toolbar-items,
+  :root[sizemode="normal"] #toolbar-menubar[autohide="true"][inactive] + #TabsToolbar > .toolbar-items {
+    padding-top: 4px;
+  }
+}
 
-    &[sizemode="normal"] #navigator-toolbox {
-      border-top: .5px solid ActiveBorder;
-      &:-moz-window-inactive {
-        border-top-color: InactiveBorder;
-      }
+/* Add a fog for background tabs to be visible on Windows 7 glass window background */
+@media (-moz-platform: windows-win7) {
+  @media (-moz-windows-default-theme) {
+    &:not([lwtheme]) #TabsToolbar {
+      background-image: radial-gradient(ellipse at bottom, rgba(255,255,255,0.8), rgba(255,255,255,0.5) 80%, transparent);
     }
   }
 }
 
+@media not (-moz-windows-compositor),
+       not (-moz-windows-default-theme),
+       (-moz-platform: windows-win8) {
+  /* Please keep the menu text colors in this media block in sync with
+   * light-dark-overrides.css, minus the :not([lwtheme]) condition - see Bug 1165718.
+   */
+  :root[tabsintitlebar]:not([lwtheme]) {
+    color: CaptionText;
+  }
+
+  :root[tabsintitlebar]:not([lwtheme]):-moz-window-inactive {
+    color: InactiveCaptionText;
+  }
+}
+
+@media (-moz-windows-classic) {
+  /**
+   * In the classic themes, the titlebar has a horizontal gradient, which is
+   * problematic for reading the text of background tabs when they're in the
+   * titlebar. We side-step this issue by layering our own background underneath
+   * the tabs.
+   */
+  :root[tabsintitlebar]:not([sizemode=fullscreen]) #TabsToolbar:not([lwtheme]) {
+    background-image: linear-gradient(transparent, ActiveCaption);
+    background-size: auto 200%;
+  }
+
+  :root[tabsintitlebar]:not([sizemode=fullscreen]) #TabsToolbar:not([lwtheme]):-moz-window-inactive {
+    background-image: linear-gradient(transparent, InactiveCaption);
+  }
+
+  /* Add a window top border for webextension themes */
+  :root[lwtheme][tabsintitlebar][sizemode="normal"] #navigator-toolbox {
+    background-image: linear-gradient(to bottom,
+          ThreeDLightShadow 0, ThreeDLightShadow 1px,
+          ThreeDHighlight 1px, ThreeDHighlight 2px,
+          ActiveBorder 2px, ActiveBorder 4px, transparent 4px);
+  }
+
+  :root[tabsintitlebar] :is(#TabsToolbar, #toolbar-menubar) toolbarbutton:not([lwtheme]) {
+    color: inherit;
+  }
+}
+@media not (-moz-windows-compositor) {
+  #nav-bar[tabs-hidden="true"] {
+    box-shadow: none;
+  }
+}
+
 /* Titlebar */
 
 :root[tabsintitlebar][sizemode="normal"] #titlebar {
@@ -77,6 +167,29 @@
   -moz-default-appearance: -moz-window-titlebar-maximized;
 }
 
+@media not (-moz-windows-compositor) {
+  /**
+   * Anytime we're not using the compositor on Windows, the -moz-window-titlebar
+   * and -moz-window-titlebar-maximized values for -moz-appearance override
+   * backgrounds supplied by lwthemes. We make the #titlebar itself hidden, but
+   * it's children visible in order to hide the background but keep the margin and
+   * padding that comes from those -moz-window-titlebar rules.
+   */
+  :root:not([inFullscreen]) #titlebar[lwtheme] {
+    visibility: hidden;
+  }
+  :root:not([inFullscreen], [chromehidden~="menubar"]) #toolbar-menubar[lwtheme],
+  :root:not([inFullscreen], [chromehidden~="toolbar"]) #TabsToolbar[lwtheme] {
+    visibility: visible;
+  }
+}
+
+@media (-moz-windows-classic) {
+  :root[tabsintitlebar][sizemode="normal"] #toolbar-menubar {
+    margin-top: 4px;
+  }
+}
+
 .titlebar-buttonbox {
   /* For all Windows configurations except for Windows Aero and Windows Aero Basic,
    * the default -moz-default-appearance of -moz-window-button-box and
@@ -96,12 +209,19 @@
   align-items: stretch;
 }
 
+@media (-moz-platform: windows-win7),
+       (-moz-platform: windows-win8) {
+  /* Preserve window control buttons position at the top of the button box. */
+  .titlebar-buttonbox-container {
+    align-items: flex-start;
+  }
+}
+
 /* Window control buttons */
 
 .titlebar-min {
   appearance: auto;
   -moz-default-appearance: -moz-window-button-minimize;
-  margin-inline-end: 2px;
 }
 
 .titlebar-max {
@@ -119,6 +239,12 @@
   -moz-default-appearance: -moz-window-button-close;
 }
 
+@media not (-moz-windows-classic) {
+  .titlebar-min {
+    margin-inline-end: 2px;
+  }
+}
+
 :root[tabletmode] .titlebar-min,
 :root[tabletmode] .titlebar-restore,
 :root[tabletmode] .titlebar-max {
@@ -180,7 +306,7 @@
   }
 }
 
-@media not (-moz-windows-default-theme) {
+@media not (-moz-windows-default-theme) {
   :root {
     /* Windows HCM conventions use these colors for chiclets. We can't use them on
        other platforms because AccentColor can be shown atop SelectedItem,
@@ -212,7 +338,7 @@
   padding: 0;
 }
 
-@media not (-moz-windows-default-theme) {
+@media not (-moz-windows-default-theme) {
   /* For high contrast themes. XXX is this needed anymore? */
   #tabbrowser-tabpanels,
   :root[privatebrowsingmode=temporary] #tabbrowser-tabpanels {
@@ -266,8 +392,91 @@ menupopup[touchmode] :is(menu, menuitem, menucaption) {
   padding-block: calc((3.5em - 32px) / 2);
 }
 
-/* Other menu separators don't extend all the way to the menu edges, but the
-   one below the navigation buttons in the content context menu should. */
-#context-sep-navigation {
-  padding-inline: 0;
+@media not (-moz-windows-non-native-menus) {
+  #context-navigation {
+    background-color: menu;
+  }
+}
+
+@media (-moz-windows-non-native-menus) {
+  /* :not([hidden]) to avoid the display: flex unhiding the item. */
+  #context-navigation:not([hidden]) {
+    /* Use modern flex box so we can use percentage widths to redistribute
+     * spacing manually. */
+    display: flex;
+    flex-direction: row;
+    /* We want the first and last icons to align with the text items which
+     * have 1em inline padding, and for icons to be centered within their
+     * hover state, so each icon of 16px needs 1em padding on both sides:
+     */
+    --menuitem-min-width: calc(2em + 16px);
+    /* The total width of the container should then be at least 4 times that: */
+    min-width: calc(4 * var(--menuitem-min-width));
+  }
+
+  #context-navigation > .menuitem-iconic {
+    flex: 1 0 auto;
+  }
+
+  #context-navigation > .menuitem-iconic[_moz-menuactive="true"] {
+    /* We only show hover state on the icons. This ensures there is no
+     * dead space between icons, but the visible hover state is only
+     * around the icons, and all the icons' hover states match each other.
+     */
+    background-color: transparent;
+  }
+
+  #context-navigation > .menuitem-iconic > .menu-iconic-left {
+    margin: 0;
+    padding: 0;
+  }
+
+  /* override styles from shared/contextmenu.inc.css */
+  #context-navigation > .menuitem-iconic > .menu-iconic-left > .menu-iconic-icon {
+    width: var(--menuitem-min-width);
+    height: 32px;
+    padding: 8px 1em;
+    margin: 0;
+  }
+  #context-navigation > .menuitem-iconic[_moz-menuactive="true"] > .menu-iconic-left > .menu-iconic-icon {
+    background-color: -moz-menuhover;
+  }
+
+  #context-navigation > .menuitem-iconic[_moz-menuactive="true"][disabled="true"] > .menu-iconic-left > .menu-iconic-icon {
+    background-color: -moz-menuhoverdisabled;
+  }
+
+  /* If the menu is wider than the icons strictly need, the <menuitem> elements
+   * will stretch to pick up the extra space. In that case, the outer icons
+   * should align to the start/end of their containing <menuitem>: */
+  #context-navigation > .menuitem-iconic:first-child {
+    justify-content: flex-start;
+  }
+
+  #context-navigation > .menuitem-iconic:last-child {
+    justify-content: flex-end;
+  }
+
+  #context-navigation > .menuitem-iconic:last-child,
+  #context-navigation > .menuitem-iconic:first-child {
+    flex-grow: 0;
+    /* The first and last items start off as 16px + 2em, like the other ones.
+     * 100% is the width of the parent, which will be at least 4 * the width of
+     * an individual item (16px + 2em)
+     * So 100% - 4 item widths gets us the remaining available space if
+     * #context-navigation is wider than that.
+     * Then divide by 6 to get the 1/6 of that extra space, and add this space
+     * to the width of the first/last items.
+     * This ensures that the 3 visual gaps between the 4 icons are all the same
+     * size, with each 1/3 of the available space evenly distributed between
+     * the 2 items on either side of the gap.
+     */
+    width: calc(var(--menuitem-min-width) + calc(100% - 4 * var(--menuitem-min-width)) / 6);
+  }
+
+  /* Other menu separators don't extend all the way to the menu edges, but the
+     one below the navigation buttons in the content context menu should. */
+  #context-sep-navigation {
+    padding-inline: 0;
+  }
 }
diff --git a/toolkit/themes/shared/menu-shared.css b/toolkit/themes/shared/menu-shared.css
index be5b7001b32e..8f2c273af4de 100644
--- a/toolkit/themes/shared/menu-shared.css
+++ b/toolkit/themes/shared/menu-shared.css
@@ -11,8 +11,21 @@
   @media (-moz-platform: windows) {
     --menu-arrow-width: max(1em, 16px);
 
-    @media (prefers-color-scheme: light) {
-      --menu-icon-opacity: 0.7;
+    @media (-moz-windows-non-native-menus) {
+    /* Override the menu color variables for dark browser themes. */
+    @media (prefers-color-scheme: dark) {
+      :root {
+        /* Override some menu color variables for light browser themes. */
+        --menu-icon-opacity: 0.7;
+      }
+    
+      /* Override the menu color variables for dark browser themes. */
+      @media (prefers-color-scheme: dark) {
+        :root {
+          --menu-icon-opacity: 1;
+        }
+        --menu-icon-opacity: 1;
+      }
     }
   }
 }
@@ -95,6 +108,8 @@ menuitem,
 menucaption {
   border-radius: calc(var(--panel-border-radius) / 2);
   align-items: center;
+  appearance: auto;
+  -moz-default-appearance: menuitem;
   flex-shrink: 0;
   list-style-image: none;
   max-width: 42em;
@@ -108,6 +123,25 @@ menucaption {
   }
 }
 
+@media (-moz-windows-non-native-menus) {
+  /* For Windows 10, prevent using native OS drawing of certain menu elements,
+     especially background colors and shadows. */
+  menu, menuitem, menucaption {
+    appearance: none;
+  }
+
+  /* Menu item text also needs native drawing disabled. */
+  menu > .menu-text,
+  menuitem > .menu-text,
+  menu > .menu-iconic-text,
+  menuitem > .menu-iconic-text {
+    appearance: none;
+    margin-inline-start: 0 !important; /* need !important to override the other !important below... */
+    padding-inline-end: 0;
+  }
+}
+
+@media (-moz-windows-non-native-menus) {
 menu,
 menuitem {
   &:where([disabled="true"]) {
@@ -124,6 +158,16 @@ menuitem {
     background-color: -moz-menuhoverdisabled;
   }
 }
+}
+
+@media (-moz-windows-classic) {
+  menu[disabled="true"],
+  menubar > menu[disabled="true"][_moz-menuactive="true"],
+  menuitem[disabled="true"] {
+    color: ThreeDShadow;
+    text-shadow: 1px 1px ThreeDHighlight;
+  }
+}
 
 menuitem:is([default="true"], .spell-suggestion),
 menucaption {
@@ -133,19 +182,17 @@ menucaption {
 /* ..... menu arrow box ..... */
 
 .menu-right {
-  list-style-image: url("chrome://global/skin/icons/arrow-right.svg");
-  -moz-context-properties: fill, fill-opacity;
-  fill: currentColor;
-  fill-opacity: var(--menu-icon-opacity);
+  appearance: auto;
+  -moz-default-appearance: menuarrow;
+  margin-inline-end: -2px;
+  list-style-image: none;
+  width: 1.28em;
+  padding-top: 1px;
 
   &:-moz-locale-dir(rtl) {
     list-style-image: url("chrome://global/skin/icons/arrow-left.svg");
   }
 
-  > image {
-    width: var(--menu-arrow-width);
-  }
-
   @media (-moz-platform: linux) {
     margin-block: 0;
     margin-inline: 6px 0;
@@ -160,6 +207,30 @@ menucaption {
   }
 }
 
+/* Override the native menu arrow with a custom one for Win10. */
+@media (-moz-windows-non-native-menus) {
+  .menu-right {
+    appearance: none;
+    width: unset;
+    list-style-image: url("chrome://global/skin/icons/arrow-right.svg");
+    -moz-context-properties: fill, fill-opacity;
+    fill: currentColor;
+    fill-opacity: var(--menu-icon-opacity);
+    margin-inline-end: 1em;
+    padding-top: 0;
+  }
+
+  .menu-right > image {
+    /* Do not make this smaller than the size of the svg, but upscale for
+     * people with large fonts. */
+    width: max(1em, 16px);
+  }
+
+  .menu-right:-moz-locale-dir(rtl) {
+    list-style-image: url("chrome://global/skin/icons/arrow-left.svg");
+  }
+}
+
 @media (-moz-platform: macos) {
   :is(.menu-accel, .menu-iconic-accel)[value] {
     margin-inline-start: 25px;
diff --git a/toolkit/themes/windows/global/global.css b/toolkit/themes/windows/global/global.css
index 7fadeb31ecf5..0ae976391c69 100644
--- a/toolkit/themes/windows/global/global.css
+++ b/toolkit/themes/windows/global/global.css
@@ -89,6 +89,15 @@ xul|separator.groove[orient="vertical"] {
   margin-inline: 0.4em;
 }
 
+/* Windows classic disabled labels */
+
+@media (-moz-windows-classic) {
+  xul|label[disabled="true"] {
+    color: ThreeDShadow;
+    text-shadow: 1px 1px ThreeDHighlight;
+  }
+}
+
 /* Content select */
 
 .contentSelectDropdown-ingroup > .menu-iconic-text {
diff --git a/toolkit/themes/windows/global/menu.css b/toolkit/themes/windows/global/menu.css
index 5af1892fd53d..86fdad31bc19 100644
--- a/toolkit/themes/windows/global/menu.css
+++ b/toolkit/themes/windows/global/menu.css
@@ -26,11 +26,27 @@ menubar > menu:-moz-window-inactive {
   padding: 1px 0;
 }
 
+.menu-text {
+  padding-inline-start: 1.45em !important;
+  appearance: auto;
+  -moz-default-appearance: menuitemtext;
+}
+
+.menu-text,
+.menu-iconic-text {
+  margin-inline-start: 2px !important;
+  padding-inline-end: 2px;
+}
+
 .menu-accel,
 .menu-iconic-accel {
   margin-inline: 0.74em 1.35em;
 }
 
+.menu-iconic-left {
+  width: 1.45em;
+}
+
 .menu-iconic-icon {
   width: 16px;
   height: 16px;
@@ -43,6 +59,13 @@ menubar > menu:-moz-window-inactive {
   padding-top: 2px;
 }
 
+/* Don't leave space for icons on Win10. */
+@media (-moz-windows-non-native-menus) {
+  .menu-text {
+    padding-inline-start: 0 !important;
+  }
+}
+
 menuitem:is([type="checkbox"], [type="radio"]):not([checked="true"]) > .menu-iconic-left > .menu-iconic-icon {
   display: none;
 }
@@ -53,6 +76,16 @@ menubar > menu[_moz-menuactive="true"]:not([disabled="true"]) {
   color: -moz-menubarhovertext;
 }
 
+@media (-moz-windows-classic) {
+  menubar > menu {
+    border: 2px solid transparent;
+  }
+
+  menubar > menu[_moz-menuactive="true"][open="true"] {
+    border-width: 3px 1px 1px 3px;
+  }
+}
+
 *|*:root[lwtheme] {
   menubar > menu {
     appearance: none;
@@ -70,6 +103,18 @@ menubar > menu[_moz-menuactive="true"]:not([disabled="true"]) {
 }
 
 
+@media (-moz-windows-default-theme) {
+  menubar > menu[lwtheme] {
+    appearance: auto;
+    -moz-default-appearance: menuitem;
+  }
+
+  menubar > menu[lwtheme][_moz-menuactive="true"]:not([disabled="true"]) {
+    color: inherit !important;
+    text-shadow: inherit;
+  }
+}
+
 /* ..... internal content .... */
 
 .menubar-text {
@@ -84,11 +129,29 @@ menulist > menupopup > menu {
   max-width: none;
 }
 
-menulist > menupopup > menuitem {
-  padding-inline-end: 1em;
+@media (-moz-windows-non-native-menus) {
+  menulist > menupopup > menuitem {
+    padding-inline-end: 1em;
+  }
 }
 
 
+@media not (-moz-windows-non-native-menus) {
+  menulist > menupopup > menuitem,
+  menulist > menupopup > menucaption,
+  menulist > menupopup > menu {
+    appearance: none !important;
+    border: 1px solid transparent;
+    padding-inline: 5px;
+  }
+
+  menulist > menupopup > menuitem[_moz-menuactive="true"],
+  menulist > menupopup > menu[_moz-menuactive="true"] {
+    background-color: highlight;
+    color: highlighttext;
+  }
+}
+
 menulist > menupopup > menuitem > .menu-iconic-left,
 menulist > menupopup > menucaption > .menu-iconic-left,
 menulist > menupopup > menu > .menu-iconic-left {
@@ -105,42 +168,93 @@ menulist > menupopup > menuitem[_moz-menuactive="true"][disabled="true"] {
   color: GrayText;
 }
 
+@media (-moz-windows-classic) {
+  menulist > menupopup > menuitem[disabled="true"]:not([_moz-menuactive="true"]) {
+    color: GrayText;
+    text-shadow: none;
+  }
+}
+
 menulist > menupopup > :is(menuitem, menucaption):not(.menuitem-iconic) > .menu-iconic-text {
   margin: 0;
 }
 
 /* ::::: checkbox and radio menuitems ::::: */
 
-menupopup[needsgutter] menu:not([icon], .menu-iconic),
-menupopup[needsgutter] menuitem:not([checked="true"], [icon], .menuitem-iconic) {
-  padding-inline-start: 36px;
+menuitem:is([type="checkbox"], [checked="true"]) {
+  appearance: auto;
+  -moz-default-appearance: checkmenuitem;
 }
 
-.menu-iconic > .menu-iconic-left,
-.menuitem-iconic > .menu-iconic-left {
-  margin-inline-end: 8px;
+menuitem:is([type="checkbox"], [checked="true"]) > .menu-iconic-left {
+  appearance: auto;
+  -moz-default-appearance: menucheckbox;
+  padding-top: 0;
 }
 
-menuitem[checked="true"] {
-  padding-inline-start: 12px;
+menuitem[type="radio"] {
+  appearance: auto;
+  -moz-default-appearance: radiomenuitem;
 }
 
-/* We need to do something to override the default style for selected
-   checkboxes and radio buttons because the native drawing we use on other
-   Windows versions looks pretty bad with the Win10 styles, so for now we'll
-   insert a generic checkmark icon for both types. */
-menuitem[checked="true"] > .menu-iconic-left {
-  -moz-context-properties: fill, fill-opacity;
-  fill: currentColor;
-  fill-opacity: var(--menu-icon-opacity);
-  list-style-image: url("chrome://global/skin/icons/menu-check.svg");
-  width: 16px;
-  margin-inline-end: 8px;
+menuitem[type="radio"] > .menu-iconic-left {
+  appearance: auto;
+  -moz-default-appearance: menuradio;
+  padding-top: 0;
+}
+
+menuitem:is([type="checkbox"], [checked="true"], [type="radio"]) > .menu-iconic-left > .menu-iconic-icon {
+  /* prevent .menu-iconic-icon from enforcing a minimal height of 16px (see bug 411064)
+     XXXzeniko apply that .menu-iconic-icon rule only for children of .menu-iconic */
+  display: none;
+}
+
+@media (-moz-windows-non-native-menus) {
+  menupopup[needsgutter] menu:not([icon], .menu-iconic),
+  menupopup[needsgutter] menuitem:not([checked="true"], [icon], .menuitem-iconic) {
+    padding-inline-start: 36px;
+  }
+
+  /* For Windows 10, checkbox, radio and iconified menuitems need the default
+     appearance disabled so they pick up our custom styles instead. */
+  .menu-iconic-left,
+  menuitem[type="checkbox"],
+  menuitem[type="radio"] {
+    appearance: none !important; /* to override more specific selectors above. */
+    width: unset;
+  }
+
+  .menu-iconic > .menu-iconic-left,
+  .menuitem-iconic > .menu-iconic-left {
+    margin-inline-end: 8px;
+  }
+
+  menuitem[checked="true"] {
+    padding-inline-start: 12px;
+  }
+
+  /* We need to do something to override the default style for selected
+     checkboxes and radio buttons because the native drawing we use on other
+     Windows versions looks pretty bad with the Win10 styles, so for now we'll
+     insert a generic checkmark icon for both types. */
+  menuitem[checked="true"] > .menu-iconic-left {
+    -moz-context-properties: fill, fill-opacity;
+    fill: currentColor;
+    fill-opacity: var(--menu-icon-opacity);
+    list-style-image: url("chrome://global/skin/icons/menu-check.svg");
+    width: 16px;
+    margin-inline-end: 8px;
+  }
+  menuitem[checked="true"] > .menu-iconic-left > .menu-iconic-icon {
+    display: initial;
+  }
 }
 
 /* ::::: menuseparator ::::: */
 
-menuseparator {
-  /* The side padding should align with the start of the menu item text. */
-  padding-inline: 1em;
+@media (-moz-windows-non-native-menus) {
+  menuseparator {
+    /* The side padding should align with the start of the menu item text. */
+    padding-inline: 1em;
+  }
 }
diff --git a/browser/themes/shared/browser-colors.css b/browser/themes/shared/browser-colors.css
index 96ff4f5903fb..65225943160f 100644
--- a/browser/themes/shared/browser-colors.css
+++ b/browser/themes/shared/browser-colors.css
@@ -3,6 +3,8 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 :root {
+@media not (-moz-platform: windows-win7) {
+  @media not (-moz-platform: windows-win8) {
   --toolbox-bgcolor: -moz-headerbar;
   --toolbox-textcolor: -moz-headerbartext;
   --toolbox-bgcolor-inactive: -moz-headerbarinactive;
@@ -14,6 +16,8 @@
     --toolbox-bgcolor-inactive: InactiveCaption;
     --toolbox-textcolor-inactive: InactiveCaptionText;
   }
+  }
+}
 
   --sidebar-background-color: -moz-sidebar;
   --sidebar-text-color: -moz-sidebartext;
@@ -52,10 +56,14 @@
     --tabs-navbar-separator-color: light-dark(rgba(0,0,0,.1), rgba(0,0,0,.3));
     --attention-dot-color: light-dark(#2ac3a2, #54ffbd);
 
+@media not (-moz-platform: windows-win7) {
+  @media not (-moz-platform: windows-win8) {
     --toolbox-bgcolor: var(--lwt-accent-color);
     --toolbox-bgcolor-inactive: var(--lwt-accent-color-inactive, var(--lwt-accent-color));
     --toolbox-textcolor: var(--lwt-text-color, currentColor);
     --toolbox-textcolor-inactive: var(--lwt-text-color, currentColor);
+  }
+}
 
     @media not (prefers-contrast) {
       --focus-outline-color: light-dark(#0061E0, #00DDFF);
@@ -108,6 +116,8 @@
 
     /* stylelint-disable-next-line media-query-no-invalid */
     @media not ((-moz-windows-mica) or ((-moz-windows-accent-color-in-titlebar) and (-moz-bool-pref: "browser.theme.windows.accent-color-in-tabs.enabled"))) {
+@media not (-moz-platform: windows-win7) {
+  @media not (-moz-platform: windows-win8) {
       --toolbox-bgcolor: light-dark(rgb(240, 240, 244), rgb(28, 27, 34));
       --toolbox-textcolor: light-dark(rgb(21, 20, 26), rgb(251, 251, 254));
       --toolbox-bgcolor-inactive: var(--toolbox-bgcolor);
@@ -115,6 +125,8 @@
       &:where([tabsintitlebar]) {
         --toolbox-bgcolor-inactive: light-dark(rgb(235, 235, 239), rgb(31, 30, 37));
       }
+  }
+}
     }
 
     --toolbar-color: light-dark(rgb(21, 20, 26), rgb(251, 251, 254));
