diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
index 01bcd17750a6..e887c40a8cc2 100644
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -4671,8 +4671,12 @@ let gShareUtils = {
       return;
     }
 
-    // We only support "share URL" on macOS and on Windows:
-    if (AppConstants.platform != "macosx" && AppConstants.platform != "win") {
+    // We only support "share URL" on macOS and on Windows 10:
+    if (
+      AppConstants.platform != "macosx" &&
+      // Windows 10's internal NT version number was initially 6.4
+      !AppConstants.isPlatformAndVersionAtLeast("win", "6.4")
+    ) {
       return;
     }
 
diff --git a/browser/base/content/test/contextMenu/browser_contextmenu_share_win.js b/browser/base/content/test/contextMenu/browser_contextmenu_share_win.js
index 4df5ee6b210f..716da584c511 100644
--- a/browser/base/content/test/contextMenu/browser_contextmenu_share_win.js
+++ b/browser/base/content/test/contextMenu/browser_contextmenu_share_win.js
@@ -41,6 +41,12 @@ add_task(async function test_contextmenu_share_win() {
       "hidden"
     );
     let itemCreated = contextMenu.querySelector(".share-tab-url-item");
+    if (!AppConstants.isPlatformAndVersionAtLeast("win", "6.4")) {
+      Assert.ok(!itemCreated, "We only expose share on windows 10 and above");
+      contextMenu.hidePopup();
+      await contextMenuClosedPromise;
+      return;
+    }
 
     ok(itemCreated, "Got Share item on Windows 10");
 
diff --git a/browser/base/content/test/contextMenu/browser_contextmenu_touch.js b/browser/base/content/test/contextMenu/browser_contextmenu_touch.js
index 8a04bd180ca4..98de2b12f8e2 100644
--- a/browser/base/content/test/contextMenu/browser_contextmenu_touch.js
+++ b/browser/base/content/test/contextMenu/browser_contextmenu_touch.js
@@ -34,9 +34,9 @@ async function openAndCheckContextMenu(contextMenu, target) {
   contextMenu.hidePopup();
 }
 
-// Ensure that we can run touch events properly for windows
+// Ensure that we can run touch events properly for windows [10]
 add_setup(async function () {
-  let isWindows = AppConstants.platform == "win";
+  let isWindows = AppConstants.isPlatformAndVersionAtLeast("win", "10.0");
   await SpecialPowers.pushPrefEnv({
     set: [["apz.test.fails_with_native_injection", isWindows]],
   });
diff --git a/browser/base/content/test/forms/browser_selectpopup_colors.js b/browser/base/content/test/forms/browser_selectpopup_colors.js
index 63cece0ce503..00b399c67259 100644
--- a/browser/base/content/test/forms/browser_selectpopup_colors.js
+++ b/browser/base/content/test/forms/browser_selectpopup_colors.js
@@ -793,7 +793,7 @@ add_task(async function test_scrollbar_props() {
   BrowserTestUtils.removeTab(tab);
 });
 
-if (AppConstants.platform == "win") {
+if (AppConstants.isPlatformAndVersionAtLeast("win", "10")) {
   add_task(async function test_darkmode() {
     let lightSelectColor = rgbaToString(
       InspectorUtils.colorToRGBA("MenuText", document)
diff --git a/browser/base/content/test/touch/browser_menu_touch.js b/browser/base/content/test/touch/browser_menu_touch.js
index 385b050b37f2..0cb605675cde 100644
--- a/browser/base/content/test/touch/browser_menu_touch.js
+++ b/browser/base/content/test/touch/browser_menu_touch.js
@@ -111,9 +111,9 @@ async function openAndCheckCustomizationUIMenu(target) {
   menu.hidePopup();
 }
 
-// Ensure that we can run touch events properly for windows
+// Ensure that we can run touch events properly for windows [10]
 add_setup(async function () {
-  let isWindows = AppConstants.platform == "win";
+  let isWindows = AppConstants.isPlatformAndVersionAtLeast("win", "10.0");
   await SpecialPowers.pushPrefEnv({
     set: [["apz.test.fails_with_native_injection", isWindows]],
   });
diff --git a/browser/components/customizableui/CustomizeMode.sys.mjs b/browser/components/customizableui/CustomizeMode.sys.mjs
index 5f6d01d8337e..38ae87ced6f9 100644
--- a/browser/components/customizableui/CustomizeMode.sys.mjs
+++ b/browser/components/customizableui/CustomizeMode.sys.mjs
@@ -1463,8 +1463,9 @@ CustomizeMode.prototype = {
       }
     }
 
-    // Add menu items for automatically switching to Touch mode in Windows Tablet Mode.
-    if (AppConstants.platform == "win") {
+    // Add menu items for automatically switching to Touch mode in Windows Tablet Mode,
+    // which is only available in Windows 10.
+    if (AppConstants.isPlatformAndVersionAtLeast("win", "10")) {
       let spacer = doc.getElementById("customization-uidensity-touch-spacer");
       let checkbox = doc.getElementById(
         "customization-uidensity-autotouchmode-checkbox"
diff --git a/browser/components/customizableui/test/browser_customizemode_uidensity.js b/browser/components/customizableui/test/browser_customizemode_uidensity.js
index 9f22341f5661..12280fc49e3d 100644
--- a/browser/components/customizableui/test/browser_customizemode_uidensity.js
+++ b/browser/components/customizableui/test/browser_customizemode_uidensity.js
@@ -175,8 +175,8 @@ add_task(async function test_touch_mode_menuitem() {
   await testModeMenuitem("touch", window.gUIDensity.MODE_TOUCH);
 
   // Test the checkbox for automatic Touch Mode transition
-  // in Windows Tablet Mode.
-  if (AppConstants.platform == "win") {
+  // in Windows 10 Tablet Mode.
+  if (AppConstants.isPlatformAndVersionAtLeast("win", "10")) {
     await startCustomizing();
 
     let popupButton = document.getElementById("customization-uidensity-button");
diff --git a/browser/components/migration/MigrationUtils.sys.mjs b/browser/components/migration/MigrationUtils.sys.mjs
index 862f8b86e189..da701ee1b578 100644
--- a/browser/components/migration/MigrationUtils.sys.mjs
+++ b/browser/components/migration/MigrationUtils.sys.mjs
@@ -13,6 +13,7 @@ ChromeUtils.defineESModuleGetters(lazy, {
   PlacesUIUtils: "resource:///modules/PlacesUIUtils.sys.mjs",
   PlacesUtils: "resource://gre/modules/PlacesUtils.sys.mjs",
   Sqlite: "resource://gre/modules/Sqlite.sys.mjs",
+  WindowsRegistry: "resource://gre/modules/WindowsRegistry.sys.mjs",
   setTimeout: "resource://gre/modules/Timer.sys.mjs",
   MigrationWizardConstants:
     "chrome://browser/content/migration/migration-wizard-constants.mjs",
@@ -22,6 +23,7 @@ var gMigrators = null;
 var gFileMigrators = null;
 var gProfileStartup = null;
 var gL10n = null;
+var gPreviousDefaultBrowserKey = "";
 
 let gForceExitSpinResolve = false;
 let gKeepUndoData = false;
@@ -498,6 +500,51 @@ class MigrationUtils {
       console.error("Could not detect default browser: ", ex);
     }
 
+    // "firefox" is the least useful entry here, and might just be because we've set
+    // ourselves as the default (on Windows 7 and below). In that case, check if we
+    // have a registry key that tells us where to go:
+    if (
+      key == "firefox" &&
+      AppConstants.isPlatformAndVersionAtMost("win", "6.2")
+    ) {
+      // Because we remove the registry key, reading the registry key only works once.
+      // We save the value for subsequent calls to avoid hard-to-trace bugs when multiple
+      // consumers ask for this key.
+      if (gPreviousDefaultBrowserKey) {
+        key = gPreviousDefaultBrowserKey;
+      } else {
+        // We didn't have a saved value, so check the registry.
+        const kRegPath = "Software\\Mozilla\\Firefox";
+        let oldDefault = lazy.WindowsRegistry.readRegKey(
+          Ci.nsIWindowsRegKey.ROOT_KEY_CURRENT_USER,
+          kRegPath,
+          "OldDefaultBrowserCommand"
+        );
+        if (oldDefault) {
+          // Remove the key:
+          lazy.WindowsRegistry.removeRegKey(
+            Ci.nsIWindowsRegKey.ROOT_KEY_CURRENT_USER,
+            kRegPath,
+            "OldDefaultBrowserCommand"
+          );
+          try {
+            let file = Cc["@mozilla.org/file/local;1"].createInstance(
+              Ci.nsILocalFileWin
+            );
+            file.initWithCommandLine(oldDefault);
+            key =
+              APP_DESC_TO_KEY[file.getVersionInfoField("FileDescription")] ||
+              key;
+            // Save the value for future callers.
+            gPreviousDefaultBrowserKey = key;
+          } catch (ex) {
+            console.error(
+              "Could not convert old default browser value to description."
+            );
+          }
+        }
+      }
+    }
     return key;
   }
 
diff --git a/browser/components/aboutwelcome/modules/AboutWelcomeDefaults.sys.mjs b/browser/components/aboutwelcome/modules/AboutWelcomeDefaults.sys.mjs
index e3cf71b789e0..6a5ca2ac4f8a 100644
--- a/browser/components/aboutwelcome/modules/AboutWelcomeDefaults.sys.mjs
+++ b/browser/components/aboutwelcome/modules/AboutWelcomeDefaults.sys.mjs
@@ -690,6 +690,13 @@ async function prepareContentForReact(content) {
     return content;
   }
 
+  // Change content for Windows 7 because non-light themes aren't quite right.
+  if (AppConstants.isPlatformAndVersionAtMost("win", "6.1")) {
+    await lazy.AWScreenUtils.removeScreens(screens, screen =>
+      ["theme"].includes(screen.content?.tiles?.type)
+    );
+  }
+
   // Set the primary import button source based on attribution.
   if (content?.ua) {
     // If available, add the browser source to action data
diff --git a/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_default.js b/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_default.js
index 5dbb7575faf6..3872c076e6dc 100644
--- a/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_default.js
+++ b/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_default.js
@@ -196,6 +196,11 @@ add_task(async function test_multistage_aboutwelcome_default() {
 
   await onButtonClick(browser, "button.primary");
 
+  // No 3rd screen to go to for win7.
+  if (win7Content) {
+    return;
+  }
+
   await test_screen_content(
     browser,
     "multistage step 3",
@@ -363,6 +368,9 @@ add_task(async function test_AWMultistage_Primary_Action() {
 });
 
 add_task(async function test_AWMultistage_Secondary_Open_URL_Action() {
+  if (win7Content) {
+    return;
+  }
   let browser = await openAboutWelcome();
   let aboutWelcomeActor = await getAboutWelcomeParent(browser);
   const sandbox = sinon.createSandbox();
@@ -429,6 +437,11 @@ add_task(async function test_AWMultistage_Secondary_Open_URL_Action() {
 });
 
 add_task(async function test_AWMultistage_Themes() {
+  // No theme screen to test for win7.
+  if (win7Content) {
+    return;
+  }
+
   let browser = await openAboutWelcome();
   let aboutWelcomeActor = await getAboutWelcomeParent(browser);
 
@@ -575,6 +588,10 @@ add_task(async function test_AWMultistage_can_restore_theme() {
 });
 
 add_task(async function test_AWMultistage_Import() {
+  // No import screen to test for win7.
+  if (win7Content) {
+    return;
+  }
   let browser = await openAboutWelcome();
   let aboutWelcomeActor = await getAboutWelcomeParent(browser);
 
diff --git a/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_experimentAPI.js b/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_experimentAPI.js
index 7b038b4ecc59..8a98a5570d8c 100644
--- a/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_experimentAPI.js
+++ b/browser/components/aboutwelcome/tests/browser/browser_aboutwelcome_multistage_experimentAPI.js
@@ -257,49 +257,51 @@ add_task(async function test_multistage_aboutwelcome_experimentAPI() {
     sandbox.restore();
   });
 
-  // Test first (theme) screen.
-  await test_screen_content(
-    browser,
-    "multistage step 1",
-    // Expected selectors:
-    [
-      "div.onboardingContainer",
-      "main.AW_STEP1",
-      "div.secondary-cta",
-      "div.secondary-cta.top",
-      "button[value='secondary_button']",
-      "button[value='secondary_button_top']",
-      "label.select-item",
-      "input[type='radio']",
-    ],
-    // Unexpected selectors:
-    ["main.AW_STEP2", "main.AW_STEP3", "div.tiles-container.info"]
-  );
-
-  await onButtonClick(browser, "button.primary");
-
-  const { callCount } = aboutWelcomeActor.onContentMessage;
-  Assert.greaterOrEqual(callCount, 1, `${callCount} Stub was called`);
-  let clickCall;
-  for (let i = 0; i < callCount; i++) {
-    const call = aboutWelcomeActor.onContentMessage.getCall(i);
-    info(`Call #${i}: ${call.args[0]} ${JSON.stringify(call.args[1])}`);
-    if (call.calledWithMatch("", { event: "CLICK_BUTTON" })) {
-      clickCall = call;
+  // Test first (theme) screen for non-win7.
+  if (!win7Content) {
+    await test_screen_content(
+      browser,
+      "multistage step 1",
+      // Expected selectors:
+      [
+        "div.onboardingContainer",
+        "main.AW_STEP1",
+        "div.secondary-cta",
+        "div.secondary-cta.top",
+        "button[value='secondary_button']",
+        "button[value='secondary_button_top']",
+        "label.select-item",
+        "input[type='radio']",
+      ],
+      // Unexpected selectors:
+      ["main.AW_STEP2", "main.AW_STEP3", "div.tiles-container.info"]
+    );
+
+    await onButtonClick(browser, "button.primary");
+
+    const { callCount } = aboutWelcomeActor.onContentMessage;
+    Assert.greaterOrEqual(callCount, 1, `${callCount} Stub was called`);
+    let clickCall;
+    for (let i = 0; i < callCount; i++) {
+      const call = aboutWelcomeActor.onContentMessage.getCall(i);
+      info(`Call #${i}: ${call.args[0]} ${JSON.stringify(call.args[1])}`);
+      if (call.calledWithMatch("", { event: "CLICK_BUTTON" })) {
+        clickCall = call;
+      }
     }
-  }
 
-  Assert.equal(
-    clickCall.args[0],
-    "AWPage:TELEMETRY_EVENT",
-    "send telemetry event"
-  );
-
-  Assert.equal(
-    clickCall.args[1].message_id,
-    "MY-MOCHITEST-EXPERIMENT_0_AW_STEP1",
-    "Telemetry should join id defined in feature value with screen"
-  );
+    Assert.equal(
+      clickCall.args[0],
+      "AWPage:TELEMETRY_EVENT",
+      "send telemetry event"
+    );
+
+    Assert.equal(
+      clickCall.args[1].message_id,
+      "MY-MOCHITEST-EXPERIMENT_0_AW_STEP1",
+      "Telemetry should join id defined in feature value with screen"
+    );
+  }
 
   await test_screen_content(
     browser,
diff --git a/browser/components/newtab/test/browser/head.js b/browser/components/newtab/test/browser/head.js
index bdd46c2881df..7076ece216e1 100644
--- a/browser/components/newtab/test/browser/head.js
+++ b/browser/components/newtab/test/browser/head.js
@@ -22,6 +22,8 @@ const { sinon } = ChromeUtils.importESModule(
 const { sinon } = ChromeUtils.importESModule(
   "resource://testing-common/Sinon.sys.mjs"
 );
+// Test differently for windows 7 as theme screens are removed.
+const win7Content = AppConstants.isPlatformAndVersionAtMost("win", "6.1");
 
 function popPrefs() {
   return SpecialPowers.popPrefEnv();
diff --git a/browser/components/aboutwelcome/tests/unit/MultiStageAWProton.test.jsx b/browser/components/aboutwelcome/tests/unit/MultiStageAWProton.test.jsx
index 09b8a94e69d7..8b5ad4d992ac 100644
--- a/browser/components/aboutwelcome/tests/unit/MultiStageAWProton.test.jsx
+++ b/browser/components/aboutwelcome/tests/unit/MultiStageAWProton.test.jsx
@@ -607,5 +607,71 @@ describe("MultiStageAboutWelcomeProton module", () => {
         "test"
       );
     });
+    it("should remove theme screens on win7", async () => {
+      sandbox
+        .stub(global.AppConstants, "isPlatformAndVersionAtMost")
+        .returns(true);
+      sandbox
+        .stub(global.AWScreenUtils, "removeScreens")
+        .callsFake((screens, screen) =>
+          AWScreenUtils.removeScreens(screens, screen)
+        );
+
+      const { screens } = await AboutWelcomeDefaults.prepareContentForReact({
+        screens: [
+          {
+            content: {
+              tiles: { type: "theme" },
+            },
+          },
+          { id: "hello" },
+          {
+            content: {
+              tiles: { type: "theme" },
+            },
+          },
+          { id: "world" },
+        ],
+      });
+
+      assert.deepEqual(screens, [{ id: "hello" }, { id: "world" }]);
+    });
+    it("shouldn't remove colorway screens on win7", async () => {
+      sandbox
+        .stub(global.AppConstants, "isPlatformAndVersionAtMost")
+        .returns(true);
+      sandbox
+        .stub(global.AWScreenUtils, "removeScreens")
+        .callsFake((screens, screen) =>
+          AWScreenUtils.removeScreens(screens, screen)
+        );
+
+      const { screens } = await AboutWelcomeDefaults.prepareContentForReact({
+        screens: [
+          {
+            content: {
+              tiles: { type: "colorway" },
+            },
+          },
+          { id: "hello" },
+          {
+            content: {
+              tiles: { type: "theme" },
+            },
+          },
+          { id: "world" },
+        ],
+      });
+
+      assert.deepEqual(screens, [
+        {
+          content: {
+            tiles: { type: "colorway" },
+          },
+        },
+        { id: "hello" },
+        { id: "world" },
+      ]);
+    });
   });
 
diff --git a/browser/components/preferences/main.js b/browser/components/preferences/main.js
index 90847e76887a..183f2e8e92dc 100644
--- a/browser/components/preferences/main.js
+++ b/browser/components/preferences/main.js
@@ -487,10 +487,11 @@ var gMainPane = {
       backupGroup.removeAttribute("data-hidden-from-search");
     }
 
-    // For media control toggle button, we support it on Windows, macOS and
+    // For media control toggle button, we support it on Windows 8.1+ (NT6.3),
+    // MacOs 10.4+ (darwin8.0, but we already don't support that) and
     // gtk-based Linux.
     if (
-      AppConstants.platform == "win" ||
+      AppConstants.isPlatformAndVersionAtLeast("win", "6.3") ||
       AppConstants.platform == "macosx" ||
       AppConstants.MOZ_WIDGET_GTK
     ) {
diff --git a/browser/components/shell/ShellService.sys.mjs b/browser/components/shell/ShellService.sys.mjs
index 461613ad8763..6503faf0055c 100644
--- a/browser/components/shell/ShellService.sys.mjs
+++ b/browser/components/shell/ShellService.sys.mjs
@@ -9,6 +9,7 @@ const lazy = {};
 
 ChromeUtils.defineESModuleGetters(lazy, {
   NimbusFeatures: "resource://nimbus/ExperimentAPI.sys.mjs",
+  WindowsRegistry: "resource://gre/modules/WindowsRegistry.sys.mjs",
   ASRouter: "resource:///modules/asrouter/ASRouter.sys.mjs",
 });
 
@@ -60,6 +61,26 @@ let ShellServiceInternal = {
     return false;
   },
 
+  isDefaultBrowserOptOut() {
+    if (AppConstants.platform == "win") {
+      let optOutValue = lazy.WindowsRegistry.readRegKey(
+        Ci.nsIWindowsRegKey.ROOT_KEY_CURRENT_USER,
+        "Software\\Mozilla\\Firefox",
+        "DefaultBrowserOptOut"
+      );
+      lazy.WindowsRegistry.removeRegKey(
+        Ci.nsIWindowsRegKey.ROOT_KEY_CURRENT_USER,
+        "Software\\Mozilla\\Firefox",
+        "DefaultBrowserOptOut"
+      );
+      if (optOutValue == "True") {
+        Services.prefs.setBoolPref("browser.shell.checkDefaultBrowser", false);
+        return true;
+      }
+    }
+    return false;
+  },
+
   /**
    * Used to determine whether or not to show a "Set Default Browser"
    * query dialog. This attribute is true if the application is starting
@@ -78,6 +99,10 @@ let ShellServiceInternal = {
       return false;
     }
 
+    if (this.isDefaultBrowserOptOut()) {
+      return false;
+    }
+
     return true;
   },
 
@@ -315,9 +340,9 @@ let ShellServiceInternal = {
 
   // override nsIShellService.setDefaultBrowser() on the ShellService proxy.
   async setDefaultBrowser(forAllUsers) {
-    // On Windows, our best chance is to set UserChoice, so try that first.
+    // On Windows 10, our best chance is to set UserChoice, so try that first.
     if (
-      AppConstants.platform == "win" &&
+      AppConstants.isPlatformAndVersionAtLeast("win", "10") &&
       Services.prefs.getBoolPref("browser.shell.setDefaultBrowserUserChoice")
     ) {
       try {
@@ -361,7 +386,7 @@ let ShellServiceInternal = {
       return;
     }
 
-    if (AppConstants.platform == "win") {
+    if (AppConstants.isPlatformAndVersionAtLeast("win", "10")) {
       this.setAsDefaultPDFHandlerUserChoice();
     }
   },
diff --git a/browser/components/shell/content/setDesktopBackground.js b/browser/components/shell/content/setDesktopBackground.js
index 7448a3e07625..be6b108432c8 100644
--- a/browser/components/shell/content/setDesktopBackground.js
+++ b/browser/components/shell/content/setDesktopBackground.js
@@ -46,8 +46,11 @@ var gSetBackground = {
         multiMonitors = monitors.length > 1;
       }
 
-      if (!multiMonitors) {
-        // Hide span option on single monitor systems.
+      if (
+        !multiMonitors ||
+        AppConstants.isPlatformAndVersionAtMost("win", 6.1)
+      ) {
+        // Hide span option if < Win8 since that's when it was introduced.
         document.getElementById("spanPosition").hidden = true;
       }
     }
diff --git a/browser/components/shell/test/browser_setDefaultPDFHandler.js b/browser/components/shell/test/browser_setDefaultPDFHandler.js
index e7cad08f793c..8ba1d8653624 100644
--- a/browser/components/shell/test/browser_setDefaultPDFHandler.js
+++ b/browser/components/shell/test/browser_setDefaultPDFHandler.js
@@ -49,8 +49,11 @@ add_task(async function ready() {
   await ExperimentAPI.ready();
 });
 
-// Everything here is Windows.
-Assert.ok(AppConstants.platform == "win", "Platform is Windows");
+// Everything here is Windows 10+.
+Assert.ok(
+  AppConstants.isPlatformAndVersionAtLeast("win", "10"),
+  "Windows version 10+"
+);
 
 add_task(async function remoteEnableWithPDF() {
   let doCleanup = await ExperimentFakes.enrollWithFeatureConfig(
diff --git a/browser/components/uitour/UITour.sys.mjs b/browser/components/uitour/UITour.sys.mjs
index 029fb8331eee..9d039c280eb5 100644
--- a/browser/components/uitour/UITour.sys.mjs
+++ b/browser/components/uitour/UITour.sys.mjs
@@ -1821,7 +1821,7 @@ export var UITour = {
 
       let canSetDefaultBrowserInBackground = true;
       if (
-        AppConstants.platform == "win" ||
+        AppConstants.isPlatformAndVersionAtLeast("win", "6.2") ||
         AppConstants.isPlatformAndVersionAtLeast("macosx", "10.10")
       ) {
         canSetDefaultBrowserInBackground = false;
diff --git a/browser/modules/test/unit/test_InstallationTelemetry.js b/browser/modules/test/unit/test_InstallationTelemetry.js
index a2fe61605fb9..40280267102f 100644
--- a/browser/modules/test/unit/test_InstallationTelemetry.js
+++ b/browser/modules/test/unit/test_InstallationTelemetry.js
@@ -255,8 +255,8 @@ add_task(condition, async function testInstallationTelemetry() {
   // New timestamp and a check to make sure we can find installed MSIX packages
   // by overriding the prefixes a bit further down.
   fullData.install_timestamp = "2";
-  // This check only works on Windows
-  if (AppConstants.platform == "win") {
+  // This check only works on Windows 10 and above
+  if (AppConstants.isPlatformAndVersionAtLeast("win", "10")) {
     fullExtra.other_msix_inst = "true";
   }
   await writeJsonUtf16(dataFilePath, fullData);
diff --git a/toolkit/components/processtools/tests/browser/browser_test_procinfo.js b/toolkit/components/processtools/tests/browser/browser_test_procinfo.js
index a259377d25cc..4201060bd08c 100644
--- a/toolkit/components/processtools/tests/browser/browser_test_procinfo.js
+++ b/toolkit/components/processtools/tests/browser/browser_test_procinfo.js
@@ -8,6 +8,9 @@ const DUMMY_URL =
     "http://example.com"
   ) + "/dummy.html";
 
+const HAS_THREAD_NAMES =
+  AppConstants.platform != "win" ||
+  AppConstants.isPlatformAndVersionAtLeast("win", 10);
 const isFissionEnabled = SpecialPowers.useRemoteSubframes;
 
 const SAMPLE_SIZE = 10;
@@ -64,10 +67,13 @@ add_task(async function test_proc_info() {
 
         checkProcessCpuTime(parentProc);
 
-        Assert.ok(
-          parentProc.threads.some(thread => thread.name),
-          "At least one of the threads of the parent process is named"
-        );
+        // Under Windows, thread names appeared with Windows 10.
+        if (HAS_THREAD_NAMES) {
+          Assert.ok(
+            parentProc.threads.some(thread => thread.name),
+            "At least one of the threads of the parent process is named"
+          );
+        }
 
         Assert.ok(parentProc.memory > 0, "Memory was set");
 
diff --git a/toolkit/components/search/tests/xpcshell/test_searchSuggest.js b/toolkit/components/search/tests/xpcshell/test_searchSuggest.js
index e0a6c8ab0d7d..a069cf8a1136 100644
--- a/toolkit/components/search/tests/xpcshell/test_searchSuggest.js
+++ b/toolkit/components/search/tests/xpcshell/test_searchSuggest.js
@@ -8,6 +8,9 @@
 
 "use strict";
 
+const { AppConstants } = ChromeUtils.importESModule(
+  "resource://gre/modules/AppConstants.sys.mjs"
+);
 const { FormHistory } = ChromeUtils.importESModule(
   "resource://gre/modules/FormHistory.sys.mjs"
 );
@@ -802,7 +805,10 @@ add_task(async function unresolvable_server() {
   Assert.equal(result.local[0].value, "Unresolvable Server Entry");
   Assert.equal(result.remote.length, 0);
 
-  assertLatencyHistogram(histogram, true);
+  // This latency assert fails on Windows 7 (NT version 6.1), so skip it there.
+  if (!AppConstants.isPlatformAndVersionAtMost("win", "6.1")) {
+    assertLatencyHistogram(histogram, true);
+  }
 });
 
 // Exception handling
diff --git a/toolkit/components/telemetry/app/TelemetryEnvironment.sys.mjs b/toolkit/components/telemetry/app/TelemetryEnvironment.sys.mjs
index 064697006a1f..fbb17d65bf1f 100644
--- a/toolkit/components/telemetry/app/TelemetryEnvironment.sys.mjs
+++ b/toolkit/components/telemetry/app/TelemetryEnvironment.sys.mjs
@@ -2081,11 +2081,15 @@ EnvironmentCache.prototype = {
         data = { winPackageFamilyName, ...data };
       }
       data = { ...this._getProcessData(), ...data };
-      data.sec = this._getSecurityAppData();
     } else if (AppConstants.platform == "android") {
       data.device = this._getDeviceData();
     }
 
+    // Windows 8+
+    if (AppConstants.isPlatformAndVersionAtLeast("win", "6.2")) {
+      data.sec = this._getSecurityAppData();
+    }
+
     return data;
   },
 
diff --git a/toolkit/components/telemetry/tests/unit/TelemetryEnvironmentTesting.sys.mjs b/toolkit/components/telemetry/tests/unit/TelemetryEnvironmentTesting.sys.mjs
index 819889878c3b..729bc8cf2df4 100644
--- a/toolkit/components/telemetry/tests/unit/TelemetryEnvironmentTesting.sys.mjs
+++ b/toolkit/components/telemetry/tests/unit/TelemetryEnvironmentTesting.sys.mjs
@@ -696,8 +696,8 @@ export var TelemetryEnvironmentTesting = {
       lazy.Assert.ok(this.checkNullOrString(data.system.appleModelId));
     }
 
-    // This feature is only available on Windows
-    if (AppConstants.platform == "win") {
+    // This feature is only available on Windows 8+
+    if (AppConstants.isPlatformAndVersionAtLeast("win", "6.2")) {
       lazy.Assert.ok(
         "sec" in data.system,
         "sec must be available under data.system"
diff --git a/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js b/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
index 9267c96ce1fb..d5f8f8e9c4fe 100644
--- a/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
+++ b/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
@@ -580,13 +580,20 @@ add_task(async function sessionTimeExcludingAndIncludingSuspend() {
     "In test condition, the two uptimes should be close to each other"
   );
 
-  // This however should always hold.
-  Assert.greaterOrEqual(
-    withSuspend,
-    withoutSuspend,
-    `The uptime with suspend must always been greater or equal to the uptime
-     without suspend`
-  );
+  // This however should always hold, except on Windows < 10, where the two
+  // clocks are from different system calls, and it can fail in test condition
+  // because the machine has not been suspended.
+  if (
+    AppConstants.platform != "win" ||
+    AppConstants.isPlatformAndVersionAtLeast("win", "10.0")
+  ) {
+    Assert.greaterOrEqual(
+      withSuspend,
+      withoutSuspend,
+      `The uptime with suspend must always been greater or equal to the uptime
+       without suspend`
+    );
+  }
 
   Services.prefs.setBoolPref(
     "toolkit.telemetry.testing.overrideProductsCheck",
diff --git a/toolkit/modules/subprocess/subprocess_win.sys.mjs b/toolkit/modules/subprocess/subprocess_win.sys.mjs
index 67fa9ab84afa..5150f4a4b115 100644
--- a/toolkit/modules/subprocess/subprocess_win.sys.mjs
+++ b/toolkit/modules/subprocess/subprocess_win.sys.mjs
@@ -4,6 +4,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+import { AppConstants } from "resource://gre/modules/AppConstants.sys.mjs";
 import {
   BaseProcess,
   PromiseWorker,
@@ -35,7 +36,10 @@ class WinPromiseWorker extends PromiseWorker {
 
     this.call("init", [
       {
-        breakAwayFromJob: false,
+        breakAwayFromJob: !AppConstants.isPlatformAndVersionAtLeast(
+          "win",
+          "6.2"
+        ),
         comspec: Services.env.get("COMSPEC"),
         signalEvent: String(
           ctypes.cast(this.signalEvent, ctypes.uintptr_t).value
diff --git a/toolkit/modules/subprocess/test/xpcshell/test_subprocess.js b/toolkit/modules/subprocess/test/xpcshell/test_subprocess.js
index e71b6b520378..77d09f41ae4b 100644
--- a/toolkit/modules/subprocess/test/xpcshell/test_subprocess.js
+++ b/toolkit/modules/subprocess/test/xpcshell/test_subprocess.js
@@ -446,7 +446,7 @@ add_task(async function test_subprocess_invalid_json() {
   equal(exitCode, 0, "Got expected exit code");
 });
 
-if (AppConstants.platform == "win") {
+if (AppConstants.isPlatformAndVersionAtLeast("win", "6")) {
   add_task(async function test_subprocess_inherited_descriptors() {
     let { libc, win32 } = ChromeUtils.importESModule(
       "resource://gre/modules/subprocess/subprocess_win.sys.mjs"
diff --git a/toolkit/mozapps/extensions/test/browser/browser_gmpProvider.js b/toolkit/mozapps/extensions/test/browser/browser_gmpProvider.js
index 356aa5b46d89..e99cd5d944ef 100644
--- a/toolkit/mozapps/extensions/test/browser/browser_gmpProvider.js
+++ b/toolkit/mozapps/extensions/test/browser/browser_gmpProvider.js
@@ -362,7 +362,7 @@ add_task(async function testEmeSupport() {
       }
     } else if (addon.id == WIDEVINE_L3_ID) {
       if (
-        AppConstants.platform == "win" ||
+        AppConstants.isPlatformAndVersionAtLeast("win", "6") ||
         AppConstants.platform == "macosx" ||
         AppConstants.platform == "linux"
       ) {
