

diff --git a/widget/windows/nsWindow.cpp b/widget/windows/nsWindow.cpp
index e6ae113b37b19..167f794ef0722 100644
--- a/widget/windows/nsWindow.cpp
+++ b/widget/windows/nsWindow.cpp
@@ -9126,7 +9126,8 @@ void nsWindow::FrameState::EnsureSizeMode(nsSizeMode aMode,
     return;
   }
 
-  if (StaticPrefs::widget_windows_fullscreen_remind_taskbar()) {
+  if (::IsWin10OrLater() &&
+      StaticPrefs::widget_windows_fullscreen_remind_taskbar()) {
     // If we're unminimizing a window, asynchronously notify the taskbar after
     // the message has been processed. This redundant notification works around
     // a race condition in explorer.exe. (See bug 1835851, or comments in
diff --git a/widget/windows/nsWindowTaskbarConcealer.cpp b/widget/windows/nsWindowTaskbarConcealer.cpp
index 24358a433eeb2..38910fbd3a085 100644
--- a/widget/windows/nsWindowTaskbarConcealer.cpp
+++ b/widget/windows/nsWindowTaskbarConcealer.cpp
@@ -428,17 +428,19 @@ void nsWindow::TaskbarConcealer::OnAsyncStateUpdateRequest(HWND hwnd) {
   // [0]
   // https://github.com/dechamps/RudeWindowFixer#a-race-condition-activating-a-minimized-window
   //
-  static UINT const shellHookMsg = ::RegisterWindowMessageW(L"SHELLHOOK");
-  if (shellHookMsg != 0) {
-    // Identifying the particular thread of the particular instance of the
-    // shell associated with our current desktop is probably possible, but
-    // also probably not worth the effort. Just broadcast the message
-    // globally.
-    DWORD info = BSM_APPLICATIONS;
-    ::BroadcastSystemMessage(BSF_POSTMESSAGE | BSF_IGNORECURRENTTASK, &info,
-                             shellHookMsg, HSHELL_WINDOWACTIVATED,
-                             (LPARAM)hwnd);
-  }
+  if (::IsWin10OrLater()) {
+    static UINT const shellHookMsg = ::RegisterWindowMessageW(L"SHELLHOOK");
+    if (shellHookMsg != 0) {
+      // Identifying the particular thread of the particular instance of the
+      // shell associated with our current desktop is probably possible, but
+      // also probably not worth the effort. Just broadcast the message
+      // globally.
+      DWORD info = BSM_APPLICATIONS;
+      ::BroadcastSystemMessage(BSF_POSTMESSAGE | BSF_IGNORECURRENTTASK, &info,
+                               shellHookMsg, HSHELL_WINDOWACTIVATED,
+                               (LPARAM)hwnd);
+    }
+   }
 }
 
 void nsWindow::TaskbarConcealer::OnCloakChanged() {
