diff --git a/layout/forms/moz.build b/layout/forms/moz.build
index 93ec0a430c20..838a17bf9238 100644
--- a/layout/forms/moz.build
+++ b/layout/forms/moz.build
@@ -19,6 +19,7 @@ EXPORTS += [
 UNIFIED_SOURCES += [
     "HTMLSelectEventListener.cpp",
     "ListMutationObserver.cpp",
+    "nsButtonFrameRenderer.cpp",
     "nsCheckboxRadioFrame.cpp",
     "nsColorControlFrame.cpp",
     "nsComboboxControlFrame.cpp",
diff --git a/layout/forms/nsButtonFrameRenderer.cpp b/layout/forms/nsButtonFrameRenderer.cpp
new file mode 100644
index 000000000000..5851d9cb0a7d
--- /dev/null
+++ b/layout/forms/nsButtonFrameRenderer.cpp
@@ -0,0 +1,456 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+#include "nsButtonFrameRenderer.h"
+#include "nsCSSRendering.h"
+#include "nsPresContext.h"
+#include "nsPresContextInlines.h"
+#include "mozilla/ServoStyleSet.h"
+#include "mozilla/Unused.h"
+#include "nsDisplayList.h"
+#include "nsITheme.h"
+#include "nsIFrame.h"
+#include "mozilla/dom/Element.h"
+
+#include "gfxUtils.h"
+#include "mozilla/layers/RenderRootStateManager.h"
+
+using namespace mozilla;
+using namespace mozilla::image;
+using namespace mozilla::layers;
+
+namespace mozilla {
+class nsDisplayButtonBoxShadowOuter;
+class nsDisplayButtonBorder;
+class nsDisplayButtonForeground;
+}  // namespace mozilla
+
+nsButtonFrameRenderer::nsButtonFrameRenderer() : mFrame(nullptr) {
+  MOZ_COUNT_CTOR(nsButtonFrameRenderer);
+}
+
+nsButtonFrameRenderer::~nsButtonFrameRenderer() {
+  MOZ_COUNT_DTOR(nsButtonFrameRenderer);
+}
+
+void nsButtonFrameRenderer::SetFrame(nsIFrame* aFrame,
+                                     nsPresContext* aPresContext) {
+  mFrame = aFrame;
+  ReResolveStyles(aPresContext);
+}
+
+nsIFrame* nsButtonFrameRenderer::GetFrame() { return mFrame; }
+
+nsresult nsButtonFrameRenderer::DisplayButton(nsDisplayListBuilder* aBuilder,
+                                              nsDisplayList* aBackground,
+                                              nsDisplayList* aForeground) {
+  if (!mFrame->StyleEffects()->mBoxShadow.IsEmpty()) {
+    aBackground->AppendNewToTop<nsDisplayButtonBoxShadowOuter>(aBuilder,
+                                                               GetFrame());
+  }
+
+  nsRect buttonRect =
+      mFrame->GetRectRelativeToSelf() + aBuilder->ToReferenceFrame(mFrame);
+
+  const AppendedBackgroundType result =
+      nsDisplayBackgroundImage::AppendBackgroundItemsToTop(
+          aBuilder, mFrame, buttonRect, aBackground);
+  if (result == AppendedBackgroundType::None) {
+    aBuilder->BuildCompositorHitTestInfoIfNeeded(GetFrame(), aBackground);
+  }
+
+  aBackground->AppendNewToTop<nsDisplayButtonBorder>(aBuilder, GetFrame(),
+                                                     this);
+
+  // Only display focus rings if we actually have them. Since at most one
+  // button would normally display a focus ring, most buttons won't have them.
+  if (mInnerFocusStyle && mInnerFocusStyle->StyleBorder()->HasBorder() &&
+      mFrame->IsThemed() &&
+      mFrame->PresContext()->Theme()->ThemeWantsButtonInnerFocusRing()) {
+    aForeground->AppendNewToTop<nsDisplayButtonForeground>(aBuilder, GetFrame(),
+                                                           this);
+  }
+  return NS_OK;
+}
+
+void nsButtonFrameRenderer::GetButtonInnerFocusRect(const nsRect& aRect,
+                                                    nsRect& aResult) {
+  aResult = aRect;
+  aResult.Deflate(mFrame->GetUsedBorderAndPadding());
+
+  if (mInnerFocusStyle) {
+    nsMargin innerFocusPadding(0, 0, 0, 0);
+    mInnerFocusStyle->StylePadding()->GetPadding(innerFocusPadding);
+
+    nsMargin framePadding = mFrame->GetUsedPadding();
+
+    innerFocusPadding.top = std::min(innerFocusPadding.top, framePadding.top);
+    innerFocusPadding.right =
+        std::min(innerFocusPadding.right, framePadding.right);
+    innerFocusPadding.bottom =
+        std::min(innerFocusPadding.bottom, framePadding.bottom);
+    innerFocusPadding.left =
+        std::min(innerFocusPadding.left, framePadding.left);
+
+    aResult.Inflate(innerFocusPadding);
+  }
+}
+
+ImgDrawResult nsButtonFrameRenderer::PaintInnerFocusBorder(
+    nsDisplayListBuilder* aBuilder, nsPresContext* aPresContext,
+    gfxContext& aRenderingContext, const nsRect& aDirtyRect,
+    const nsRect& aRect) {
+  // we draw the -moz-focus-inner border just inside the button's
+  // normal border and padding, to match Windows themes.
+
+  nsRect rect;
+
+  PaintBorderFlags flags = aBuilder->ShouldSyncDecodeImages()
+                               ? PaintBorderFlags::SyncDecodeImages
+                               : PaintBorderFlags();
+
+  ImgDrawResult result = ImgDrawResult::SUCCESS;
+
+  if (mInnerFocusStyle) {
+    GetButtonInnerFocusRect(aRect, rect);
+
+    result &=
+        nsCSSRendering::PaintBorder(aPresContext, aRenderingContext, mFrame,
+                                    aDirtyRect, rect, mInnerFocusStyle, flags);
+  }
+
+  return result;
+}
+
+Maybe<nsCSSBorderRenderer>
+nsButtonFrameRenderer::CreateInnerFocusBorderRenderer(
+    nsDisplayListBuilder* aBuilder, nsPresContext* aPresContext,
+    gfxContext* aRenderingContext, const nsRect& aDirtyRect,
+    const nsRect& aRect, bool* aBorderIsEmpty) {
+  if (mInnerFocusStyle) {
+    nsRect rect;
+    GetButtonInnerFocusRect(aRect, rect);
+
+    gfx::DrawTarget* dt =
+        aRenderingContext ? aRenderingContext->GetDrawTarget() : nullptr;
+    return nsCSSRendering::CreateBorderRenderer(
+        aPresContext, dt, mFrame, aDirtyRect, rect, mInnerFocusStyle,
+        aBorderIsEmpty);
+  }
+
+  return Nothing();
+}
+
+ImgDrawResult nsButtonFrameRenderer::PaintBorder(nsDisplayListBuilder* aBuilder,
+                                                 nsPresContext* aPresContext,
+                                                 gfxContext& aRenderingContext,
+                                                 const nsRect& aDirtyRect,
+                                                 const nsRect& aRect) {
+  // get the button rect this is inside the focus and outline rects
+  nsRect buttonRect = aRect;
+  ComputedStyle* context = mFrame->Style();
+
+  PaintBorderFlags borderFlags = aBuilder->ShouldSyncDecodeImages()
+                                     ? PaintBorderFlags::SyncDecodeImages
+                                     : PaintBorderFlags();
+
+  nsCSSRendering::PaintBoxShadowInner(aPresContext, aRenderingContext, mFrame,
+                                      buttonRect);
+
+  ImgDrawResult result =
+      nsCSSRendering::PaintBorder(aPresContext, aRenderingContext, mFrame,
+                                  aDirtyRect, buttonRect, context, borderFlags);
+
+  return result;
+}
+
+/**
+ * Call this when styles change
+ */
+void nsButtonFrameRenderer::ReResolveStyles(nsPresContext* aPresContext) {
+  // get all the styles
+  ServoStyleSet* styleSet = aPresContext->StyleSet();
+
+  // get styles assigned to -moz-focus-inner (ie dotted border on Windows)
+  mInnerFocusStyle = styleSet->ProbePseudoElementStyle(
+      *mFrame->GetContent()->AsElement(), PseudoStyleType::mozFocusInner,
+      nullptr, mFrame->Style());
+}
+
+ComputedStyle* nsButtonFrameRenderer::GetComputedStyle(int32_t aIndex) const {
+  switch (aIndex) {
+    case NS_BUTTON_RENDERER_FOCUS_INNER_CONTEXT_INDEX:
+      return mInnerFocusStyle;
+    default:
+      return nullptr;
+  }
+}
+
+void nsButtonFrameRenderer::SetComputedStyle(int32_t aIndex,
+                                             ComputedStyle* aComputedStyle) {
+  switch (aIndex) {
+    case NS_BUTTON_RENDERER_FOCUS_INNER_CONTEXT_INDEX:
+      mInnerFocusStyle = aComputedStyle;
+      break;
+  }
+}
+
+namespace mozilla {
+
+class nsDisplayButtonBoxShadowOuter : public nsPaintedDisplayItem {
+ public:
+  nsDisplayButtonBoxShadowOuter(nsDisplayListBuilder* aBuilder,
+                                nsIFrame* aFrame)
+      : nsPaintedDisplayItem(aBuilder, aFrame) {
+    MOZ_COUNT_CTOR(nsDisplayButtonBoxShadowOuter);
+  }
+  MOZ_COUNTED_DTOR_OVERRIDE(nsDisplayButtonBoxShadowOuter)
+
+  virtual bool CreateWebRenderCommands(
+      mozilla::wr::DisplayListBuilder& aBuilder,
+      mozilla::wr::IpcResourceUpdateQueue& aResources,
+      const StackingContextHelper& aSc,
+      mozilla::layers::RenderRootStateManager* aManager,
+      nsDisplayListBuilder* aDisplayListBuilder) override;
+
+  bool CanBuildWebRenderDisplayItems();
+
+  virtual void Paint(nsDisplayListBuilder* aBuilder, gfxContext* aCtx) override;
+  virtual nsRect GetBounds(nsDisplayListBuilder* aBuilder,
+                           bool* aSnap) const override;
+  NS_DISPLAY_DECL_NAME("ButtonBoxShadowOuter", TYPE_BUTTON_BOX_SHADOW_OUTER)
+};
+
+nsRect nsDisplayButtonBoxShadowOuter::GetBounds(nsDisplayListBuilder* aBuilder,
+                                                bool* aSnap) const {
+  *aSnap = false;
+  return mFrame->InkOverflowRectRelativeToSelf() + ToReferenceFrame();
+}
+
+void nsDisplayButtonBoxShadowOuter::Paint(nsDisplayListBuilder* aBuilder,
+                                          gfxContext* aCtx) {
+  nsRect frameRect = nsRect(ToReferenceFrame(), mFrame->GetSize());
+
+  nsCSSRendering::PaintBoxShadowOuter(mFrame->PresContext(), *aCtx, mFrame,
+                                      frameRect, GetPaintRect(aBuilder, aCtx));
+}
+
+bool nsDisplayButtonBoxShadowOuter::CanBuildWebRenderDisplayItems() {
+  // FIXME(emilio): Is this right? That doesn't make much sense.
+  if (mFrame->StyleEffects()->mBoxShadow.IsEmpty()) {
+    return false;
+  }
+
+  bool hasBorderRadius;
+  bool nativeTheme =
+      nsCSSRendering::HasBoxShadowNativeTheme(mFrame, hasBorderRadius);
+
+  // We don't support native themed things yet like box shadows around
+  // input buttons.
+  return !nativeTheme;
+}
+
+bool nsDisplayButtonBoxShadowOuter::CreateWebRenderCommands(
+    mozilla::wr::DisplayListBuilder& aBuilder,
+    mozilla::wr::IpcResourceUpdateQueue& aResources,
+    const StackingContextHelper& aSc,
+    mozilla::layers::RenderRootStateManager* aManager,
+    nsDisplayListBuilder* aDisplayListBuilder) {
+  if (!CanBuildWebRenderDisplayItems()) {
+    return false;
+  }
+  int32_t appUnitsPerDevPixel = mFrame->PresContext()->AppUnitsPerDevPixel();
+  nsRect shadowRect = nsRect(ToReferenceFrame(), mFrame->GetSize());
+  LayoutDeviceRect deviceBox =
+      LayoutDeviceRect::FromAppUnits(shadowRect, appUnitsPerDevPixel);
+  wr::LayoutRect deviceBoxRect = wr::ToLayoutRect(deviceBox);
+
+  bool dummy;
+  LayoutDeviceRect clipRect = LayoutDeviceRect::FromAppUnits(
+      GetBounds(aDisplayListBuilder, &dummy), appUnitsPerDevPixel);
+  wr::LayoutRect deviceClipRect = wr::ToLayoutRect(clipRect);
+
+  bool hasBorderRadius;
+  Unused << nsCSSRendering::HasBoxShadowNativeTheme(mFrame, hasBorderRadius);
+
+  LayoutDeviceSize zeroSize;
+  wr::BorderRadius borderRadius =
+      wr::ToBorderRadius(zeroSize, zeroSize, zeroSize, zeroSize);
+  if (hasBorderRadius) {
+    gfx::RectCornerRadii borderRadii;
+    hasBorderRadius = nsCSSRendering::GetBorderRadii(shadowRect, shadowRect,
+                                                     mFrame, borderRadii);
+    if (hasBorderRadius) {
+      borderRadius = wr::ToBorderRadius(borderRadii);
+    }
+  }
+
+  const Span<const StyleBoxShadow> shadows =
+      mFrame->StyleEffects()->mBoxShadow.AsSpan();
+  MOZ_ASSERT(!shadows.IsEmpty());
+
+  for (const StyleBoxShadow& shadow : Reversed(shadows)) {
+    if (shadow.inset) {
+      continue;
+    }
+    float blurRadius =
+        float(shadow.base.blur.ToAppUnits()) / float(appUnitsPerDevPixel);
+    gfx::DeviceColor shadowColor =
+        ToDeviceColor(nsCSSRendering::GetShadowColor(shadow.base, mFrame, 1.0));
+
+    LayoutDevicePoint shadowOffset = LayoutDevicePoint::FromAppUnits(
+        nsPoint(shadow.base.horizontal.ToAppUnits(),
+                shadow.base.vertical.ToAppUnits()),
+        appUnitsPerDevPixel);
+
+    float spreadRadius =
+        float(shadow.spread.ToAppUnits()) / float(appUnitsPerDevPixel);
+
+    aBuilder.PushBoxShadow(deviceBoxRect, deviceClipRect, !BackfaceIsHidden(),
+                           deviceBoxRect, wr::ToLayoutVector2D(shadowOffset),
+                           wr::ToColorF(shadowColor), blurRadius, spreadRadius,
+                           borderRadius, wr::BoxShadowClipMode::Outset);
+  }
+  return true;
+}
+
+class nsDisplayButtonBorder final : public nsPaintedDisplayItem {
+ public:
+  nsDisplayButtonBorder(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
+                        nsButtonFrameRenderer* aRenderer)
+      : nsPaintedDisplayItem(aBuilder, aFrame), mBFR(aRenderer) {
+    MOZ_COUNT_CTOR(nsDisplayButtonBorder);
+  }
+  MOZ_COUNTED_DTOR_OVERRIDE(nsDisplayButtonBorder)
+
+  virtual void HitTest(nsDisplayListBuilder* aBuilder, const nsRect& aRect,
+                       HitTestState* aState,
+                       nsTArray<nsIFrame*>* aOutFrames) override {
+    aOutFrames->AppendElement(mFrame);
+  }
+  virtual void Paint(nsDisplayListBuilder* aBuilder, gfxContext* aCtx) override;
+  virtual nsRect GetBounds(nsDisplayListBuilder* aBuilder,
+                           bool* aSnap) const override;
+  virtual bool CreateWebRenderCommands(
+      mozilla::wr::DisplayListBuilder& aBuilder,
+      mozilla::wr::IpcResourceUpdateQueue& aResources,
+      const StackingContextHelper& aSc,
+      mozilla::layers::RenderRootStateManager* aManager,
+      nsDisplayListBuilder* aDisplayListBuilder) override;
+  NS_DISPLAY_DECL_NAME("ButtonBorderBackground", TYPE_BUTTON_BORDER_BACKGROUND)
+ private:
+  nsButtonFrameRenderer* mBFR;
+};
+
+bool nsDisplayButtonBorder::CreateWebRenderCommands(
+    mozilla::wr::DisplayListBuilder& aBuilder,
+    mozilla::wr::IpcResourceUpdateQueue& aResources,
+    const StackingContextHelper& aSc,
+    mozilla::layers::RenderRootStateManager* aManager,
+    nsDisplayListBuilder* aDisplayListBuilder) {
+  // This is really a combination of paint box shadow inner +
+  // paint border.
+  aBuilder.StartGroup(this);
+  const nsRect buttonRect = nsRect(ToReferenceFrame(), mFrame->GetSize());
+  bool snap;
+  nsRect visible = GetBounds(aDisplayListBuilder, &snap);
+  nsDisplayBoxShadowInner::CreateInsetBoxShadowWebRenderCommands(
+      aBuilder, aSc, visible, mFrame, buttonRect);
+
+  bool borderIsEmpty = false;
+  Maybe<nsCSSBorderRenderer> br = nsCSSRendering::CreateBorderRenderer(
+      mFrame->PresContext(), nullptr, mFrame, nsRect(),
+      nsRect(ToReferenceFrame(), mFrame->GetSize()), mFrame->Style(),
+      &borderIsEmpty, mFrame->GetSkipSides());
+  if (!br) {
+    if (borderIsEmpty) {
+      aBuilder.FinishGroup();
+    } else {
+      aBuilder.CancelGroup(true);
+    }
+
+    return borderIsEmpty;
+  }
+
+  br->CreateWebRenderCommands(this, aBuilder, aResources, aSc);
+  aBuilder.FinishGroup();
+  return true;
+}
+
+void nsDisplayButtonBorder::Paint(nsDisplayListBuilder* aBuilder,
+                                  gfxContext* aCtx) {
+  NS_ASSERTION(mFrame, "No frame?");
+  nsPresContext* pc = mFrame->PresContext();
+  nsRect r = nsRect(ToReferenceFrame(), mFrame->GetSize());
+
+  // draw the border and background inside the focus and outline borders
+  Unused << mBFR->PaintBorder(aBuilder, pc, *aCtx, GetPaintRect(aBuilder, aCtx),
+                              r);
+}
+
+nsRect nsDisplayButtonBorder::GetBounds(nsDisplayListBuilder* aBuilder,
+                                        bool* aSnap) const {
+  *aSnap = false;
+  return aBuilder->IsForEventDelivery()
+             ? nsRect(ToReferenceFrame(), mFrame->GetSize())
+             : mFrame->InkOverflowRectRelativeToSelf() + ToReferenceFrame();
+}
+
+class nsDisplayButtonForeground final : public nsPaintedDisplayItem {
+ public:
+  nsDisplayButtonForeground(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame,
+                            nsButtonFrameRenderer* aRenderer)
+      : nsPaintedDisplayItem(aBuilder, aFrame), mBFR(aRenderer) {
+    MOZ_COUNT_CTOR(nsDisplayButtonForeground);
+  }
+  MOZ_COUNTED_DTOR_OVERRIDE(nsDisplayButtonForeground)
+
+  void Paint(nsDisplayListBuilder* aBuilder, gfxContext* aCtx) override;
+  bool CreateWebRenderCommands(
+      mozilla::wr::DisplayListBuilder& aBuilder,
+      mozilla::wr::IpcResourceUpdateQueue& aResources,
+      const StackingContextHelper& aSc,
+      mozilla::layers::RenderRootStateManager* aManager,
+      nsDisplayListBuilder* aDisplayListBuilder) override;
+  NS_DISPLAY_DECL_NAME("ButtonForeground", TYPE_BUTTON_FOREGROUND)
+ private:
+  nsButtonFrameRenderer* mBFR;
+};
+
+void nsDisplayButtonForeground::Paint(nsDisplayListBuilder* aBuilder,
+                                      gfxContext* aCtx) {
+  nsRect r = nsRect(ToReferenceFrame(), mFrame->GetSize());
+
+  // Draw the -moz-focus-inner border
+  Unused << mBFR->PaintInnerFocusBorder(aBuilder, mFrame->PresContext(), *aCtx,
+                                        GetPaintRect(aBuilder, aCtx), r);
+}
+
+bool nsDisplayButtonForeground::CreateWebRenderCommands(
+    mozilla::wr::DisplayListBuilder& aBuilder,
+    mozilla::wr::IpcResourceUpdateQueue& aResources,
+    const StackingContextHelper& aSc,
+    mozilla::layers::RenderRootStateManager* aManager,
+    nsDisplayListBuilder* aDisplayListBuilder) {
+  Maybe<nsCSSBorderRenderer> br;
+  bool borderIsEmpty = false;
+  bool dummy;
+  nsRect r = nsRect(ToReferenceFrame(), mFrame->GetSize());
+  br = mBFR->CreateInnerFocusBorderRenderer(
+      aDisplayListBuilder, mFrame->PresContext(), nullptr,
+      GetBounds(aDisplayListBuilder, &dummy), r, &borderIsEmpty);
+
+  if (!br) {
+    return borderIsEmpty;
+  }
+
+  aBuilder.StartGroup(this);
+  br->CreateWebRenderCommands(this, aBuilder, aResources, aSc);
+  aBuilder.FinishGroup();
+
+  return true;
+}
+
+}  // namespace mozilla
diff --git a/layout/forms/nsButtonFrameRenderer.h b/layout/forms/nsButtonFrameRenderer.h
new file mode 100644
index 000000000000..91a2cb82b9a1
--- /dev/null
+++ b/layout/forms/nsButtonFrameRenderer.h
@@ -0,0 +1,78 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsButtonFrameRenderer_h___
+#define nsButtonFrameRenderer_h___
+
+#include "nsMargin.h"
+#include "nsCSSRenderingBorders.h"
+
+class gfxContext;
+class nsIFrame;
+class nsPresContext;
+struct nsRect;
+
+namespace mozilla {
+class nsDisplayList;
+class nsDisplayListBuilder;
+}  // namespace mozilla
+
+#define NS_BUTTON_RENDERER_FOCUS_INNER_CONTEXT_INDEX 0
+#define NS_BUTTON_RENDERER_LAST_CONTEXT_INDEX \
+  NS_BUTTON_RENDERER_FOCUS_INNER_CONTEXT_INDEX
+
+class nsButtonFrameRenderer {
+  using nsDisplayList = mozilla::nsDisplayList;
+  using nsDisplayListBuilder = mozilla::nsDisplayListBuilder;
+
+  using ImgDrawResult = mozilla::image::ImgDrawResult;
+  using ComputedStyle = mozilla::ComputedStyle;
+
+ public:
+  nsButtonFrameRenderer();
+  ~nsButtonFrameRenderer();
+
+  /**
+   * Create display list items for the button
+   */
+  nsresult DisplayButton(nsDisplayListBuilder* aBuilder,
+                         nsDisplayList* aBackground,
+                         nsDisplayList* aForeground);
+
+  ImgDrawResult PaintInnerFocusBorder(nsDisplayListBuilder* aBuilder,
+                                      nsPresContext* aPresContext,
+                                      gfxContext& aRenderingContext,
+                                      const nsRect& aDirtyRect,
+                                      const nsRect& aRect);
+
+  mozilla::Maybe<nsCSSBorderRenderer> CreateInnerFocusBorderRenderer(
+      nsDisplayListBuilder* aBuilder, nsPresContext* aPresContext,
+      gfxContext* aRenderingContext, const nsRect& aDirtyRect,
+      const nsRect& aRect, bool* aBorderIsEmpty);
+
+  ImgDrawResult PaintBorder(nsDisplayListBuilder* aBuilder,
+                            nsPresContext* aPresContext,
+                            gfxContext& aRenderingContext,
+                            const nsRect& aDirtyRect, const nsRect& aRect);
+
+  void SetFrame(nsIFrame* aFrame, nsPresContext* aPresContext);
+
+  void GetButtonInnerFocusRect(const nsRect& aRect, nsRect& aResult);
+
+  ComputedStyle* GetComputedStyle(int32_t aIndex) const;
+  void SetComputedStyle(int32_t aIndex, ComputedStyle* aComputedStyle);
+  void ReResolveStyles(nsPresContext* aPresContext);
+
+  nsIFrame* GetFrame();
+
+ private:
+  // cached style for optional inner focus outline (used on Windows).
+  RefPtr<ComputedStyle> mInnerFocusStyle;
+
+  nsIFrame* mFrame;
+};
+
+#endif
diff --git a/layout/forms/nsHTMLButtonControlFrame.cpp b/layout/forms/nsHTMLButtonControlFrame.cpp
index cb24ccbfb930..0a8c0c0651b8 100644
--- a/layout/forms/nsHTMLButtonControlFrame.cpp
+++ b/layout/forms/nsHTMLButtonControlFrame.cpp
@@ -10,17 +10,15 @@
 #include "mozilla/PresShell.h"
 #include "nsIFrameInlines.h"
 #include "nsContainerFrame.h"
-#include "nsPresContextInlines.h"
 #include "nsIFormControlFrame.h"
 #include "nsPresContext.h"
 #include "nsLayoutUtils.h"
 #include "nsGkAtoms.h"
+#include "nsButtonFrameRenderer.h"
 #include "nsDisplayList.h"
-#include "nsCSSRendering.h"
 #include <algorithm>
 
 using namespace mozilla;
-using namespace mozilla::image;
 
 nsContainerFrame* NS_NewHTMLButtonControlFrame(PresShell* aPresShell,
                                                ComputedStyle* aStyle) {
@@ -41,13 +39,7 @@ void nsHTMLButtonControlFrame::Init(nsIContent* aContent,
                                     nsContainerFrame* aParent,
                                     nsIFrame* aPrevInFlow) {
   nsContainerFrame::Init(aContent, aParent, aPrevInFlow);
-
-  // get all the styles
-  ServoStyleSet* styleSet = PresContext()->StyleSet();
-
-  // Get styles assigned to -moz-focus-inner (i.e. dotted border on Windows)
-  mInnerFocusStyle = styleSet->ProbePseudoElementStyle(
-      *mContent->AsElement(), PseudoStyleType::mozFocusInner, nullptr, Style());
+  mRenderer.SetFrame(this, PresContext());
 }
 
 NS_QUERYFRAME_HEAD(nsHTMLButtonControlFrame)
@@ -75,126 +67,14 @@ nsresult nsHTMLButtonControlFrame::HandleEvent(nsPresContext* aPresContext,
   return nsIFrame::HandleEvent(aPresContext, aEvent, aEventStatus);
 }
 
-bool nsHTMLButtonControlFrame::ShouldClipPaintingToBorderBox() const {
+bool nsHTMLButtonControlFrame::ShouldClipPaintingToBorderBox() {
   // FIXME(emilio): probably should account for per-axis clipping...
   return StyleDisplay()->mOverflowX != StyleOverflow::Visible;
 }
 
-namespace mozilla {
-
-class nsDisplayButtonForeground final : public nsPaintedDisplayItem {
- public:
-  nsDisplayButtonForeground(nsDisplayListBuilder* aBuilder, nsIFrame* aFrame)
-      : nsPaintedDisplayItem(aBuilder, aFrame) {
-    MOZ_COUNT_CTOR(nsDisplayButtonForeground);
-  }
-
-  MOZ_COUNTED_DTOR_FINAL(nsDisplayButtonForeground)
-
-  void Paint(nsDisplayListBuilder* aBuilder, gfxContext* aCtx) override;
-  bool CreateWebRenderCommands(
-      mozilla::wr::DisplayListBuilder& aBuilder,
-      mozilla::wr::IpcResourceUpdateQueue& aResources,
-      const StackingContextHelper& aSc,
-      mozilla::layers::RenderRootStateManager* aManager,
-      nsDisplayListBuilder* aDisplayListBuilder) override;
-  NS_DISPLAY_DECL_NAME("ButtonForeground", TYPE_BUTTON_FOREGROUND)
-};
-
-void nsDisplayButtonForeground::Paint(nsDisplayListBuilder* aBuilder,
-                                      gfxContext* aCtx) {
-  static_cast<nsHTMLButtonControlFrame*>(mFrame)->PaintInnerFocusBorder(
-      aBuilder, *aCtx, GetPaintRect(aBuilder, aCtx),
-      nsRect(ToReferenceFrame(), mFrame->GetSize()));
-}
-
-bool nsDisplayButtonForeground::CreateWebRenderCommands(
-    mozilla::wr::DisplayListBuilder& aBuilder,
-    mozilla::wr::IpcResourceUpdateQueue& aResources,
-    const StackingContextHelper& aSc,
-    mozilla::layers::RenderRootStateManager* aManager,
-    nsDisplayListBuilder* aDisplayListBuilder) {
-  bool borderIsEmpty = false;
-  bool dummy;
-  Maybe<nsCSSBorderRenderer> br =
-      static_cast<nsHTMLButtonControlFrame*>(mFrame)
-          ->CreateInnerFocusBorderRenderer(
-              aDisplayListBuilder, nullptr,
-              GetBounds(aDisplayListBuilder, &dummy),
-              nsRect(ToReferenceFrame(), mFrame->GetSize()), &borderIsEmpty);
-
-  if (!br) {
-    return borderIsEmpty;
-  }
-
-  aBuilder.StartGroup(this);
-  br->CreateWebRenderCommands(this, aBuilder, aResources, aSc);
-  aBuilder.FinishGroup();
-
-  return true;
-}
-
-}  // namespace mozilla
-
-static nsRect GetButtonInnerFocusRect(const nsIFrame* aFrame,
-                                      const ComputedStyle& aFocusStyle,
-                                      const nsRect& aRect) {
-  nsRect result = aRect;
-  result.Deflate(aFrame->GetUsedBorderAndPadding());
-
-  nsMargin innerFocusPadding;
-  aFocusStyle.StylePadding()->GetPadding(innerFocusPadding);
-
-  nsMargin framePadding = aFrame->GetUsedPadding();
-  innerFocusPadding.top = std::min(innerFocusPadding.top, framePadding.top);
-  innerFocusPadding.right =
-      std::min(innerFocusPadding.right, framePadding.right);
-  innerFocusPadding.bottom =
-      std::min(innerFocusPadding.bottom, framePadding.bottom);
-  innerFocusPadding.left = std::min(innerFocusPadding.left, framePadding.left);
-
-  result.Inflate(innerFocusPadding);
-  return result;
-}
-
-void nsHTMLButtonControlFrame::PaintInnerFocusBorder(
-    nsDisplayListBuilder* aBuilder, gfxContext& aRenderingContext,
-    const nsRect& aDirtyRect, const nsRect& aRect) {
-  if (!mInnerFocusStyle) {
-    return;
-  }
-
-  // we draw the -moz-focus-inner border just inside the button's
-  // normal border and padding, to match Windows themes.
-  PaintBorderFlags flags = aBuilder->ShouldSyncDecodeImages()
-                               ? PaintBorderFlags::SyncDecodeImages
-                               : PaintBorderFlags();
-
-  nsRect rect = GetButtonInnerFocusRect(this, *mInnerFocusStyle, aRect);
-  // We don't paint border images here, so the ImgDrawResult is useless.
-  Unused << nsCSSRendering::PaintBorder(PresContext(), aRenderingContext, this,
-                                        aDirtyRect, rect, mInnerFocusStyle,
-                                        flags);
-}
-
-Maybe<nsCSSBorderRenderer>
-nsHTMLButtonControlFrame::CreateInnerFocusBorderRenderer(
-    nsDisplayListBuilder* aBuilder, gfxContext* aRenderingContext,
-    const nsRect& aDirtyRect, const nsRect& aRect, bool* aBorderIsEmpty) {
-  if (!mInnerFocusStyle) {
-    return Nothing();
-  }
-
-  nsRect rect = GetButtonInnerFocusRect(this, *mInnerFocusStyle, aRect);
-  gfx::DrawTarget* dt =
-      aRenderingContext ? aRenderingContext->GetDrawTarget() : nullptr;
-  return nsCSSRendering::CreateBorderRenderer(PresContext(), dt, this,
-                                              aDirtyRect, rect,
-                                              mInnerFocusStyle, aBorderIsEmpty);
-}
-
 void nsHTMLButtonControlFrame::BuildDisplayList(
     nsDisplayListBuilder* aBuilder, const nsDisplayListSet& aLists) {
+  nsDisplayList onTop(aBuilder);
   if (IsVisibleForPainting()) {
     // Clip the button itself to its border area for event hit testing.
     Maybe<DisplayListClipState::AutoSaveRestore> eventClipState;
@@ -206,9 +87,11 @@ void nsHTMLButtonControlFrame::BuildDisplayList(
           rect, hasRadii ? radii : nullptr);
     }
 
-    DisplayBorderBackgroundOutline(aBuilder, aLists);
+    mRenderer.DisplayButton(aBuilder, aLists.BorderBackground(), &onTop);
   }
 
+  nsDisplayListCollection set(aBuilder);
+
   {
     DisplayListClipState::AutoSaveRestore clipState(aBuilder);
 
@@ -217,23 +100,22 @@ void nsHTMLButtonControlFrame::BuildDisplayList(
       nsRect rect(aBuilder->ToReferenceFrame(this), GetSize());
       rect.Deflate(border);
       nscoord radii[8];
-      const bool hasRadii = GetPaddingBoxBorderRadii(radii);
+      bool hasRadii = GetPaddingBoxBorderRadii(radii);
       clipState.ClipContainingBlockDescendants(rect,
                                                hasRadii ? radii : nullptr);
     }
 
-    BuildDisplayListForChild(aBuilder, mFrames.FirstChild(), aLists,
+    BuildDisplayListForChild(aBuilder, mFrames.FirstChild(), set,
                              DisplayChildFlag::ForcePseudoStackingContext);
   }
 
-  // Put the foreground outline on top of the children.
-  if (IsVisibleForPainting() && mInnerFocusStyle &&
-      mInnerFocusStyle->StyleBorder()->HasBorder() && IsThemed() &&
-      PresContext()->Theme()->ThemeWantsButtonInnerFocusRing()) {
-    aLists.Content()->AppendNewToTop<nsDisplayButtonForeground>(aBuilder, this);
-  }
+  // Put the foreground outline and focus rects on top of the children
+  set.Content()->AppendToTop(&onTop);
+  set.MoveTo(aLists);
 
-  // To draw border when selected in editor
+  DisplayOutline(aBuilder, aLists);
+
+  // to draw border when selected in editor
   DisplaySelectionOverlay(aBuilder, aLists.Content());
 }
 
@@ -479,17 +361,12 @@ nsresult nsHTMLButtonControlFrame::SetFormProperty(nsAtom* aName,
 
 ComputedStyle* nsHTMLButtonControlFrame::GetAdditionalComputedStyle(
     int32_t aIndex) const {
-  if (aIndex == 0) {
-    return mInnerFocusStyle;
-  }
-  return nullptr;
+  return mRenderer.GetComputedStyle(aIndex);
 }
 
 void nsHTMLButtonControlFrame::SetAdditionalComputedStyle(
     int32_t aIndex, ComputedStyle* aComputedStyle) {
-  if (aIndex == 0) {
-    mInnerFocusStyle = aComputedStyle;
-  }
+  mRenderer.SetComputedStyle(aIndex, aComputedStyle);
 }
 
 void nsHTMLButtonControlFrame::AppendDirectlyOwnedAnonBoxes(
diff --git a/layout/forms/nsHTMLButtonControlFrame.h b/layout/forms/nsHTMLButtonControlFrame.h
index 760418f95421..b4409d66a7d8 100644
--- a/layout/forms/nsHTMLButtonControlFrame.h
+++ b/layout/forms/nsHTMLButtonControlFrame.h
@@ -7,9 +7,10 @@
 #ifndef nsHTMLButtonControlFrame_h___
 #define nsHTMLButtonControlFrame_h___
 
+#include "mozilla/Attributes.h"
 #include "nsContainerFrame.h"
-#include "nsCSSRenderingBorders.h"
 #include "nsIFormControlFrame.h"
+#include "nsButtonFrameRenderer.h"
 
 class gfxContext;
 class nsPresContext;
@@ -82,14 +83,6 @@ class nsHTMLButtonControlFrame : public nsContainerFrame,
   // Return the ::-moz-button-content anonymous box.
   void AppendDirectlyOwnedAnonBoxes(nsTArray<OwnedAnonBox>& aResult) override;
 
-  mozilla::Maybe<nsCSSBorderRenderer> CreateInnerFocusBorderRenderer(
-      nsDisplayListBuilder* aBuilder, gfxContext* aRenderingContext,
-      const nsRect& aDirtyRect, const nsRect& aRect, bool* aBorderIsEmpty);
-
-  void PaintInnerFocusBorder(nsDisplayListBuilder* aBuilder,
-                             gfxContext& aRenderingContext,
-                             const nsRect& aDirtyRect, const nsRect& aRect);
-
  protected:
   nsHTMLButtonControlFrame(ComputedStyle* aStyle, nsPresContext* aPresContext,
                            nsIFrame::ClassID aID);
@@ -97,7 +90,7 @@ class nsHTMLButtonControlFrame : public nsContainerFrame,
   // Indicates whether we should clip our children's painting to our
   // border-box (either because of "overflow" or because of legacy reasons
   // about how <input>-flavored buttons work).
-  bool ShouldClipPaintingToBorderBox() const;
+  bool ShouldClipPaintingToBorderBox();
 
   // Reflows the button's sole child frame, and computes the desired size
   // of the button itself from the results.
@@ -111,7 +104,7 @@ class nsHTMLButtonControlFrame : public nsContainerFrame,
       mozilla::WritingMode aWM,
       BaselineSharingGroup aBaselineGroup) const override;
 
-  RefPtr<mozilla::ComputedStyle> mInnerFocusStyle;
+  nsButtonFrameRenderer mRenderer;
 };
 
 #endif
diff --git a/layout/painting/nsDisplayItemTypesList.h b/layout/painting/nsDisplayItemTypesList.h
index ecc107a20b6f..b3d4f14c4da4 100644
--- a/layout/painting/nsDisplayItemTypesList.h
+++ b/layout/painting/nsDisplayItemTypesList.h
@@ -18,6 +18,9 @@ DECLARE_DISPLAY_ITEM_TYPE(BLEND_MODE,
 DECLARE_DISPLAY_ITEM_TYPE(BORDER, 0)
 DECLARE_DISPLAY_ITEM_TYPE(BOX_SHADOW_INNER, TYPE_RENDERS_NO_IMAGES)
 DECLARE_DISPLAY_ITEM_TYPE(BOX_SHADOW_OUTER, TYPE_RENDERS_NO_IMAGES)
+DECLARE_DISPLAY_ITEM_TYPE(BUTTON_BORDER_BACKGROUND, TYPE_IS_CONTENTFUL)
+DECLARE_DISPLAY_ITEM_TYPE(BUTTON_BOX_SHADOW_OUTER,
+                          TYPE_RENDERS_NO_IMAGES | TYPE_IS_CONTENTFUL)
 DECLARE_DISPLAY_ITEM_TYPE(BUTTON_FOREGROUND, TYPE_IS_CONTENTFUL)
 DECLARE_DISPLAY_ITEM_TYPE(CANVAS, TYPE_RENDERS_NO_IMAGES)
 DECLARE_DISPLAY_ITEM_TYPE(CANVAS_BACKGROUND_COLOR, TYPE_RENDERS_NO_IMAGES)
@@ -31,6 +34,7 @@ DECLARE_DISPLAY_ITEM_TYPE(CHECKED_CHECKBOX,
 DECLARE_DISPLAY_ITEM_TYPE(CHECKED_RADIOBUTTON,
                           TYPE_RENDERS_NO_IMAGES | TYPE_IS_CONTENTFUL)
 DECLARE_DISPLAY_ITEM_TYPE(COLUMN_RULE, TYPE_RENDERS_NO_IMAGES)
+DECLARE_DISPLAY_ITEM_TYPE(COMBOBOX_FOCUS, TYPE_RENDERS_NO_IMAGES)
 DECLARE_DISPLAY_ITEM_TYPE(COMPOSITOR_HITTEST_INFO, TYPE_RENDERS_NO_IMAGES)
 DECLARE_DISPLAY_ITEM_TYPE(CONTAINER, TYPE_RENDERS_NO_IMAGES | TYPE_IS_CONTAINER)
 DECLARE_DISPLAY_ITEM_TYPE(DESTINATION, TYPE_RENDERS_NO_IMAGES)
